bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  Iterator  iterator  =  eventsStates.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	71	None	replace
2	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  Iterator  iterator  =  eventStates.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	71	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  +  1);	  Preconditions.checkState(previousT    ==    currentT    +    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	75	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  previousT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  previousT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  previousT  +  1);	  Preconditions.checkState(previousT    ==    currentT    +    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	75	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    >    0;    resetOccurred  =  currentT  >  0;	  	compilable	  [FE]  AssertionError  	45	1	add
6	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  resetOccurred  =  currentT  >  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    resetOccurred  =  currentT  >  0;	  	compilable	  [FE]  AssertionError  	45	1	add
7	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  resetOccurred  =  currentT  >  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  resetOccurred  =  currentT  >  0;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(currentT  >  0)  {  resetOccurred  =  currentT  >  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
8	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
9	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
10	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
11	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
12	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
13	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  resetOccurred  =  currentT  ==  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    ==    1;    resetOccurred  =  currentT  ==  1;	  	compilable	  [FE]  AssertionError  	139	1	add
15	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  resetOccurred  =  currentT  ==  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  resetOccurred  =  currentT  ==  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    resetOccurred  =  currentT  ==  1;	  	compilable	  [FE]  AssertionError  	139	1	add
16	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    state.reinitializeBegin(previousT);	  	non-compiled	[CE]  cannot  find  symbol  state	139	None	add
17	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  state	139	None	add
18	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    state.reinitializeBegin(currentT);	  	non-compiled	[CE]  cannot  find  symbol  state	139	None	add
19	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(previousT);  isLastStep  =  true;  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  state.reinitializeBegin(previousT);  isLastStep  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    state.reinitializeBegin(previousT);  isLastStep  =  true;	  	non-compiled	[CE]  cannot  find  symbol  state	139	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    resetOccurred    =    currentT!=    currentT;    }    	compilable	  [FE]  AssertionError  	133	1	replace
21	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    resetOccurred    =    currentT!=    currentT;    }    	compilable	  [FE]  AssertionError  	133	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  resetOccurred  =  previousT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT    ==    currentT;    resetOccurred  =  previousT  ==  currentT;	  	compilable	  [FE]  AssertionError  	6	1	add
23	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  resetOccurred  =  previousT  ==  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  resetOccurred  =  previousT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    resetOccurred  =  previousT  ==  currentT;	  	compilable	  [FE]  AssertionError  	6	1	add
24	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
25	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    if(previousT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
26	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
27	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
28	[BUG]  [BUGGY]  This.resetOccurred  =  false;  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  This.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	This.resetOccurred  =  false;	  this.resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  This	42	None	replace
29	[BUG]  [BUGGY]  state.resetOccurred(currentT);  [CE]  cannot  find  symbol  state  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.resetOccurred(currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.resetOccurred(currentT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	33	None	replace
30	[BUG]  [BUGGY]  state.resetOccurred(previousT,  currentT);  [CE]  cannot  find  symbol  state  [FE]                        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.resetOccurred(previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.resetOccurred(previousT,  currentT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	33	None	replace
31	[BUG]  [BUGGY]  currentT.resetOccurred(previousT);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT.resetOccurred(previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT.resetOccurred(previousT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
32	[BUG]  [BUGGY]  state.reinitializeBegin(eventT,  currentT);  [CE]  cannot  find  symbol  eventT  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(eventT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(eventT,  currentT);	  state.reinitializeBegin(es0,    currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	128	None	replace
33	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  currentT);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(currentT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  currentT);	  state.reinitializeBegin(es0,    currentT);    	non-compiled	[CE]  cannot  find  symbol  state	128	None	replace
34	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  >>  0;	  this.resetOccurred    =    currentT!=    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	105	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  >=  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
36	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  >=  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  >=  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT!=  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
38	[BUG]  [BUGGY]  this.resetOccurred  =  previousT!=  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT!=  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  ==  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
40	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  ==  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  ==  0;	  this.resetOccurred    =    currentT!=    0;    	compilable	  [FE]  AssertionError  	105	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT    ==    0?    true    :    false;    this.resetOccurred  =  currentT  ==  0?  true  :  false;	  	compilable	  [FE]  AssertionError  	135	1	add
42	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    this.resetOccurred  =  currentT  ==  0?  true  :  false;	  	compilable	  [FE]  AssertionError  	135	1	add
43	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  This.resetOccurred  =  currentT  ==  0?  true  :  false;  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  This.resetOccurred  =  currentT  ==  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    This.resetOccurred  =  currentT  ==  0?  true  :  false;	  	non-compiled	[CE]  cannot  find  symbol  This	135	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }	  	compilable	  [FE]  AssertionError  	135	1	add
45	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }	  	compilable	  [FE]  AssertionError  	135	1	add
46	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  currentT  ==  0?  true  :  false;  }	  	non-compiled	[CE]  cannot  find  symbol  state	135	None	add
47	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  previousT  ==  0?  true  :  false;  }  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  previousT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(previousT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  else  {  state.resetOccurred  =  previousT  ==  0?  true  :  false;  }	  	non-compiled	[CE]  cannot  find  symbol  state	135	None	add
48	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
49	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
50	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
51	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  events  =  this.events.iterator();	  Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	24	None	replace
52	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventStates  =  this.events.iterator();	  Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	24	None	replace
53	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();	  Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	24	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >  0;	  resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	46	1	replace
55	[BUG]  [BUGGY]  resetOccurred  =  previousT  >  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >  0;	  resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	46	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  1;	  resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	46	1	replace
57	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  1;	  resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	46	1	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    >=    0;    resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	99	1	add
59	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  >=  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	99	1	add
60	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    resetOccurred  =  currentT  >>  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	99	None	add
61	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
62	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
63	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  0;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
64	[BUG]  [BUGGY]  resetOccurred  =  false;  state.resetOccurred  =  true;  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  state.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  state.resetOccurred  =  true;	  resetOccurred    =    true;    state.resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
65	[BUG]  [BUGGY]  resetOccurred  =  true;  currentT.resetOccurred  =  true;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  true;  currentT.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  true;  currentT.resetOccurred  =  true;	  resetOccurred    =    true;    state.resetOccurred    =    true;    	non-compiled	[CE]  double  cannot  be  dereferenced	54	None	replace
66	[BUG]  [BUGGY]  resetOccurred  =  true;  state.resetOccurred  =  false;  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  true;  state.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  true;  state.resetOccurred  =  false;	  resetOccurred    =    true;    state.resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
67	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
68	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
69	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
70	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
71	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.currentEvents.iterator();  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.currentEvents.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.currentEvents.iterator();	  Iterator    <    EventState>    eventsStates    =    this.currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  currentEvents	25	None	replace
72	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();	  Iterator    <    EventState>    eventsStates    =    this.currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	25	None	replace
73	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
74	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
75	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
76	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
77	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
78	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  <  currentT)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  <  currentT)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	compilable	  [FE]  AssertionError  	114	1	replace
80	[BUG]  [BUGGY]  if(previousT  <  currentT)  {  resetOccurred  =  true;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  <  currentT)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  <  currentT)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	compilable	  [FE]  AssertionError  	114	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	69	1	add
82	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	69	1	add
83	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  This.resetOccurred  =  false;  this.resetOccurred  =  false;  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  This.resetOccurred  =  false;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    This.resetOccurred  =  false;  this.resetOccurred  =  false;	  	non-compiled	[CE]  cannot  find  symbol  This	69	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  isLastStep  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  isLastStep  =  true;	  	compilable	  [FE]  AssertionError  	69	1	add
85	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  isLastStep  =  true;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  false;  isLastStep  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  isLastStep  =  true;	  	compilable	  [FE]  AssertionError  	69	1	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	69	1	add
87	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  true;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  false;  this.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	69	1	add
88	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(currentT,  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  eventT);	  state.reinitializeBegin(currentT,    previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	98	None	replace
89	[BUG]  [BUGGY]  state.reinitializeBegin(interpolator,  previousT);  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(interpolator,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(interpolator,  previousT);	  state.reinitializeBegin(currentT,    previousT);    	non-compiled	[CE]  cannot  find  symbol  state	98	None	replace
90	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  previousT,  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(currentT,  previousT,  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  previousT,  eventT);	  state.reinitializeBegin(currentT,    previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	98	None	replace
91	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
92	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
93	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
94	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
95	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  >>  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	104	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	104	1	add
97	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  >=  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	104	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT!=  0;	  	compilable	  [FE]  AssertionError  	104	1	add
99	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT!=  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT!=  0;	  	compilable	  [FE]  AssertionError  	104	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	104	1	add
101	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  ==  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	104	1	add
102	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  This.resetOccurred  =  currentT  >>  0;  [CE]  cannot  find  symbol  This  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  This.resetOccurred  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    This.resetOccurred  =  currentT  >>  0;	  	non-compiled	[CE]  cannot  find  symbol  This	104	None	add
103	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
104	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
105	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
106	[BUG]  [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  state.reinitializeBegin(previousT);	  resetOccurred    =    true;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	52	None	replace
107	[BUG]  [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  state.reinitializeBegin(currentT);	  resetOccurred    =    true;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	52	None	replace
108	[BUG]  [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(previousT);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  currentT.reinitializeBegin(previousT);	  resetOccurred    =    true;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >>  currentT);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >>  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >>  currentT);	  Preconditions.checkState(currentT    >=    previousT);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	8	None	replace
110	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
111	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
112	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
113	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  resetOccurred  =  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    >=    previousT;    resetOccurred  =  currentT  >=  previousT;	  	compilable	  [FE]  AssertionError  	92	1	add
115	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  resetOccurred  =  currentT  >=  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  resetOccurred  =  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    resetOccurred  =  currentT  >=  previousT;	  	compilable	  [FE]  AssertionError  	92	1	add
116	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  resetOccurred  =  currentT  >>  previousT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  resetOccurred  =  currentT  >>  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    resetOccurred  =  currentT  >>  previousT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	92	None	add
117	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >=  previousT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >=  previousT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >=  previousT;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
118	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >>  previousT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >>  previousT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  >>  previousT;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
119	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  ==  previousT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  ==  previousT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT!=  t)  {  for(Iterator  iterator  =  eventsStates.iterator();  iterator.hasNext();)  {  EventState  currentEvent  =(EventState)iterator.next();  resetOccurred  =  currentT  ==  previousT;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
120	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
121	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
122	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
123	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
124	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  Iterator  iterator  =  this.events.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	101	None	replace
125	[BUG]  [BUGGY]  This.resetOccurred  =  false;  Iterator  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  This.resetOccurred  =  false;  Iterator  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	This.resetOccurred  =  false;  Iterator  iterator  =  this.events.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  This	101	None	replace
126	[BUG]  [BUGGY]  this.resetOccurred  =  true;  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  iterator  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  iterator  =  this.events.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  iterator	101	None	replace
127	[BUG]  [BUGGY]  this.eventsStates.add(previousT,  currentT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(previousT,  currentT);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	106	None	replace
128	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  previousT,  currentT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(interpolator,  previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  previousT,  currentT);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	106	None	replace
129	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  currentT,  previousT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(interpolator,  currentT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  currentT,  previousT);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	106	None	replace
130	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
131	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
132	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
133	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  true;	  resetOccurred    &=    false;    	compilable	  [FE]  AssertionError  	96	1	replace
135	[BUG]  [BUGGY]  resetOccurred  &=  true;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  true;	  resetOccurred    &=    false;    	compilable	  [FE]  AssertionError  	96	1	replace
136	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  false;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  false;	  resetOccurred    &=    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	96	None	replace
137	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  false;  [CE]  incomparable  types:  double  and  boolean  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  ==  false;	  resetOccurred    &=    false;    	non-compiled	[CE]  incomparable  types:  double  and  boolean	96	None	replace
138	[BUG]  [BUGGY]  resetOccurred  &=  currentT  <  false;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  <  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  <  false;	  resetOccurred    &=    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	96	None	replace
139	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
140	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
141	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  <  0;	  resetOccurred    =    previousT    >=    0;    	compilable	  [FE]  AssertionError  	48	1	replace
143	[BUG]  [BUGGY]  resetOccurred  =  previousT  <  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  <  0;	  resetOccurred    =    previousT    >=    0;    	compilable	  [FE]  AssertionError  	48	1	replace
144	[BUG]  [BUGGY]  state.reinitializeBegin(expT,  previousT);  [CE]  cannot  find  symbol  expT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expT,  previousT);	  state.reinitializeBegin(es0,    previousT);    	non-compiled	[CE]  cannot  find  symbol  expT	121	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  resetOccurred  =  currentT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    >    currentT;    resetOccurred  =  currentT  >  currentT;	  	compilable	  [FE]  AssertionError  	90	1	add
146	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  resetOccurred  =  currentT  >  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  resetOccurred  =  currentT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    resetOccurred  =  currentT  >  currentT;	  	compilable	  [FE]  AssertionError  	90	1	add
147	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
148	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
149	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
150	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
151	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
152	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
153	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
154	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
155	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
156	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
157	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
158	[BUG]  [BUGGY]  resetOccurred  =  false;  ResetOccurred  =  true;  [CE]  cannot  find  symbol  ResetOccurred  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  ResetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  ResetOccurred  =  true;	  resetOccurred    =    true;    ResetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  ResetOccurred	87	None	replace
159	[BUG]  [BUGGY]  ResetOccurred  =  true;  [CE]  cannot  find  symbol  ResetOccurred  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  ResetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	ResetOccurred  =  true;	  resetOccurred    =    true;    ResetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  ResetOccurred	87	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;  this.resetOccurred  =  true;	  resetOccurred    =    true;    ResetOccurred    =    true;    	compilable	  [FE]  AssertionError  	87	1	replace
161	[BUG]  [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  true;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  this.resetOccurred  =  true;	  resetOccurred    =    true;    ResetOccurred    =    true;    	compilable	  [FE]  AssertionError  	87	1	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT!=    currentT;    resetOccurred  =  previousT!=  currentT;	  	compilable	  [FE]  AssertionError  	4	1	add
163	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT!=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    resetOccurred  =  previousT!=  currentT;	  	compilable	  [FE]  AssertionError  	4	1	add
164	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    resetOccurred  =  previousT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	4	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT!=    currentT;    resetOccurred  =  previousT  >=  currentT;	  	compilable	  [FE]  AssertionError  	4	1	add
166	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT  >=  currentT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  resetOccurred  =  previousT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    resetOccurred  =  previousT  >=  currentT;	  	compilable	  [FE]  AssertionError  	4	1	add
167	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
168	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >>  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >>  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >>  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	35	1	add
170	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	35	1	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	35	1	add
172	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  ==  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  >=  0;  resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	35	1	add
173	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >>  0;  resetOccurred  =  currentT  ==  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >>  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  >>  0;  resetOccurred  =  currentT  ==  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	35	None	add
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	35	1	add
175	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >=  0;	  	compilable	  [FE]  AssertionError  	35	1	add
176	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  >>  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	35	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  >  0;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
178	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  >  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  >  0;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  >  1;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
180	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  >  1;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  >=  0;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
182	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >=  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  >=  0;	  this.resetOccurred    =    currentT    >    0;    	compilable	  [FE]  AssertionError  	138	1	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  -  previousT);	  Preconditions.checkState(currentT    ==    previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	67	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT,  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT,  currentT);	  Preconditions.checkState(currentT    ==    previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	67	None	replace
185	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  interpolator);	  state.reinitializeBegin(previousT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	32	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  resetOccurred  &=  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    &=    currentT    ==    currentT;    resetOccurred  &=  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	62	1	add
187	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  resetOccurred  &=  currentT  ==  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  resetOccurred  &=  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    resetOccurred  &=  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	62	1	add
188	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  &=  currentT  ==  currentT;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  &=  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    &=  currentT  ==  currentT;	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
189	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  currentT  &=  currentT  ==  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  currentT  &=  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    currentT  &=  currentT  ==  currentT;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	62	None	add
190	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    state.reinitializeBegin(previousT);	  	non-compiled	[CE]  cannot  find  symbol  state	62	None	add
191	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  state	62	None	add
192	[BUG]  [BUGGY]  Iterator  iterator  =  this.stepHandlers.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  this.stepHandlers.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  this.stepHandlers.iterator();	  Iterator    iterator    =    stepHandlers.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	102	None	replace
193	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  Iterator  iterator  =  this.eventsStates.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	73	None	replace
194	[BUG]  [BUGGY]  this.resetOccurred  =  true;  iterator  =  this.eventsStates.iterator();  [CE]  cannot  find  symbol  iterator  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  iterator  =  this.eventsStates.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  iterator	73	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  previousT  >  currentT  +  1;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
196	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  previousT  >  currentT  +  1;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >  previousT;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
198	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  previousT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  previousT;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  <  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  previousT  <  currentT;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
200	[BUG]  [BUGGY]  resetOccurred  &=  previousT  <  currentT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  <  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  previousT  <  currentT;	  resetOccurred    &=    previousT    >    currentT;    	compilable	  [FE]  AssertionError  	61	1	replace
201	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT  +  1;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT  +  1;	  resetOccurred    =    previousT!=    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  ==  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
203	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  ==  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  previousT  ==  currentT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
205	[BUG]  [BUGGY]  resetOccurred  &=  previousT  ==  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  previousT  ==  currentT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >=  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
207	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >=  previousT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >=  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
208	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >>  previousT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >>  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >>  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	63	None	replace
209	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(interpolator);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	29	None	replace
210	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(interpolator);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	29	None	replace
211	[BUG]  [BUGGY]  this.resetOccurred  =  true;  This.resetOccurred  =  true;  [CE]  cannot  find  symbol  This  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  This.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    true;    This.resetOccurred  =  true;	  	non-compiled	[CE]  cannot  find  symbol  This	41	None	add
212	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventsStates.iterator();  this.resetOccurred  =  true;  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator  iterator  =  eventsStates.iterator();  this.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    true;    Iterator  iterator  =  eventsStates.iterator();  this.resetOccurred  =  true;	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	41	None	add
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(previousT!=  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    true;    if(previousT!=  currentT)  {  this.resetOccurred  =  true;  }	  	compilable	  [FE]  AssertionError  	41	1	add
214	[BUG]  [BUGGY]  this.resetOccurred  =  true;  if(previousT!=  currentT)  {  this.resetOccurred  =  true;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(previousT!=  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    true;    if(previousT!=  currentT)  {  this.resetOccurred  =  true;  }	  	compilable	  [FE]  AssertionError  	41	1	add
215	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  resetOccurred  =  previousT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT    >=    currentT;    resetOccurred  =  previousT  >=  currentT;	  	compilable	  [FE]  AssertionError  	2	1	add
216	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  resetOccurred  =  previousT  >=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  resetOccurred  =  previousT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    resetOccurred  =  previousT  >=  currentT;	  	compilable	  [FE]  AssertionError  	2	1	add
217	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  resetOccurred  =  previousT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  resetOccurred  =  previousT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    resetOccurred  =  previousT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	2	None	add
218	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
219	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >=  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
220	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  previousT;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
222	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  previousT;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
223	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
224	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
225	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
226	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
227	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  previousT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  previousT);	  this.eventsStates.add(currentT,    eventS);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	59	None	replace
228	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  tEnd);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  tEnd);	  this.eventsStates.add(currentT,    eventS);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	59	None	replace
229	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  currentT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  currentT);	  this.eventsStates.add(currentT,    eventS);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	59	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  resetOccurred  =  previousT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT    >=    0;    resetOccurred  =  previousT  >=  0;	  	compilable	  [FE]  AssertionError  	47	1	add
231	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  resetOccurred  =  previousT  >=  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  resetOccurred  =  previousT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    resetOccurred  =  previousT  >=  0;	  	compilable	  [FE]  AssertionError  	47	1	add
232	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  resetOccurred  =  previousT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  resetOccurred  =  previousT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    resetOccurred  =  previousT  >>  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	47	None	add
233	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
234	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
235	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    if(previousT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  resetOccurred  &=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    &=    currentT    >    tEnd;    resetOccurred  &=  currentT  >  tEnd;	  	compilable	  [FE]  AssertionError  	117	1	add
237	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  resetOccurred  &=  currentT  >  tEnd;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  resetOccurred  &=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    resetOccurred  &=  currentT  >  tEnd;	  	compilable	  [FE]  AssertionError  	117	1	add
238	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  &=  currentT  >  tEnd;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  &=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    &=  currentT  >  tEnd;	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
239	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  currentT  &=  currentT  >  tEnd;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  currentT  &=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    currentT  &=  currentT  >  tEnd;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	117	None	add
240	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  currentT  -=  currentT  >  tEnd;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  currentT  -=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    currentT  -=  currentT  >  tEnd;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	117	None	add
241	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    if(previousT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
242	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
243	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  false;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        true;        resetOccurred    =    true;    resetOccurred  =  true;  resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	50	1	add
245	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  resetOccurred  =  true;  resetOccurred  =  true;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    resetOccurred  =  true;  resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	50	1	add
246	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
247	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT!=  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
248	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
249	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT!=  currentT)  {  if(isLastStep)  {  resetOccurred  =  false;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
250	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >  currentT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >  currentT  +  1);	  Preconditions.checkState(previousT    >    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >  currentT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >  currentT  -  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >  currentT  -  1);	  Preconditions.checkState(previousT    >    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(previousT  <  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  <  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  <  currentT);	  Preconditions.checkState(previousT    >    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  >  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >  previousT);	  Preconditions.checkState(previousT    >    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >  currentT;	  resetOccurred    =    previousT    >=    currentT;    	compilable	  [FE]  AssertionError  	3	1	replace
255	[BUG]  [BUGGY]  resetOccurred  =  previousT  >  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >  currentT;	  resetOccurred    =    previousT    >=    currentT;    	compilable	  [FE]  AssertionError  	3	1	replace
256	[BUG]  [BUGGY]  resetOccurred  =  previousT  +  currentT;  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  +  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  +  currentT;	  resetOccurred    =    previousT    >=    currentT;    	non-compiled	[CE]  incompatible  types	3	None	replace
257	[BUG]  [BUGGY]  resetOccurred  =  previousT  -  currentT;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  -  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  -  currentT;	  resetOccurred    =    previousT    >=    currentT;    	non-compiled	[CE]  incompatible  types	3	None	replace
258	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
259	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
260	[BUG]  [BUGGY]  resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
261	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
262	[BUG]  [BUGGY]  resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
263	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
265	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
266	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
267	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  previousT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  previousT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
269	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  previousT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  previousT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  previousT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  <  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  <  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
271	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  <  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  <  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  <  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	129	1	add
272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }	  	compilable	  [FE]  AssertionError  	129	1	add
273	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }	  	compilable	  [FE]  AssertionError  	129	1	add
274	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  -  1);	  Preconditions.checkState(previousT    ==    currentT    -    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	76	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(previousT!=  currentT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT!=  currentT  -  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT!=  currentT  -  1);	  Preconditions.checkState(previousT    ==    currentT    -    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	76	None	replace
276	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
277	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
278	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
279	[BUG]  [BUGGY]  Iterator  iterator  =  this.currentT.iterator();  [CE]  cannot  find  symbol  currentT  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  this.currentT.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  this.currentT.iterator();	  Iterator    iterator    =    currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  currentT	13	None	replace
280	[BUG]  [BUGGY]  Iterator  iterator  =  previousT.iterator();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  previousT.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  previousT.iterator();	  Iterator    iterator    =    currentT.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
281	[BUG]  [BUGGY]  Iterator  iterator  =  otherStates.iterator();  [CE]  cannot  find  symbol  otherStates  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  otherStates.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  otherStates.iterator();	  Iterator    iterator    =    currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  otherStates	13	None	replace
282	[BUG]  [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(currentT);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  currentT.reinitializeBegin(currentT);	  resetOccurred    =    true;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
283	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.values().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.values().iterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
284	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsEvents.iterator();  [CE]  cannot  find  symbol  eventsEvents  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsEvents.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsEvents.iterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsEvents	22	None	replace
285	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  events.iterator();  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  events.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  events.iterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
286	[BUG]  [BUGGY]  currentT  =  currentT  >>  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  >>  currentT;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	21	None	replace
287	[BUG]  [BUGGY]  currentT  =  currentT!=  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT!=  currentT;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	21	None	replace
288	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  currentT  >=  currentT;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  currentT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  not  a  statement	21	None	replace
289	[BUG]  [BUGGY]  currentT  =  currentT  >=  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	21	None	replace
290	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  t0;  [CE]  cannot  find  symbol  t0  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  t0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  t0;	  resetOccurred    &=    currentT    >    tEnd;    	non-compiled	[CE]  cannot  find  symbol  t0	118	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >=  tEnd;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
292	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >=  tEnd;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >=  tEnd;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  <  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  <  tEnd;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
294	[BUG]  [BUGGY]  resetOccurred  &=  currentT  <  tEnd;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  <  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  <  tEnd;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >  1;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
296	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  1;	  resetOccurred    &=    currentT    >    tEnd;    	compilable	  [FE]  AssertionError  	118	1	replace
297	[BUG]  [BUGGY]  resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  {  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
298	[BUG]  [BUGGY]  resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
299	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
300	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
301	[BUG]  [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  state.reinitializeBegin(interpolator);	  resetOccurred    =    true;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	53	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >=  previousT  -  previousT);	  Preconditions.checkState(previousT    >=    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	111	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >  currentT  -  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >  currentT  -  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >  currentT  -  currentT);	  Preconditions.checkState(previousT    >=    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	111	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >=  currentT  -  previousT);	  Preconditions.checkState(previousT    >=    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	111	None	replace
305	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  state.reinitializeBegin(previousT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
306	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(previousT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
307	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  state.reinitializeBegin(previousT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
308	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
309	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
310	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
311	[BUG]  [BUGGY]  double  resetOccurred  =  currentT  ==  0;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  double  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	double  resetOccurred  =  currentT  ==  0;	  resetOccurred    =    currentT    ==    0;    double    resetOccurred    =    currentT    ==    0;    	non-compiled	[CE]  incompatible  types	123	None	replace
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
313	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
314	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(currentT);  }  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    true;    resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	51	None	replace
315	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(previousT);  }  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  false;  }  else  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    true;    resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	51	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  resetOccurred  &=  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    &=    currentT    >    0;    resetOccurred  &=  currentT  >  0;	  	compilable	  [FE]  AssertionError  	119	1	add
317	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  resetOccurred  &=  currentT  >  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  resetOccurred  &=  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    resetOccurred  &=  currentT  >  0;	  	compilable	  [FE]  AssertionError  	119	1	add
318	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  currentT  &=  currentT  >  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  currentT  &=  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    currentT  &=  currentT  >  0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	119	None	add
319	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  &=  currentT  >  0;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  &=  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    &=  currentT  >  0;	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
320	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
321	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
322	[BUG]  [BUGGY]  currentT  =  currentT  ==  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  ==  0;	  resetOccurred    =    currentT    ==    0;    currentT    =    currentT    ==    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	125	None	replace
323	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  currentT  =  currentT  ==  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  currentT  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  currentT  =  currentT  ==  0;	  resetOccurred    =    currentT    ==    0;    currentT    =    currentT    ==    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	125	None	replace
324	[BUG]  [BUGGY]  currentT  =  previousT  ==  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  previousT  ==  0;	  resetOccurred    =    currentT    ==    0;    currentT    =    currentT    ==    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	125	None	replace
325	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  currentT  =  currentT  >>  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  currentT  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  currentT  =  currentT  >>  0;	  resetOccurred    =    currentT    ==    0;    currentT    =    currentT    ==    0;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	125	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  resetOccurred  =  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    ==    previousT;    resetOccurred  =  currentT  ==  previousT;	  	compilable	  [FE]  AssertionError  	88	1	add
327	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  resetOccurred  =  currentT  ==  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  resetOccurred  =  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    resetOccurred  =  currentT  ==  previousT;	  	compilable	  [FE]  AssertionError  	88	1	add
328	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  null)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  null)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(previousT!=  null)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
329	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  t)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  t)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(previousT!=  t)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
330	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  t)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  t)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(previousT!=  t)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
331	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  null)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT!=  null)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(previousT!=  null)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
332	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
333	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
334	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
335	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
336	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT!=  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT!=  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
337	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
338	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
340	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
341	[BUG]  [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    state.reinitializeBegin(previousT);	  	non-compiled	[CE]  cannot  find  symbol  state	95	None	add
342	[BUG]  [BUGGY]  resetOccurred  &=  false;  state.resetOccurred  &=  false;  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  state.resetOccurred  &=  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    state.resetOccurred  &=  false;	  	non-compiled	[CE]  cannot  find  symbol  state	95	None	add
343	[BUG]  [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  state	95	None	add
344	[BUG]  [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    state.reinitializeBegin(currentT);	  	non-compiled	[CE]  cannot  find  symbol  state	95	None	add
345	[BUG]  [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(previousT);  currentT  =  currentT;  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  state.reinitializeBegin(previousT);  currentT  =  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    state.reinitializeBegin(previousT);  currentT  =  currentT;	  	non-compiled	[CE]  cannot  find  symbol  state	95	None	add
346	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >=  previousT  -  1);	  Preconditions.checkState(previousT    >=    currentT    -    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	10	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >=  0;	  resetOccurred    &=    currentT    >    0;    	compilable	  [FE]  AssertionError  	120	1	replace
348	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >=  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >=  0;	  resetOccurred    &=    currentT    >    0;    	compilable	  [FE]  AssertionError  	120	1	replace
349	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  ==  0;	  resetOccurred    &=    currentT    >    0;    	compilable	  [FE]  AssertionError  	120	1	replace
350	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  ==  0;	  resetOccurred    &=    currentT    >    0;    	compilable	  [FE]  AssertionError  	120	1	replace
351	[BUG]  [BUGGY]  resetOccurred  &=  currentT  <  =  0;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  <  =  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  <  =  0;	  resetOccurred    &=    currentT    >    0;    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
353	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(previousT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;  if(previousT  >  currentT)  {  this.resetOccurred  =  true;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
355	[BUG]  [BUGGY]  this.resetOccurred  =  true;  if(previousT  >  currentT)  {  this.resetOccurred  =  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(previousT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  if(previousT  >  currentT)  {  this.resetOccurred  =  true;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
357	[BUG]  [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  true;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
358	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
359	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
360	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
361	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
363	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
364	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    >=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
365	[BUG]  [BUGGY]  resetOccurred  =  currentT  +  previousT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  +  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  +  previousT;	  resetOccurred    =    currentT    >=    previousT;    	non-compiled	[CE]  incompatible  types	93	None	replace
366	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  currentT  -  1);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(previousT,  currentT  -  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(previousT,  currentT  -  1);	  state.reinitializeBegin(previousT,    currentT);    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
367	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE);  [CE]  cannot  find  symbol  expandableODE  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expandableODE);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expandableODE);	  state.reinitializeBegin(eventT);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	68	None	replace
368	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT  -  1;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT  -  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT  -  1;	  resetOccurred    =    previousT    >>    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	1	None	replace
369	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  eventT);	  this.eventsStates.add(expT,    currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	107	None	replace
370	[BUG]  [BUGGY]  Iterator  iterator  =  eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  eventsStates.values().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  eventsStates.values().iterator();	  Iterator    iterator    =    this.eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
371	[BUG]  [BUGGY]  Iterator  iterator  =  events.values().iterator();  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  events.values().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  events.values().iterator();	  Iterator    iterator    =    this.eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  events	103	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >=  previousT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  >=  previousT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >=  previousT  +  1);	  Preconditions.checkState(previousT    >=    currentT    +    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	11	None	replace
373	[BUG]  [BUGGY]  this.eventsStates.add(previousT,  currentT,  interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(previousT,  currentT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(previousT,  currentT,  interpolator);	  this.eventsStates.add(previousT,    interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	57	None	replace
374	[BUG]  [BUGGY]  this.eventsStates.add(i,  previousT,  interpolator);  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(i,  previousT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(i,  previousT,  interpolator);	  this.eventsStates.add(previousT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  i	57	None	replace
375	[BUG]  [BUGGY]  resetOccurred  :  true;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  true;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
376	[BUG]  [BUGGY]  ResetOccurred  :  true;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  ResetOccurred  :  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	ResetOccurred  :  true;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  ==  currentT  +  1;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
378	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT  +  1;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT  -  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  ==  currentT  -  1;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
380	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT  -  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT  -  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT  -  1;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  ==  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
382	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
383	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  1;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  1;	  resetOccurred    =    currentT    ==    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	140	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >=  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
385	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
386	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  resetOccurred  &=  previousT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    &=    previousT    >    currentT;    resetOccurred  &=  previousT  >  currentT;	  	compilable	  [FE]  AssertionError  	60	1	add
387	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  resetOccurred  &=  previousT  >  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  resetOccurred  &=  previousT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    resetOccurred  &=  previousT  >  currentT;	  	compilable	  [FE]  AssertionError  	60	1	add
388	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  &=  previousT  >  currentT;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  &=  previousT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    &=  previousT  >  currentT;	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
389	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
390	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
391	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
392	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT    ==    0;    resetOccurred  =  previousT  ==  0;	  	compilable	  [FE]  AssertionError  	43	1	add
393	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  resetOccurred  =  previousT  ==  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    resetOccurred  =  previousT  ==  0;	  	compilable	  [FE]  AssertionError  	43	1	add
394	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
395	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    previousT    ==    0;    if(previousT  ==  0)resetOccurred  =  previousT  ==  0;	  	compilable	  [FE]  AssertionError  	43	1	add
396	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)resetOccurred  =  previousT  ==  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  ==  0)resetOccurred  =  previousT  ==  0;	  	compilable	  [FE]  AssertionError  	43	1	add
397	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  ==  0)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
398	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  tEnd;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
399	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  tEnd;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  tEnd;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  currentT  +  1;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
401	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT  +  1;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  tEnd);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  +  tEnd);	  Preconditions.checkState(previousT    ==    currentT    +    tEnd);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	110	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  t0  +  tEnd);  [CE]  cannot  find  symbol  t0  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  t0  +  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  t0  +  tEnd);	  Preconditions.checkState(previousT    ==    currentT    +    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	110	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  t0);  [CE]  cannot  find  symbol  t0  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  t0);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  +  t0);	  Preconditions.checkState(previousT    ==    currentT    +    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	110	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  this.resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT    >    0;    this.resetOccurred  =  currentT  >  0;	  	compilable	  [FE]  AssertionError  	137	1	add
406	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  this.resetOccurred  =  currentT  >  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  this.resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    this.resetOccurred  =  currentT  >  0;	  	compilable	  [FE]  AssertionError  	137	1	add
407	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  This.resetOccurred  =  currentT  >  0;  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  This.resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    This.resetOccurred  =  currentT  >  0;	  	non-compiled	[CE]  cannot  find  symbol  This	137	None	add
408	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }	  	compilable	  [FE]  AssertionError  	137	1	add
409	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }	  	compilable	  [FE]  AssertionError  	137	1	add
410	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  else  {  eventsStates.add(interpolator);  }  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  else  {  eventsStates.add(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  this.resetOccurred  =  currentT  >  0;  }  else  {  eventsStates.add(interpolator);  }	  	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	137	None	add
411	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
412	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
413	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
414	[BUG]  [BUGGY]  resetOccurred  =  currentT  {  0;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  {  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  {  0;	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    resetOccurred    =    currentT    ==    0;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
415	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();	  Iterator    <    EventState>    eventsStates    =    stepHandlers.iterator();    	non-compiled	[CE]  incompatible  types	94	None	replace
416	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers  ==  null?  null  :  stepHandlers.iterator();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers  ==  null?  null  :  stepHandlers.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  stepHandlers  ==  null?  null  :  stepHandlers.iterator();	  Iterator    <    EventState>    eventsStates    =    stepHandlers.iterator();    	non-compiled	[CE]  incompatible  types	94	None	replace
417	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	          Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	82	None	replace
418	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  iterator  =  currentT.iterator();	          Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	82	None	replace
419	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	          Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	82	None	replace
420	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  iterator  =  events.iterator();	          Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	82	None	replace
421	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
422	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
423	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
424	[BUG]  [BUGGY]  this.resetOccurred  =  true;  iterator.resetOccurred  =  false;  [CE]  cannot  find  symbol  iterator  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  iterator.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  iterator.resetOccurred  =  false;	  this.resetOccurred    =    false;    iterator.resetOccurred    =    false;    	non-compiled	[CE]  cannot  find  symbol  iterator	74	None	replace
425	[BUG]  [BUGGY]  this.resetOccurred  =  true;  currentT.resetOccurred  =  false;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  currentT.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  currentT.resetOccurred  =  false;	  this.resetOccurred    =    false;    iterator.resetOccurred    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
426	[BUG]  [BUGGY]  this.resetOccurred  =  true;  previousT.resetOccurred  =  false;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  previousT.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  previousT.resetOccurred  =  false;	  this.resetOccurred    =    false;    iterator.resetOccurred    =    false;    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
427	[BUG]  [BUGGY]  this.resetOccurred  =  true;  iterator.resetOccurred  =  true;  [CE]  cannot  find  symbol  iterator  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  iterator.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  iterator.resetOccurred  =  true;	  this.resetOccurred    =    false;    iterator.resetOccurred    =    false;    	non-compiled	[CE]  cannot  find  symbol  iterator	74	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(previousT!=  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT!=  currentT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT!=  currentT  +  1);	  Preconditions.checkState(previousT!=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	66	None	replace
429	[BUG]  [BUGGY]  currentT  =  currentT  ==  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  ==  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	31	None	replace
430	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  ==  currentT;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  currentT  ==  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  not  a  statement	31	None	replace
431	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  >=  currentT;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  currentT  >=  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  not  a  statement	31	None	replace
432	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  >>  currentT;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  currentT  >>  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  not  a  statement	31	None	replace
433	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
434	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
435	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
436	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
437	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
438	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
439	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
440	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >>  currentT;  resetOccurred  =  currentT  >=  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
442	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
443	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  ==  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  ==  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
444	[BUG]  [BUGGY]  if(previousT  ==  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  ==  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  ==  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
445	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT!=  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT!=  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
446	[BUG]  [BUGGY]  if(previousT!=  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT!=  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT!=  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
447	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  previousT,  interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  previousT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  previousT,  interpolator);	  this.eventsStates.add(currentT,    interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	56	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
449	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
450	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
451	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  >=  currentT;  resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
452	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  ResetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [CE]  cannot  find  symbol  ResetOccurred  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  ResetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    ResetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	non-compiled	[CE]  cannot  find  symbol  ResetOccurred	26	None	add
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
454	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
455	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	26	None	add
456	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  -  previousT);	  Preconditions.checkState(previousT    ==    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	77	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  ==  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
458	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  ==  0?  true  :  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  ==  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
459	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT!=  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT!=  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
460	[BUG]  [BUGGY]  this.resetOccurred  =  previousT!=  0?  true  :  false;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT!=  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT!=  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
461	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
462	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
463	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  -  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  -  currentT);	  Preconditions.checkState(previousT    ==    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	77	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  currentT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  -  currentT  +  1);	  Preconditions.checkState(previousT    ==    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	77	None	replace
466	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
467	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
468	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
469	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  currentT  -=  currentT  >  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  currentT  -=  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    currentT  -=  currentT  >  0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	119	None	add
470	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >  currentT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
471	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  currentT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
472	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
473	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
474	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  previousT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  previousT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT  >=  previousT;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
475	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  <  currentT;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
476	[BUG]  [BUGGY]  resetOccurred  =  previousT  <  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  <  currentT;	  resetOccurred    =    previousT    ==    currentT;    	compilable	  [FE]  AssertionError  	7	1	replace
477	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
478	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >=  currentT)  {  if(isLastStep)  {  resetOccurred  =  previousT  >=  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
479	[BUG]  [BUGGY]  resetOccurred  :  currentT  >  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  currentT  >  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  currentT  >  false;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
480	[BUG]  [BUGGY]  resetOccurred  :  currentT  >  0;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  currentT  >  0;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
481	[BUG]  [BUGGY]  resetOccurred  :  currentT  <  =  false;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  currentT  <  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  currentT  <  =  false;	  resetOccurred    :    false;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
482	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
483	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
484	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  t;  [CE]  cannot  find  symbol  t  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  t;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  t;	  resetOccurred    =    currentT    >    currentT;    	non-compiled	[CE]  cannot  find  symbol  t	91	None	replace
485	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
486	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  tStart  &=  currentT  >  tEnd;  [CE]  cannot  find  symbol  tStart  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  tStart  &=  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    tStart  &=  currentT  >  tEnd;	  	non-compiled	[CE]  cannot  find  symbol  tStart	117	None	add
487	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    if(previousT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
488	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
489	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
490	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
491	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  double  resetOccurred  =  previousT  ==  currentT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  double  resetOccurred  =  previousT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    double  resetOccurred  =  previousT  ==  currentT;	  	non-compiled	[CE]  incompatible  types	6	None	add
492	[BUG]  [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(interpolator);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  currentT.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  currentT.reinitializeBegin(interpolator);	  resetOccurred    =    true;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
493	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
494	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    if(previousT  ==  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
495	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
496	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    if(previousT  ==  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
497	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.values().iterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.values().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  stepHandlers.values().iterator();	  Iterator    <    EventState>    eventsStates    =    stepHandlers.iterator();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
498	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  steps.iterator();  [CE]  cannot  find  symbol  steps  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  steps.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  steps.iterator();	  Iterator    <    EventState>    eventsStates    =    stepHandlers.iterator();    	non-compiled	[CE]  cannot  find  symbol  steps	94	None	replace
499	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  t;  [CE]  cannot  find  symbol  t  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  t;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  t;	  resetOccurred    =    currentT    ==    currentT;    resetOccurred    =    currentT    ==    currentT;    	non-compiled	[CE]  cannot  find  symbol  t	27	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >  currentT  +  tEnd);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >  currentT  +  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >  currentT  +  tEnd);	  Preconditions.checkState(previousT    >    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	9	None	replace
501	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
502	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
503	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
504	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
505	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
506	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
507	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
508	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  1;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
509	[BUG]  [BUGGY]  state.resetOccurred  =  true;  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.resetOccurred  =  true;	  resetOccurred    =    true;    state.resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
510	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  interpolator,  tEnd);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  interpolator,  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  interpolator,  tEnd);	  this.eventsStates.add(currentT,    interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	56	None	replace
511	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  interpolator,  previousT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  interpolator,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  interpolator,  previousT);	  this.eventsStates.add(currentT,    interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	56	None	replace
512	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
513	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(currentT  >=  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
514	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(currentT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
515	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
516	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
517	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
518	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
519	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
520	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
521	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
522	[BUG]  [BUGGY]  resetOccurred  =  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
523	[BUG]  [BUGGY]  resetOccurred  =  false;  if(previousT  <  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  if(previousT  <  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  if(previousT  <  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
524	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	135	None	add
525	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    Iterator  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	135	None	add
526	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  Iterator  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    Iterator  iterator  =  this.events.iterator();	  	non-compiled	[CE]  cannot  find  symbol  events	135	None	add
527	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.enterator();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.enterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.enterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
528	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
529	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  <  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
531	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  1;	  resetOccurred    =    currentT    ==    1;    	compilable	  [FE]  AssertionError  	140	1	replace
532	[BUG]  [BUGGY]  Preconditions.checkNotNull(previousT,  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkNotNull(previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkNotNull(previousT,  currentT);	  Preconditions.checkNotNull(currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	64	None	replace
533	[BUG]  [BUGGY]  this.eventsStates.add(exprT,  previousT);  [CE]  cannot  find  symbol  exprT  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(exprT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(exprT,  previousT);	  this.eventsStates.add(interpolator,    previousT);    	non-compiled	[CE]  cannot  find  symbol  exprT	58	None	replace
534	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.values().iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  iterator  =  eventsStates.values().iterator();	          Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
535	[BUG]  [BUGGY]  state.reinitializeBegin(eventT,  previousT);  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(eventT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(eventT,  previousT);	  state.reinitializeBegin(currentT,    previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	98	None	replace
536	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
537	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;  if(currentT!=  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
538	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  yDot)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
539	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  >=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
540	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(previousT  <  tEnd)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
541	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(currentT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
542	[BUG]  [BUGGY]  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	70	1	replace
543	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
545	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	26	1	add
546	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(previousT!=  t)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(previousT!=  t)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    if(previousT!=  t)  {  if(!isLastStep)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
547	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(interpolator);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	29	None	replace
548	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(interpolator);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	29	None	replace
549	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	137	None	add
550	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    Iterator  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	137	None	add
551	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  Iterator  iterator  =  this.eventsStates.values().iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    Iterator  iterator  =  this.eventsStates.values().iterator();	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
552	[BUG]  [BUGGY]  this.eventsStates.add(expandableODE,  previousT,  interpolator);  [CE]  cannot  find  symbol  expandableODE  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(expandableODE,  previousT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(expandableODE,  previousT,  interpolator);	  this.eventsStates.add(previousT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	57	None	replace
553	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
554	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
555	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
556	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  tEnd)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
557	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
558	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
559	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  &=  previousT  >  currentT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  &=  previousT  >  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  &=  previousT  >  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
560	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
561	[BUG]  [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  0)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
562	[BUG]  [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
563	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
564	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
565	[BUG]  [BUGGY]  resetOccurred  =  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
566	[BUG]  [BUGGY]  resetOccurred  =  false;  if(previousT  <  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  if(previousT  <  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  if(previousT  <  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
567	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
568	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
569	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  t;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  t;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  t;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
570	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
571	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
572	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
573	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  t)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
574	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  currentT  ==  currentT;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  currentT  ==  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  not  a  statement	31	None	replace
575	[BUG]  [BUGGY]  currentT  =  currentT  ==  resetOccurred;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  ==  resetOccurred;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  ==  resetOccurred;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	31	None	replace
576	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  0;	  resetOccurred    =    currentT    ==    0;    double    resetOccurred    =    currentT    ==    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	123	None	replace
577	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  t;  [CE]  cannot  find  symbol  t  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  t;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  t;	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(isLastStep)    {    resetOccurred    =    currentT!=    currentT;    }    	non-compiled	[CE]  cannot  find  symbol  t	133	None	replace
578	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(currentT  ==  previousT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
579	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(currentT  ==  previousT)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
580	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  previousT)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(currentT  ==  previousT)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
581	[BUG]  [BUGGY]  resetOccurred  =  true;  currentT.reinitializeBegin(interpolator);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  true;  currentT.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  true;  currentT.reinitializeBegin(interpolator);	  resetOccurred    =    true;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
582	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
583	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  <  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
584	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
585	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
586	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE,  currentT);  [CE]  cannot  find  symbol  expandableODE  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expandableODE,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expandableODE,  currentT);	  state.reinitializeBegin(es0,    currentT);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	128	None	replace
587	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
588	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT  +  1;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT  +  1;  state.reinitializeBegin(previousT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT  +  1;  state.reinitializeBegin(previousT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  currentT  +  tEnd);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  currentT  +  tEnd);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  currentT  +  tEnd);	  Preconditions.checkState(previousT    ==    currentT    +    tEnd);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	110	None	replace
590	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	69	None	add
591	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    Iterator  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	69	None	add
592	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  <  E>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  Iterator  <  E>  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    Iterator  <  E>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
593	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
594	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
595	[BUG]  [BUGGY]  resetOccurred  &=  false;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	95	None	add
596	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
597	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
598	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  double  resetOccurred  =  previousT  ==  0;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  double  resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    double  resetOccurred  =  previousT  ==  0;	  	non-compiled	[CE]  incompatible  types	43	None	add
599	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  ==  0)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
600	[BUG]  [BUGGY]  this.resetOccurred  =  true;  This.resetOccurred  =  false;  [CE]  cannot  find  symbol  This  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  This.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  This.resetOccurred  =  false;	  this.resetOccurred    =    false;    This.resetOccurred    =    false;    	non-compiled	[CE]  cannot  find  symbol  This	72	None	replace
601	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;  this.resetOccurred  =  false;	  this.resetOccurred    =    false;    This.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	72	1	replace
602	[BUG]  [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  this.resetOccurred  =  false;	  this.resetOccurred    =    false;    This.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	72	1	replace
603	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  <  previousT;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
604	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  previousT;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
605	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >=  previousT  +  1;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
606	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT  +  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  previousT  +  1;	  resetOccurred    =    currentT    ==    previousT;    	compilable	  [FE]  AssertionError  	89	1	replace
607	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
608	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
609	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
610	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
611	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  previousT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
612	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  previousT;  state.reinitializeBegin(currentT);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  previousT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  previousT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	30	None	replace
613	[BUG]  [BUGGY]  Iterator  iterator  =  events.events.iterator();  [CE]  package  events  does  not  exist  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  events.events.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  events.events.iterator();	  Iterator    iterator    =    currentT.events.iterator();    	non-compiled	[CE]  package  events  does  not  exist	116	None	replace
614	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  double  resetOccurred  =  previousT  >=  0;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  double  resetOccurred  =  previousT  >=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    double  resetOccurred  =  previousT  >=  0;	  	non-compiled	[CE]  incompatible  types	47	None	add
615	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  currentT  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  currentT  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    currentT  =  currentT  >>  currentT;  resetOccurred  =  currentT  ==  currentT;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	19	None	add
616	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
617	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
618	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  >=  yDot)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  >=  yDot)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  >=  yDot)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
619	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  t;  if(currentT  ==  t)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
620	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
621	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  ==  yDot)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
622	[BUG]  [BUGGY]  currentT  =  currentT  >>  resetOccurred;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  >>  resetOccurred;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  >>  resetOccurred;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	21	None	replace
623	[BUG]  [BUGGY]  currentT  =  currentT  >>  resetOccurred;  currentT  >=  currentT;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT  >>  resetOccurred;  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT  >>  resetOccurred;  currentT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    currentT    >=    currentT;    	non-compiled	[CE]  not  a  statement	21	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
625	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
626	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
627	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
628	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  false;  resetOccurred  =  false;	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
629	[BUG]  [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  false;  resetOccurred  =  false;	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
630	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	129	None	add
631	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    Iterator  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	129	None	add
632	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	129	None	add
633	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  <  E>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  Iterator  <  E>  iterator  =  eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    Iterator  <  E>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
634	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
635	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
636	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(previousT    >=    t)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
637	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
638	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
639	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT!=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
640	[BUG]  [BUGGY]  resetOccurred  =  previousT  <  0;  if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  0;  if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  <  0;  if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
641	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >=  false;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >=  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >=  false;	  resetOccurred    &=    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	96	None	replace
642	[BUG]  [BUGGY]  State  state  =  currentT.resetOccurred(previousT);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  State  state  =  currentT.resetOccurred(previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	State  state  =  currentT.resetOccurred(previousT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
643	[BUG]  [BUGGY]  state.resetOccurred(currentT,  previousT);  [CE]  cannot  find  symbol  state  [FE]                        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.resetOccurred(currentT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.resetOccurred(currentT,  previousT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	33	None	replace
644	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  int  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  int  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    int  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;	  	non-compiled	[CE]  incompatible  types	35	None	add
645	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        0;        resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
646	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  currentT,  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(interpolator,  currentT,  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  currentT,  eventT);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	106	None	replace
647	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
648	[BUG]  [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  this.resetOccurred    =    false;    if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    	compilable	  [FE]  AssertionError  	130	1	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  >=  previousT  -  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >=  previousT  -  currentT);	  Preconditions.checkState(previousT    >=    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	111	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  currentT  +  1);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >=  currentT  -  currentT  +  1);	  Preconditions.checkState(previousT    >=    currentT    -    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	111	None	replace
651	[BUG]  [BUGGY]  Iterator  iterator  =  this.expT.iterator();  [CE]  cannot  find  symbol  expT  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  iterator  =  this.expT.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  this.expT.iterator();	  Iterator    iterator    =    currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  expT	13	None	replace
652	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
653	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
654	[BUG]  [BUGGY]  state.reinitializeBegin(interpolator,  currentT);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(interpolator,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(interpolator,  currentT);	  state.reinitializeBegin(previousT,    currentT);    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
655	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE,  previousT,  currentT);  [CE]  cannot  find  symbol  expandableODE  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expandableODE,  previousT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expandableODE,  previousT,  currentT);	  state.reinitializeBegin(previousT,    currentT);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	34	None	replace
656	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  t1;  [CE]  cannot  find  symbol  t1  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  t1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  t1;	  resetOccurred    &=    currentT    >    tEnd;    	non-compiled	[CE]  cannot  find  symbol  t1	118	None	replace
657	[BUG]  [BUGGY]  resetOccurred  &=  currentT  <  =  tEnd;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  <  =  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  <  =  tEnd;	  resetOccurred    &=    currentT    >    tEnd;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  false  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  ==  0?  false  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
659	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  false  :  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  false  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  ==  0?  false  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
660	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  >  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
661	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0?  true  :  false;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  >  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
662	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE,  previousT,  interpolator);  [CE]  cannot  find  symbol  expandableODE  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expandableODE,  previousT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expandableODE,  previousT,  interpolator);	  state.reinitializeBegin(previousT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	32	None	replace
663	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    if(previousT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
664	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    if(previousT!=  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
665	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
666	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
667	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  1;  if(previousT  >=  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
668	[BUG]  [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  0)  {  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
669	[BUG]  [BUGGY]  if(currentT  >  0)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  0)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  0)  {  if(!isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
670	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.eventsStates.iterator();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.eventsStates.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  currentT.eventsStates.iterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
671	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.entrySet().iterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.entrySet().iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.entrySet().iterator();	  Iterator    <    EventState>    eventsStates    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
672	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(currentT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(currentT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    if(currentT  >  tEnd)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
673	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  if(previousT  >  tEnd)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    tEnd;    if(previousT  >  tEnd)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
674	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(currentT  >=  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
675	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    0;    if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
676	[BUG]  [BUGGY]  this.resetOccurred  =  true;  Iterator.resetOccurred  =  false;  [CE]  cannot  find  symbol  resetOccurred  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  true;  Iterator.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;  Iterator.resetOccurred  =  false;	  this.resetOccurred    =    false;    This.resetOccurred    =    false;    	non-compiled	[CE]  cannot  find  symbol  resetOccurred	72	None	replace
677	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
678	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
679	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  System.arraycopy(currentT,  previousT,  currentT,  currentT,  currentT);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  System.arraycopy(currentT,  previousT,  currentT,  currentT,  currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  System.arraycopy(currentT,  previousT,  currentT,  currentT,  currentT);  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	70	None	replace
680	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  return  currentT;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	timeout	70	1	replace
681	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  return  currentT;  }  timeout  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(previousT  >  currentT)  {  this.resetOccurred  =  false;  this.resetOccurred  =  false;  }  else  {  return  currentT;  }	  this.resetOccurred    =    false;    this.resetOccurred    =    false;    	compilable	timeout	70	1	replace
682	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  double  resetOccurred  =  true;  resetOccurred  =  true;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  double  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    double  resetOccurred  =  true;  resetOccurred  =  true;	  	non-compiled	[CE]  incompatible  types	50	None	add
683	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  double  resetOccurred  =  true;  resetOccurred  =  true;  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  if(previousT  >  currentT)  {  double  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    if(previousT  >  currentT)  {  double  resetOccurred  =  true;  resetOccurred  =  true;  }	  	non-compiled	[CE]  incompatible  types	50	None	add
684	[BUG]  [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  int  resetOccurred  =  true;  resetOccurred  =  true;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    true;    resetOccurred  =  true;  int  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        true;        resetOccurred    =    true;    int  resetOccurred  =  true;  resetOccurred  =  true;	  	non-compiled	[CE]  incompatible  types	50	None	add
685	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
686	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
687	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
688	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
689	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  >  0;  Iterator  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >  0;  Iterator  iterator  =  this.events.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  >  0;  Iterator  iterator  =  this.events.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	101	None	replace
690	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(currentT  >  0)  {  for(EventState  event  :  eventsStates)  {  state.reinitializeBegin(event);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
691	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  eventState.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT  >  0;  if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  eventState.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    currentT    >    0;    if(currentT  >  0)  {  for(EventState  state  :  eventsStates)  {  eventState.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
692	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  [Delete]  0;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  this.resetOccurred  =  currentT  [Delete]  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    this.resetOccurred  =  currentT  [Delete]  0;	  	non-compiled	[CE]  ';'  expected	104	None	add
693	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  This.resetOccurred  =  currentT!=  0;  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT!=  0;  This.resetOccurred  =  currentT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT!=    0;    This.resetOccurred  =  currentT!=  0;	  	non-compiled	[CE]  cannot  find  symbol  This	104	None	add
694	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  t0);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  previousT  +  t0);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT  +  t0);	  Preconditions.checkState(previousT    ==    currentT    +    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	110	None	replace
695	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
696	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
697	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE,  previousT);  [CE]  cannot  find  symbol  expandableODE  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(expandableODE,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(expandableODE,  previousT);	  state.reinitializeBegin(es0,    previousT);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	121	None	replace
698	[BUG]  [BUGGY]  state.reinitializeBegin(exprT,  previousT);  [CE]  cannot  find  symbol  exprT  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(exprT,  previousT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(exprT,  previousT);	  state.reinitializeBegin(es0,    previousT);    	non-compiled	[CE]  cannot  find  symbol  exprT	121	None	replace
699	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
700	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(expandableODE);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(expandableODE);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(expandableODE);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
701	[BUG]  [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT,  eventT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  false;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT,  eventT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    false;    if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT,  eventT);  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
702	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  currentT,  currentT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(interpolator,  currentT,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  currentT,  currentT);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	106	None	replace
703	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  currentT,  currentY);  [CE]  cannot  find  symbol  currentY  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(interpolator,  currentT,  currentY);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  currentT,  currentY);	  this.eventsStates.add(interpolator,    currentT);    	non-compiled	[CE]  cannot  find  symbol  currentY	106	None	replace
704	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT  ==  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  eventT);	  Preconditions.checkState(currentT    ==    previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	67	None	replace
705	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  iterator.resetOccurred  =  currentT  >  0;  [CE]  cannot  find  symbol  iterator  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  >  0;  iterator.resetOccurred  =  currentT  >  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    >    0;    iterator.resetOccurred  =  currentT  >  0;	  	non-compiled	[CE]  cannot  find  symbol  iterator	137	None	add
706	[BUG]  [BUGGY]  this.resetOccurred  =  false;  iterator.resetOccurred  =  true;  [CE]  cannot  find  symbol  iterator  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  false;  iterator.resetOccurred  =  true;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  false;  iterator.resetOccurred  =  true;	  this.resetOccurred    =    false;    iterator.resetOccurred    =    false;    	non-compiled	[CE]  cannot  find  symbol  iterator	74	None	replace
707	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  int  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  int  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    int  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;	  	non-compiled	[CE]  incompatible  types	26	None	add
708	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }	  	compilable	  [FE]  AssertionError  	26	1	add
709	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }	  	compilable	  [FE]  AssertionError  	26	1	add
710	[BUG]  [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  else  {  eventsInitialized  =  true;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;  if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  else  {  eventsInitialized  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT        ==        currentT;        resetOccurred    =    currentT    ==    currentT;    if(currentT  >  0)  {  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  }  else  {  eventsInitialized  =  true;  }	  	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	26	None	add
711	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
712	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
713	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
714	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
715	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT!=    currentT;    if(currentT!=    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
716	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  resetOccurred  =  currentT  >=  previousT;  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  resetOccurred  =  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    double  previousT  =  interpolator.getPreviousTime();  resetOccurred  =  currentT  >=  previousT;	  	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	92	None	add
717	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    double  previousT  =  interpolator.getPreviousTime();	  	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	92	None	add
718	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  currentT  =  interpolator.getGlobalCurrentTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime();  currentT  =  interpolator.getGlobalCurrentTime();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    double  previousT  =  interpolator.getPreviousTime();  currentT  =  interpolator.getGlobalCurrentTime();	  	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	92	None	add
719	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime()  -  currentT;  resetOccurred  =  currentT  >=  previousT;  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >=  previousT;  double  previousT  =  interpolator.getPreviousTime()  -  currentT;  resetOccurred  =  currentT  >=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >=    previousT;    double  previousT  =  interpolator.getPreviousTime()  -  currentT;  resetOccurred  =  currentT  >=  previousT;	  	non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	92	None	add
720	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT!=  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(previousT    ==    currentT)    {    if(!isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
721	[BUG]  [BUGGY]  double  resetOccurred  =  previousT  ==  0;  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  double  resetOccurred  =  previousT  ==  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	double  resetOccurred  =  previousT  ==  0;	  resetOccurred    =    currentT    ==    0;    double    resetOccurred    =    currentT    ==    0;    	non-compiled	[CE]  incompatible  types	123	None	replace
722	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
723	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	14	1	add
724	[BUG]  [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred        =        currentT!=        currentT;        resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
725	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT!=  previousT;	  resetOccurred    =    previousT    >>    currentT;    	compilable	  [FE]  AssertionError  	1	1	replace
726	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  previousT;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT!=  previousT;	  resetOccurred    =    previousT    >>    currentT;    	compilable	  [FE]  AssertionError  	1	1	replace
727	[BUG]  [BUGGY]  resetOccurred  =  previousT  <  =  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  <  =  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  <  =  0;	  resetOccurred    =    previousT    >=    0;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
728	[BUG]  [BUGGY]  state.reinitializeAfter(currentT,  interpolator);  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeAfter(currentT,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeAfter(currentT,  interpolator);	  state.reinitializeBegin(previousT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	32	None	replace
729	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
730	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  currentT  -  1;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    return    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(currentT!=  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT!=  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT!=  eventT);	  Preconditions.checkState(currentT!=    previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	65	None	replace
732	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
733	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  >  0)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
734	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    0;    if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
735	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(previousT);    }    	non-compiled	[CE]  cannot  find  symbol  state	80	None	replace
736	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
737	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  previousT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
738	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  previousT;  if(currentT  >  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(isLastStep)    {    throw    new    MathIllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
739	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
740	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  currentT  >  currentT;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  currentT  >  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    currentT;    currentT  >  currentT;	  	non-compiled	[CE]  not  a  statement	90	None	add
741	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
742	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  1)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(currentT  <  1)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(currentT  <  1)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
743	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
744	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(currentT  >=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
745	[BUG]  [BUGGY]  resetOccurred  &=  currentT!=  false;  [CE]  incomparable  types:  double  and  boolean  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT!=  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT!=  false;	  resetOccurred    &=    false;    	non-compiled	[CE]  incomparable  types:  double  and  boolean	96	None	replace
746	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
747	[BUG]  [BUGGY]  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(!isLastStep)  {  resetOccurred  =  true;  resetOccurred  =  true;  }	  resetOccurred    =    true;    resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	51	1	replace
748	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  currentY,  interpolator);  [CE]  cannot  find  symbol  currentY  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.eventsStates.add(currentT,  currentY,  interpolator);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  currentY,  interpolator);	  this.eventsStates.add(currentT,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  currentY	56	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(previousT!=  currentT  &&  currentT!=  eventT);  [CE]  cannot  find  symbol  eventT  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT!=  currentT  &&  currentT!=  eventT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT!=  currentT  &&  currentT!=  eventT);	  Preconditions.checkState(previousT!=    currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	66	None	replace
750	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
751	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(previousT  >  currentT)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
752	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
753	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  double  resetOccurred  =  currentT  ==  previousT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  double  resetOccurred  =  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    double  resetOccurred  =  currentT  ==  previousT;	  	non-compiled	[CE]  incompatible  types	88	None	add
754	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  lastCheckInterval  =  currentT  ==  previousT;  [CE]  cannot  find  symbol  lastCheckInterval  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  lastCheckInterval  =  currentT  ==  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    lastCheckInterval  =  currentT  ==  previousT;	  	non-compiled	[CE]  cannot  find  symbol  lastCheckInterval	88	None	add
755	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    previousT;    if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
756	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
757	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT!=  0;	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    resetOccurred    =    currentT    ==    0;    }    	compilable	  [FE]  AssertionError  	37	1	replace
758	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  0;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  0;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT!=  0;	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(isLastStep)    {    resetOccurred    =    currentT    ==    0;    }    	compilable	  [FE]  AssertionError  	37	1	replace
759	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  currentT;  state.reinitializeBegin(interpolator);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT;  state.reinitializeBegin(interpolator);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	29	None	replace
760	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
761	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  <  tEnd)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  currentT;  if(currentT  <  tEnd)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;  if(currentT  <  tEnd)  {  if(!isLastStep)  {  return  false;  }	  resetOccurred    =    currentT    ==    currentT;    if(currentT    ==    currentT)    {    if(!isLastStep)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
762	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  currentY);  [CE]  cannot  find  symbol  currentY  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  state.reinitializeBegin(currentT,  currentY);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  currentY);	  state.reinitializeBegin(currentT,    previousT);    	non-compiled	[CE]  cannot  find  symbol  currentY	98	None	replace
763	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.events.iterator();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.events.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  currentT.events.iterator();	  Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
764	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();  [CE]  cannot  find  symbol  eventsList  [FE]                    AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();	  Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsList	24	None	replace
765	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(currentT);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
766	[BUG]  [BUGGY]  State  state  =  currentT.resetOccurred(currentT);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  State  state  =  currentT.resetOccurred(currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	State  state  =  currentT.resetOccurred(currentT);	  state.resetOccurred(previousT);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
767	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(currentT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(currentT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }	  	compilable	  [FE]  AssertionError  	135	1	add
768	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(currentT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  if(currentT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    currentT    ==    0?    true    :    false;    if(currentT  ==  0?  true  :  false)  {  this.resetOccurred  =  currentT  ==  0?  true  :  false;  }	  	compilable	  [FE]  AssertionError  	135	1	add
769	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  1,  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  1,  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  -  1,  currentT);	  Preconditions.checkState(previousT    ==    currentT    -    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	76	None	replace
770	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  currentT  >=  currentT;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  previousT;  currentT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;  currentT  >=  currentT;	  resetOccurred    =    currentT    ==    currentT;    currentT    ==    currentT;    	non-compiled	[CE]  not  a  statement	31	None	replace
771	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
772	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(eventsStates.contains(currentT))  {  eventsStates.add(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  previousT  >  currentT;  if(previousT  >  currentT)  {  if(eventsStates.contains(currentT))  {  eventsStates.add(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    &=    previousT    >    currentT;    if(previousT  >  currentT)  {  if(eventsStates.contains(currentT))  {  eventsStates.add(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
773	[BUG]  [BUGGY]  resetOccurred  :  currentT  >  tEnd;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  currentT  >  tEnd;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  currentT  >  tEnd;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
774	[BUG]  [BUGGY]  resetOccurred  :  currentT  >  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  :  currentT  >  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  currentT  >  1;	  resetOccurred    :    false;    	non-compiled	[CE]  not  a  statement	97	None	replace
775	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
776	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(currentT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
777	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  >  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
778	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  >  0?  true  :  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  >  0?  true  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  >  0?  true  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
779	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0?  false  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  previousT  ==  0?  false  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
780	[BUG]  [BUGGY]  this.resetOccurred  =  previousT  ==  0?  false  :  false;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred  =  previousT  ==  0?  false  :  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  previousT  ==  0?  false  :  false;	  this.resetOccurred    =    currentT    ==    0?    true    :    false;    	compilable	  [FE]  AssertionError  	136	1	replace
781	[BUG]  [BUGGY]  This.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  cannot  find  symbol  This  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  This.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	This.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();	  this.resetOccurred    =    false;    Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  This	71	None	replace
782	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(!isLastStep)  {  resetOccurred  =  true;  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
783	[BUG]  [BUGGY]  this.expandableEvents.add(interpolator.getExpression(),  currentT);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.expandableEvents.add(interpolator.getExpression(),  currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.expandableEvents.add(interpolator.getExpression(),  currentT);	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    resetOccurred    =    true;    }    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
784	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  true;  this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	69	1	add
785	[BUG]  [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    this.resetOccurred  =  false;  this.resetOccurred  =  true;  this.resetOccurred  =  false;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        this.resetOccurred    =    false;    this.resetOccurred  =  true;  this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	69	1	add
786	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  double  resetOccurred  =  previousT  >=  currentT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  double  resetOccurred  =  previousT  >=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    double  resetOccurred  =  previousT  >=  currentT;	  	non-compiled	[CE]  incompatible  types	2	None	add
787	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
788	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >  currentT)  {  for(EventState  eventT  :  eventsStates)  {  state.reinitializeBegin(eventT);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
789	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  currentT;  if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    currentT;    if(previousT  >  currentT)  {  if(!isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
790	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
791	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  if(!resetOccurred)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  if(currentT  >  tEnd)  {  if(!resetOccurred)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	if(currentT  >  tEnd)  {  if(!resetOccurred)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    true;    if(previousT    >    currentT)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
792	[BUG]  [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred        =        false;        if(currentT    >    currentT)    {    this.resetOccurred    =    false;    }    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
793	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT!=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT!=  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
794	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT!=    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
795	[BUG]  [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  <  =  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    return    currentT;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
796	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >=  0;  if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT    >=    0;    if(previousT  >=  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
797	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  double  resetOccurred  =  previousT!=  currentT;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  double  resetOccurred  =  previousT!=  currentT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    double  resetOccurred  =  previousT!=  currentT;	  	non-compiled	[CE]  incompatible  types	4	None	add
798	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT!=  currentT;  if(previousT!=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    previousT!=    currentT;    if(previousT!=  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
799	[BUG]  [BUGGY]  Preconditions.checkState(currentT!=  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  Preconditions.checkState(currentT!=  currentT);  [BUGGY]      resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT!=  currentT);	  Preconditions.checkNotNull(currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	64	None	replace
800	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExpandableEvents());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExpandableEvents());  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    this.expandableEvents.add(interpolator.getExpandableEvents());	  	non-compiled	[CE]  cannot  find  symbol	139	None	add
801	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExpression(),  currentT);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExpression(),  currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    this.expandableEvents.add(interpolator.getExpression(),  currentT);	  	non-compiled	[CE]  cannot  find  symbol	139	None	add
802	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  currentT  =  currentT  ==  1;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  currentT  =  currentT  ==  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    currentT  =  currentT  ==  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	139	None	add
803	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExecutableEvents());  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  1;  this.expandableEvents.add(interpolator.getExecutableEvents());  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    1;    this.expandableEvents.add(interpolator.getExecutableEvents());	  	non-compiled	[CE]  cannot  find  symbol	139	None	add
804	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT!=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT!=  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
805	[BUG]  [BUGGY]  resetOccurred  &=  currentT!=  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  &=  currentT!=  previousT;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT!=  previousT;	  resetOccurred    &=    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	63	1	replace
806	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  0;  if(previousT  <  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  resetOccurred    =    currentT    ==    0;    if(previousT    ==    0)    {    if(!isLastStep)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
807	[BUG]  [BUGGY]  currentT  =  currentT;  state.reinitializeBegin(currentT);  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]              AssertionError      [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  currentT  =  currentT;  state.reinitializeBegin(currentT);  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	currentT  =  currentT;  state.reinitializeBegin(currentT);	  resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	30	None	replace
808	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
809	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(currentT  >  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(currentT  >  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
810	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(currentT  >  0)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
811	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  currentT  >  0;  if(previousT  >  0)  {  if(currentT  >  0)  {  return  currentT;  }  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    >    0;    if(previousT  >  0)  {  if(currentT  >  0)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
812	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  currentT  -  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >  currentT  -  1;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
813	[BUG]  [BUGGY]  resetOccurred  =  previousT  >  currentT  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();      [BUGGY]  resetOccurred  =  previousT  >  currentT  -  1;  [BUGGY]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >  currentT  -  1;	  resetOccurred    =    currentT    >    currentT;    	compilable	  [FE]  AssertionError  	91	1	replace
