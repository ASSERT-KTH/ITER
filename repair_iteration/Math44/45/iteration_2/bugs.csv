bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator);  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  interpolator);	  occuringEvents.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
2	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  state);  [CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,EventState)  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(interpolator,  state);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  state);	  occuringEvents.add(interpolator);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,EventState)	2	None	replace
3	[BUG]  [BUGGY]  occuringEvents.add(state,  interpolator);  [CE]  no  suitable  method  found  for  add(EventState,AbstractStepInterpolator)  [FE]              AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(state,  interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(state,  interpolator);	  occuringEvents.add(interpolator);    	non-compiled	[CE]  no  suitable  method  found  for  add(EventState,AbstractStepInterpolator)	2	None	replace
4	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  y);  [CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[])  [FE]                AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(interpolator,  y);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  y);	  occuringEvents.add(interpolator);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[])	2	None	replace
5	[BUG]  [BUGGY]  tate.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  tate.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	tate.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
10	[BUG]  [BUGGY]  degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
12	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [CE]  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	17	1	add
14	[BUG]  [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	17	1	add
15	[BUG]  [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  If(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  If(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    If(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  	17	None	add
16	[BUG]  [BUGGY]  State  state  =  interpolator.evaluateStep(state);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  State  state  =  interpolator.evaluateStep(state);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interpolator.evaluateStep(state);	      State    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(state);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  State  state  =  interfaces.evaluateStep(state);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interfaces.evaluateStep(state);	      State    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
18	[BUG]  [BUGGY]  State  state  =  es0.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  State  state  =  es0.evaluateStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  es0.evaluateStep(interpolator);	      State    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
19	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
20	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
21	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
22	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	10	1	add
23	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	16	1	replace
24	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	16	1	replace
25	[BUG]  [BUGGY]  state.evaluate(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluate(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(interpolator))  {  return  0;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  ';'  expected	16	None	replace
26	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	16	1	replace
27	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  timeout  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	16	1	replace
28	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
29	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
30	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  '('  expected	19	None	replace
31	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
32	[BUG]  [BUGGY]  state.evaluateStep(eventsInitialized);  [CE]  cannot  find  symbol  eventsInitialized  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(eventsInitialized);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(eventsInitialized);	      state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	7	None	replace
33	[BUG]  [BUGGY]  state.evaluateStep(resetOccurred);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(resetOccurred);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(resetOccurred);	      state.evaluateStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	7	None	replace
34	[BUG]  [BUGGY]  state.evaluateStep(eventsInitialized,  interpolator);  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(eventsInitialized,  interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(eventsInitialized,  interpolator);	      state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	7	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	6	1	add
36	[BUG]  [BUGGY]      state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	6	1	add
37	[BUG]  [BUGGY]      state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  [CE]  cannot  find  symbol  State  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        state.evaluateStep(interpolator);    State.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  State	6	None	add
38	[BUG]  [BUGGY]      state.evaluateStep(interpolator);  State  state.evaluateStep(interpolator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      state.evaluateStep(interpolator);  State  state.evaluateStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        state.evaluateStep(interpolator);    State  state.evaluateStep(interpolator);	  	non-compiled	[CE]  ';'  expected	6	None	add
39	[BUG]  [BUGGY]      state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        state.evaluateStep(interpolator);    State  state  =  getStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
40	[BUG]  [BUGGY]  occuringEvents.add(expandable);  [CE]  no  suitable  method  found  for  add(ExpandableStatefulODE)  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(expandable);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(expandable);	  occuringEvents.add(expandableODE);    	non-compiled	[CE]  no  suitable  method  found  for  add(ExpandableStatefulODE)	14	None	replace
41	[BUG]  [BUGGY]  occuringEvents.add(eventSign);  [CE]  cannot  find  symbol  eventSign  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(eventSign);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventSign);	  occuringEvents.add(currentEvent);    	non-compiled	[CE]  cannot  find  symbol  eventSign	3	None	replace
42	[BUG]  [BUGGY]  return  orderSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  orderSign  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  return  orderSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	      	non-compiled	[CE]  cannot  find  symbol  orderSign	5	None	replace
43	[BUG]  [BUGGY]  this.stepHandlers.add(interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  this.stepHandlers.add(interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(interpolator);	      	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	5	None	replace
44	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	15	1	add
45	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	15	1	add
46	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  If(state.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  If(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	non-compiled	[CE]  ';'  expected	15	None	add
47	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
48	[BUG]  [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  interpolator.evaluateStep(state);	      int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
49	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);	      int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	8	None	replace
50	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
51	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
52	[BUG]  [BUGGY]  While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
53	[BUG]  [BUGGY]  degreesInitialized.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  degreesInitialized.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
54	[BUG]  [BUGGY]  While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
55	[BUG]  [BUGGY]  While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	17	1	add
57	[BUG]  [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	17	1	add
58	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  orderSign  *  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  orderSign  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  orderSign  *  state.evaluateStep(interpolator);  }  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))  {  return  orderSign  *  state.evaluateStep(interpolator);  }	  	non-compiled	[CE]  cannot  find  symbol  orderSign	4	None	add
59	[BUG]  [BUGGY]      return  orderSign  *  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  orderSign  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      return  orderSign  *  state.evaluateStep(interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        return  orderSign  *  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  orderSign	4	None	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(!state.evaluateStep(interpolator))  {  return  0;  }	  	compilable	  [FE]  AssertionError  	4	1	add
61	[BUG]  [BUGGY]      if(!state.evaluateStep(interpolator))  {  return  0;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(!state.evaluateStep(interpolator))  {  return  0;  }	  	compilable	  [FE]  AssertionError  	4	1	add
62	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(state);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  State  state  =  interface.evaluateStep(state);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interface.evaluateStep(state);	      State    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  occuringEvents.add(eventSign,  interpolator);  [CE]  cannot  find  symbol  eventSign  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(eventSign,  interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventSign,  interpolator);	  occuringEvents.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	2	None	replace
64	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderSign);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderSign);	      int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  orderSign	8	None	replace
65	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  tEnd);	      int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	8	None	replace
66	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
67	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
68	[BUG]  [BUGGY]  state.evaluateStep(expansion);  [CE]  cannot  find  symbol  expansion  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(expansion);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(expansion);	      state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expansion	7	None	replace
69	[BUG]  [BUGGY]  luateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  luateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  luateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  luateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
72	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]          IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  safely(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
74	[BUG]  [BUGGY]  safely(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
75	[BUG]  [BUGGY]  luateStep(interpolator))  {  return  0;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  luateStep(interpolator))  {  return  0;  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator))  {  return  0;	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  ';'  expected	16	None	replace
76	[BUG]  [BUGGY]  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator))  {  return  0;  }	      if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  ';'  expected	16	None	replace
77	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  ==  return  0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  ==  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  ==  return  0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
78	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
79	[BUG]  [BUGGY]  luateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  luateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  luateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  luateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
81	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  safely(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
82	[BUG]  [BUGGY]  State  state  =  eventsStates.get(i);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  State  state  =  eventsStates.get(i);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(i);	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
83	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  final  EventState  state  =  eventsStates.get(i);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i);	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	19	None	replace
84	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(inter  >>  ')')  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(inter  >>  ')')  {  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(inter  >>  ')')  {	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  ')'  expected	19	None	replace
85	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(inter  >>  ')')  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(inter  >>  ')')  {  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(inter  >>  ')')  {	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  ')'  expected	19	None	replace
86	[BUG]  [BUGGY]      return  orderSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  cannot  find  symbol  orderSign  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      return  orderSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        return  orderSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());	  	non-compiled	[CE]  cannot  find  symbol  orderSign	4	None	add
87	[BUG]  [BUGGY]      return  orderSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  orderSign  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      return  orderSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        return  orderSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  orderSign	4	None	add
88	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  allowState(state.evaluateStep(interpolator));  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator));	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
89	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  [Delete]  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	[Delete]	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
90	[BUG]  [BUGGY]  aughtException( " ");  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  aughtException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtException( " ");	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
91	[BUG]  [BUGGY]  allowState(state.evaluate(y,  es1));  [CE]  cannot  find  symbol  es1  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  allowState(state.evaluate(y,  es1));  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  es1));	      if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  es1	18	None	replace
92	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(inter  >>  ')')  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(inter  >>  ')')  {  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(inter  >>  ')')  {	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  ')'  expected	19	None	replace
93	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(inter  >>  ')')  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(inter  >>  ')')  {  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(inter  >>  ')')  {	      if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    	non-compiled	[CE]  ')'  expected	19	None	replace
94	[BUG]  [BUGGY]  aughtExceptionHandler(throwable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  aughtExceptionHandler(throwable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(throwable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
95	[BUG]  [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
96	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
97	[BUG]  [BUGGY]  occuringEvents.add(es1);  [CE]  cannot  find  symbol  es1  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(es1);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(es1);	  occuringEvents.add(event);    	non-compiled	[CE]  cannot  find  symbol  es1	1	None	replace
98	[BUG]  [BUGGY]  occuringEvents.add(es0);  [CE]  cannot  find  symbol  es0  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  occuringEvents.add(es0);  [BUGGY]    }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(es0);	  occuringEvents.add(event);    	non-compiled	[CE]  cannot  find  symbol  es0	1	None	replace
99	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  yDot);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  state.evaluateStep(interpolator,  yDot);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  yDot);	      state.evaluateStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	7	None	replace
100	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize);  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  stepSize);	      int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	8	None	replace
101	[BUG]  [BUGGY]  allowStateChanged();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  allowStateChanged();  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateChanged();	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
102	[BUG]  [BUGGY]  allowState();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]  allowState();  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState();	      if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
103	[BUG]  [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  <  return  0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {      [BUGGY]      if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  <  return  0;  }  [BUGGY]    occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  <  return  0;  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	15	None	add
