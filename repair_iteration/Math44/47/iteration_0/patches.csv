bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(!occurrences.isEmpty())  {  [CE]  cannot  find  symbol  occurrences  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!occurrences.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!occurrences.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol  occurrences	93	None	replace
2	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]      AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!eventsStates.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!eventsStates.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	compilable	  [FE]  NoSuchElementException  	93	1	replace
3	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  [FE]  NoSuchElementException  [FE]      AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!eventsStates.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	compilable	  [FE]  NoSuchElementException  	93	1	replace
4	[BUG]  [BUGGY]  while(!isLastStep  &&!occurrences.isEmpty())  {  [CE]  cannot  find  symbol  occurrences  [FE]        AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!isLastStep  &&!occurrences.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!occurrences.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol  occurrences	93	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	  	while  (!occuringEvents.isEmpty())  {  	non-compiled	[CE]  <identifier>  expected	93	None	replace
6	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
7	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
8	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
9	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
10	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
11	[BUG]  [BUGGY]  while(!occurrencesStates.isEmpty())  {  [CE]  cannot  find  symbol  occurrencesStates  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!occurrencesStates.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!occurrencesStates.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol  occurrencesStates	93	None	replace
12	[BUG]  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
13	[BUG]  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
14	[BUG]  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
15	[BUG]  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
16	[BUG]  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    if(!occuringEvents.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
17	[BUG]  [BUGGY]  while(!existingEvents.isEmpty())  {  [CE]  cannot  find  symbol  existingEvents  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]  while(!existingEvents.isEmpty())  {  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!existingEvents.isEmpty())  {	while  (!occuringEvents.isEmpty())  {  	non-compiled	[CE]  cannot  find  symbol  existingEvents	93	None	replace
18	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
19	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
20	[BUG]  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	94	None	add
