bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
2	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	47	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.entrySet())  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.entrySet())  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.entrySet())  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
4	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateMethod(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateMethod(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateMethod(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	42	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
10	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(state))  {  [CE]  cannot  find  symbol  state  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(state))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(state))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
11	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(events))  {  [CE]  cannot  find  symbol  events  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(events))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  interpolator.evaluateStep(events))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  events	3	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	13	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  currentEvent  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvent	13	None	replace
14	[BUG]  [BUGGY]  final  EventState  state  =  this.eventsStates.get(ignoredSign);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  this.eventsStates.get(ignoredSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  this.eventsStates.get(ignoredSign);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
15	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(state);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(state);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(state);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
16	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign  +  1);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(ignoredSign  +  1);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
17	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
18	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	94	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	94	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
21	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
22	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.remove(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
23	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(islastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]          NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(islastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(islastStep  ||  isLastStep)  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
24	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurred.add(state);  }  [CE]  illegal  start  of  expression  [FE]            NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurred.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurred.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
25	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	25	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	14	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  currentEvent  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentEvent))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvent	14	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	14	None	replace
29	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
30	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
31	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
32	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  <identifier>  expected  [FE]          NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  <identifier>  expected	24	None	add
33	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  <identifier>  expected  [FE]            NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  <identifier>  expected	24	None	add
34	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
35	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	41	None	replace
36	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
37	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	67	None	replace
38	[BUG]  [BUGGY]  while(!events.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  events  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!events.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!events.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty()    ||    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  events	53	None	replace
39	[BUG]  [BUGGY]  while(!eventsState.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  eventsState  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsState.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsState.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty()    ||    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  eventsState	53	None	replace
40	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	40	None	replace
41	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	40	None	replace
42	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	40	None	replace
43	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	34	None	replace
45	[BUG]  [BUGGY]  final  EventState[]  events  =  state.getAllEvents();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState[]  events  =  state.getAllEvents();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState[]  events  =  state.getAllEvents();	  final    EventState[]    events    =    state.getEvents();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
46	[BUG]  [BUGGY]  final  EventState[]  events  =  state.getOccurredEvents();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState[]  events  =  state.getOccurredEvents();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState[]  events  =  state.getOccurredEvents();	  final    EventState[]    events    =    state.getEvents();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
47	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
48	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	7	None	replace
49	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
50	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
51	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateAndClearStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	20	None	replace
52	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  while(!eventsStates.isEmpty()  &&  isLastStep)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  while(!eventsStates.isEmpty()  &&  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    while(!eventsStates.isEmpty()  &&  isLastStep)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
53	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
54	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  iterator  :  eventsStates)  {  if(!eventsStates.isEmpty()  &&  isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  iterator  :  eventsStates)  {  if(!eventsStates.isEmpty()  &&  isLastStep)  {  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    for(final  EventState  <  EventState>  iterator  :  eventsStates)  {  if(!eventsStates.isEmpty()  &&  isLastStep)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
55	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  iterator  :  eventsStates.iterator())  {  final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  iterator  :  eventsStates.iterator())  {  final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    for(final  EventState  <  EventState>  iterator  :  eventsStates.iterator())  {  final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
56	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
57	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  <identifier>  expected  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  	non-compiled	[CE]  <identifier>  expected	86	None	add
58	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  continue;  }  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
59	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
60	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]            NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
61	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
62	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateAndClearStep(state))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    eventT    =    state.evaluateAndClearStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
63	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(eventT.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    eventT    =    state.evaluateAndClearStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	15	None	replace
64	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    eventT    =    state.evaluateAndClearStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	15	None	replace
65	[BUG]  [BUGGY]  iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	iterator  <  EventState>  iterator  =  eventsStates.iterator();	  while(!eventsStates.isEmpty())    {    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
66	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	69	None	replace
67	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	69	None	replace
68	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	69	None	replace
69	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	33	None	replace
70	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	compilable	  [FE]  AssertionError  	91	1	replace
72	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [FE]  AssertionError  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	compilable	  [FE]  AssertionError  	91	1	replace
73	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	45	None	replace
74	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
75	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  	non-compiled	[CE]  <identifier>  expected	75	None	add
76	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
77	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
78	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
79	[BUG]  [BUGGY]  while(!eventsInitialized.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsInitialized.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsInitialized.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!occurrencesStates.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	52	None	replace
80	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	65	None	replace
81	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	65	None	replace
82	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	65	None	replace
83	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	26	None	replace
84	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
85	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [CE]  <identifier>  expected  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  }	  	non-compiled	[CE]  <identifier>  expected	90	None	add
86	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
87	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  <identifier>  expected  [FE]          NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    for(final  EventState  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	  	non-compiled	[CE]  <identifier>  expected	90	None	add
88	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
89	[BUG]  [BUGGY]  final  EventState  state  =  this.eventsStates.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  this.eventsStates.iterator();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
90	[BUG]  [BUGGY]  final  EventState  state  =  events.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  events.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  events.iterator();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
91	[BUG]  [BUGGY]  final  EventState  state  =  es0.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  es0.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  es0.iterator();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
92	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
93	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
94	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateInstance(state))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateInstance(state))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateInstance(state))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateInstance(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
95	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateInstance(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	46	None	replace
96	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventSigns)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	96	None	replace
97	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	96	None	replace
98	[BUG]  [BUGGY]  while(!interpolator.isEmpty()  &&  isLastStep)  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!interpolator.isEmpty()  &&  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!interpolator.isEmpty()  &&  isLastStep)  {	  while(!interpolator.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
99	[BUG]  [BUGGY]  while(!interpolator.isEmpty()  &&  occuringEvents.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!interpolator.isEmpty()  &&  occuringEvents.size()  >  0)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!interpolator.isEmpty()  &&  occuringEvents.size()  >  0)  {	  while(!interpolator.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
100	[BUG]  [BUGGY]  while(!interpolator.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!interpolator.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!interpolator.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!interpolator.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
101	[BUG]  [BUGGY]  while(!resetOccurred  &&!isLastStep.isEmpty())  {  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!resetOccurred  &&!isLastStep.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!resetOccurred  &&!isLastStep.isEmpty())  {	  while(!isLastStep    &&!resetOccurred.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	85	None	replace
102	[BUG]  [BUGGY]  while(!isLastStep  &&!resetOccurred.booleanValue())  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!resetOccurred.booleanValue())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!resetOccurred.booleanValue())  {	  while(!isLastStep    &&!resetOccurred.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	85	None	replace
103	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsInitialized.isEmpty())  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsInitialized.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!eventsInitialized.isEmpty())  {	  while(!isLastStep    &&!resetOccurred.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	85	None	replace
104	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.stepHandlers().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.stepHandlers().iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.stepHandlers().iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers().iterator();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
105	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers().iterator();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers().iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  es.stepHandlers().iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers().iterator();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
106	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	63	None	replace
107	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	63	None	replace
108	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  isFirstStep  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(isFirstStep  ||  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  isFirstStep	11	None	replace
109	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isInitialized  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  isInitialized  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isInitialized  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(isInitialized  ||  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  isInitialized	11	None	replace
110	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(is0  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  is0  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(is0  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(is0  ||  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  is0	11	None	replace
111	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	23	None	replace
112	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
113	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	23	None	replace
114	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	18	None	replace
115	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
116	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	93	None	replace
117	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	93	None	replace
118	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.isFirstStep)  {  [CE]  cannot  find  symbol  state  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.isFirstStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.isFirstStep)  {	  while(!eventsStates.isEmpty()    &&    isFirstStep)    {    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
119	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.isLastStep)  {  [CE]  cannot  find  symbol  state  [FE]              NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.isLastStep)  {	  while(!eventsStates.isEmpty()    &&    isFirstStep)    {    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
120	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	50	None	replace
121	[BUG]  [BUGGY]  While(!eventsStates.isEmpty())  {  [CE]  ';'  expected  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  While(!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	While(!eventsStates.isEmpty())  {	  while(!eventsStates.isEmpty())    {    While(!eventsStates.isEmpty())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
122	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  ||!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!isLastStep  ||!eventsStates.isEmpty())  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	38	1	replace
123	[BUG]  [BUGGY]  while(!isLastStep  ||!eventsStates.isEmpty())  {  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  ||!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  ||!eventsStates.isEmpty())  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	38	1	replace
124	[BUG]  [BUGGY]  while(!isFirstStep  &&!eventsStates.isEmpty())  {  [CE]  cannot  find  symbol  isFirstStep  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isFirstStep  &&!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isFirstStep  &&!eventsStates.isEmpty())  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  isFirstStep	38	None	replace
125	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStepInterpolator(state))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
126	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
127	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(eventsInitialized);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(eventsInitialized);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  eventT  =  state.evaluateStep(eventsInitialized);	  final    EventState    <    EventState>    eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
128	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(currentEvent);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(currentEvent);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  eventT  =  state.evaluateStep(currentEvent);	  final    EventState    <    EventState>    eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
129	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  this);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  this);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  this);	  final    EventState    <    EventState>    eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
130	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	  Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
131	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  Iterator  <  EventState>  iterator  =  events.iterator();	  Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
132	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();	  Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
133	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
134	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  while(!isLastStep  &&!eventsStates.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  while(!isLastStep  &&!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    while(!isLastStep  &&!eventsStates.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
135	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
136	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();  [CE]  illegal  start  of  expression  [FE]          NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    final  Iterator  <  EventState>  iterator  =  occuringEvents.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
137	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
138	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
139	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
140	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(currentEvent  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  currentEvent  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(currentEvent  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(currentEvent  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(eventT    ==    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvent	66	None	replace
141	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(currentT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  incomparable  types:  double  and  boolean  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(currentT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(currentT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(eventT    ==    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  incomparable  types:  double  and  boolean	66	None	replace
142	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	39	None	replace
143	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
144	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	27	None	replace
145	[BUG]  [BUGGY]  while(!isLastStep  &&!resultingEvents.isEmpty())  {  [CE]  cannot  find  symbol  resultingEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!resultingEvents.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!resultingEvents.isEmpty())  {	  while(!isLastStep    &&!events.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  resultingEvents	35	None	replace
146	[BUG]  [BUGGY]  while(!isLastStep  &&  isLastStep.isEmpty())  {  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&  isLastStep.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&  isLastStep.isEmpty())  {	  while(!isLastStep.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
147	[BUG]  [BUGGY]  while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  0)  {  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  0)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  0)  {	  while(!isLastStep.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
148	[BUG]  [BUGGY]  while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  1)  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  1)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep.isEmpty()  &&  occuringEvents.size()  >  1)  {	  while(!isLastStep.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
149	[BUG]  [BUGGY]  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [CE]  type  EventState  does  not  take  parameters  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  type  EventState  does  not  take  parameters	89	None	replace
150	[BUG]  [BUGGY]  for(final  EventState  <  EventState>  eventStates  :  events.values())  {  [CE]  type  EventState  does  not  take  parameters  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  <  EventState>  eventStates  :  events.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  <  EventState>  eventStates  :  events.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  type  EventState  does  not  take  parameters	89	None	replace
151	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  eventStates.values().length  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]              NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  eventStates.values().length  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  eventStates.values().length  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
152	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  eventStates.size()  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]                NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  eventStates.size()  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  eventStates.size()  >  0)  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
153	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	17	None	replace
154	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  break;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(state))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
155	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	32	None	replace
156	[BUG]  [BUGGY]  final  EventState  state  =  this.eventsStates.get(0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  this.eventsStates.get(0);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  this.eventsStates.get(0);	  final    EventState    state    =    eventsStates.get(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
157	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0).evaluate();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(0).evaluate();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(0).evaluate();	  final    EventState    state    =    eventsStates.get(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
158	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
159	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	77	None	replace
160	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	77	None	replace
161	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(eventsInitialized);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  state.evaluateStep(eventsInitialized);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluateStep(eventsInitialized);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
162	[BUG]  [BUGGY]  eventT  =  state.evaluate(interpolator);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  state.evaluate(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluate(interpolator);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
163	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(interpolator,  orderingSign);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluateStep(interpolator,  orderingSign);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
164	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	5	None	replace
165	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	48	None	replace
166	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventSigns)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	48	None	replace
167	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	48	None	replace
168	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	48	None	replace
169	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(eventsInitialized);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(eventsInitialized);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  state  =  state.evaluateStep(eventsInitialized);	  final    EventState    <    EventState>    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
170	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluate(interpolator);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluate(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  state  =  state.evaluate(interpolator);	  final    EventState    <    EventState>    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
171	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
172	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	92	None	replace
173	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	92	None	replace
174	[BUG]  [BUGGY]  while(!state.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!state.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!state.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!existingEvents.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	95	None	replace
175	[BUG]  [BUGGY]  Constants.checkState(isLastStep  +  orderingSign);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(isLastStep  +  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep  +  orderingSign);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
176	[BUG]  [BUGGY]  Constants.checkState(!isLastStep);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(!isLastStep);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(!isLastStep);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
177	[BUG]  [BUGGY]  Constants.checkState(isLastStep  ||  isInitialized);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(isLastStep  ||  isInitialized);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep  ||  isInitialized);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
178	[BUG]  [BUGGY]  Constants.checkState(isLastStep  ||  isLastStep);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(isLastStep  ||  isLastStep);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep  ||  isLastStep);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
179	[BUG]  [BUGGY]  final  EventState  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  iterator  =  eventsStates.iterator();	  while(!eventsStates.isEmpty())    {    if(!eventsStates.isEmpty())    {    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
180	[BUG]  [BUGGY]  final  EventsState  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventsState  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventsState  <  EventState>  iterator  =  eventsStates.iterator();	  while(!eventsStates.isEmpty())    {    if(!eventsStates.isEmpty())    {    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
181	[BUG]  [BUGGY]  while(!events.isEmpty()  &&  isLastStep)  {  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!events.isEmpty()  &&  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!events.isEmpty()  &&  isLastStep)  {	  while(!events.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
182	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	31	None	replace
183	[BUG]  [BUGGY]  final  EventState  <  Event>[]  events  =  state.getAllEvents();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  Event>[]  events  =  state.getAllEvents();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  Event>[]  events  =  state.getAllEvents();	  final    EventState    <    Event>[]    events    =    state.getEvents();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
184	[BUG]  [BUGGY]  final  EventState  <  Event>[]  events  =  state.getOccurredEvents();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  Event>[]  events  =  state.getOccurredEvents();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  Event>[]  events  =  state.getOccurredEvents();	  final    EventState    <    Event>[]    events    =    state.getEvents();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
185	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	43	None	replace
186	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  continue;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
187	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	44	None	replace
188	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	44	None	replace
189	[BUG]  [BUGGY]  final  EventState  <  Event>[]  events  =  state.getAllEventSlots();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  Event>[]  events  =  state.getAllEventSlots();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  Event>[]  events  =  state.getAllEventSlots();	  final    EventState    <    Event>[]    events    =    state.getEventSlots();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
190	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  ||  state.evaluateMethod(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  ||  state.evaluateMethod(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  ||  state.evaluateMethod(interpolator))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateMethod(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
191	[BUG]  [BUGGY]  while(!existingEvents.isEmpty()  &&  state.evaluateMethod(interpolator))  {  [CE]  cannot  find  symbol  existingEvents  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!existingEvents.isEmpty()  &&  state.evaluateMethod(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!existingEvents.isEmpty()  &&  state.evaluateMethod(interpolator))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateMethod(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	78	None	replace
192	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateMethod(state))  {  [CE]  cannot  find  symbol  state  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  interpolator.evaluateMethod(state))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  interpolator.evaluateMethod(state))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateMethod(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
193	[BUG]  [BUGGY]  while(!isLastStep  &&!currentEvents.isEmpty())  {  [CE]  cannot  find  symbol  currentEvents  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!currentEvents.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!currentEvents.isEmpty())  {	  while(!isLastStep    &&!existingEvents.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	36	None	replace
194	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  ||  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!eventsStates.isEmpty()  ||  isLastStep)  {	  while(!eventsStates.isEmpty()    &&    isLastStep)    {    	compilable	  [FE]  NoSuchElementException  	2	1	replace
195	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  ||  isLastStep)  {  [FE]  NoSuchElementException  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  ||  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  ||  isLastStep)  {	  while(!eventsStates.isEmpty()    &&    isLastStep)    {    	compilable	  [FE]  NoSuchElementException  	2	1	replace
196	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isInitialized)  {  [CE]  cannot  find  symbol  isInitialized  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isInitialized)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  isInitialized)  {	  while(!eventsStates.isEmpty()    &&    isLastStep)    {    	non-compiled	[CE]  cannot  find  symbol  isInitialized	2	None	replace
197	[BUG]  [BUGGY]  result.add(event);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(event);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(event);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
198	[BUG]  [BUGGY]  result.add(eventsInitialized);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(eventsInitialized);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(eventsInitialized);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
199	[BUG]  [BUGGY]  result.add(expandableODE);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(expandableODE);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(expandableODE);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
200	[BUG]  [BUGGY]  result.add(eventsInitialized,  state);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(eventsInitialized,  state);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(eventsInitialized,  state);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
201	[BUG]  [BUGGY]  while(!isLastStep  &&  state.isEmpty())  {  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&  state.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&  state.isEmpty())  {	  while(!isLastStep    &&!state.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	68	None	replace
202	[BUG]  [BUGGY]  while(!state.isEmpty())  {  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!state.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!state.isEmpty())  {	  while(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
203	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurrence(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurrence(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurrence(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurrence(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
204	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurrence(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	54	None	replace
205	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurrence(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	54	None	replace
206	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	22	None	replace
207	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  break;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
208	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	6	None	replace
209	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	6	None	replace
210	[BUG]  [BUGGY]  final  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState>  iterator  =  eventsStates.iterator();	  while(!eventsStates.isEmpty())    {    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
211	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	61	None	replace
212	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	61	None	replace
213	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	61	None	replace
214	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
215	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	12	None	replace
216	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
217	[BUG]  [BUGGY]  AssertionError.show(event,  t0,  yDot,  orderingSign);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  t0,  yDot,  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  t0,  yDot,  orderingSign);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
218	[BUG]  [BUGGY]  AssertionError.show(event,  orderingSign,  t0,  tEnd);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  orderingSign,  t0,  tEnd);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  orderingSign,  t0,  tEnd);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
219	[BUG]  [BUGGY]  AssertionError.show(event,  t0,  orderingSign,  tEnd);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  t0,  orderingSign,  tEnd);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  t0,  orderingSign,  tEnd);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
220	[BUG]  [BUGGY]  AssertionError.show(event,  orderingEvents,  t0,  tEnd,  t);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  orderingEvents,  t0,  tEnd,  t);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  orderingEvents,  t0,  tEnd,  t);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
221	[BUG]  [BUGGY]  while(!existingEvents.isEmpty()  ||  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  existingEvents  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!existingEvents.isEmpty()  ||  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!existingEvents.isEmpty()  ||  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty()    ||    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	53	None	replace
222	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    eventT    =    state.evaluateAndClearStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
223	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  <identifier>  expected  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  eventStates.iterator();	  while(!eventsStates.isEmpty())    {    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
224	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  state  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  state  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState  state  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
225	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState  <  EventState>  eventState  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
226	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.values();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.values();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState[]  eventStates  =  this.eventsStates.values();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
227	[BUG]  [BUGGY]  AssertionError.show(event,  t0,  orderingEvents,  tEnd);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  t0,  orderingEvents,  tEnd);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  t0,  orderingEvents,  tEnd);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
228	[BUG]  [BUGGY]  AssertionError.show(event,  orderingEvents,  t0,  tEnd,  orderingSign);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  orderingEvents,  t0,  tEnd,  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  orderingEvents,  t0,  tEnd,  orderingSign);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
229	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
230	[BUG]  [BUGGY]  while(!interpolator.isEmpty()  ||  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!interpolator.isEmpty()  ||  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!interpolator.isEmpty()  ||  state.evaluateStep(interpolator))  {	  while(!interpolator.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
231	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
232	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
233	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.values();  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  final  EventState[]  eventStates  =  this.eventsStates.values();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    final  EventState[]  eventStates  =  this.eventsStates.values();	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
234	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    final  EventState[]  eventStates  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
235	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
236	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    final  EventState[]  eventsInitialized  =  this.eventsStates.toArray(new  EventState[this.eventsStates.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
237	[BUG]  [BUGGY]  while(!isLastStep  &&!interpolator.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!interpolator.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!interpolator.isEmpty())  {	  while(!isLastStep    &&!state.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
238	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	61	None	replace
239	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(occuringEvents.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
240	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventsInitialized.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventsInitialized.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(eventsInitialized.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	34	None	replace
241	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	13	None	replace
242	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	17	None	replace
243	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
244	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurredEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurredEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occurredEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
245	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(currentEvent))  {  [CE]  cannot  find  symbol  currentEvent  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(currentEvent))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateStep(currentEvent))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  currentEvent	3	None	replace
246	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  events	47	None	replace
247	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  orderingSign)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  orderingSign)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  orderingSign)  {	  while(!eventsStates.isEmpty()    &&    isFirstStep)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
248	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  currentStep)  {  [CE]  cannot  find  symbol  currentStep  [FE]              NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  currentStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  currentStep)  {	  while(!eventsStates.isEmpty()    &&    isFirstStep)    {    	non-compiled	[CE]  cannot  find  symbol  currentStep	4	None	replace
249	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep)  {  [CE]  cannot  find  symbol  state  [FE]                NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateStep)  {	  while(!eventsStates.isEmpty()    &&    isFirstStep)    {    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
250	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateMethod(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
251	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(eventT    ==    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	66	None	replace
252	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  events	65	None	replace
253	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
254	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  final  EventState  <  EventState>  eventStates  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  final  EventState  <  EventState>  eventStates  =  eventsStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    final  EventState  <  EventState>  eventStates  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
255	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(eventsStates.size()  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(eventsStates.size()  -  1);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(eventsStates.size()  -  1);	  final    EventState    state    =    eventsStates.get(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
256	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	14	None	replace
257	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(interpolator);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(interpolator);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
258	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredEvent);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredEvent);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(ignoredEvent);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
259	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredEvents.size());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredEvents.size());  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(ignoredEvents.size());	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
260	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.values().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.values().iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.values().iterator();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
261	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.values();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.values();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.values();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
262	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occurredingEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	60	None	replace
263	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occurredingEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	60	None	replace
264	[BUG]  [BUGGY]  final  while(!eventsStates.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  while(!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  while(!eventsStates.isEmpty())  {	  while(!eventsStates.isEmpty())    {    While(!eventsStates.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
265	[BUG]  [BUGGY]  while(!resultsStates.isEmpty())  {  [CE]  cannot  find  symbol  resultsStates  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!resultsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!resultsStates.isEmpty())  {	  while(!eventsStates.isEmpty())    {    while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  resultsStates	30	None	replace
266	[BUG]  [BUGGY]  Constants.checkState(this.isLastStep);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(this.isLastStep);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(this.isLastStep);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
267	[BUG]  [BUGGY]  Constants.checkState(isLastStep  <  =  orderingSign);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(isLastStep  <  =  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep  <  =  orderingSign);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
268	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  <identifier>  expected  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  Iterator  <  EventState>  iterator  =  eventStates.iterator();	  while(!eventsStates.isEmpty())    {    final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
269	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  isLastStep  &&  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty()    &&    isLastStep)    {    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
270	[BUG]  [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  occuringEvents  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	87	None	replace
271	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	11	None	replace
272	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isFirstStep)  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  isFirstStep  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isFirstStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isFirstStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  isFirstStep	11	None	replace
273	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
274	[BUG]  [BUGGY]  for(final  EventState  state  :  thisEventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  thisEventsStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  thisEventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  thisEventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  thisEventsStates	84	None	replace
275	[BUG]  [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  occuringEvents  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.occuringEvents)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	76	None	replace
276	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStepInterpolator(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	19	None	replace
277	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	18	None	replace
278	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	18	None	replace
279	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(interpolator,  yDot);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  state.evaluateStep(interpolator,  yDot);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluateStep(interpolator,  yDot);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
280	[BUG]  [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  occuringEvents  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.occuringEvents)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	91	None	replace
281	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
282	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
283	[BUG]  [BUGGY]  while(!isLastStep  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&  state.evaluateStep(interpolator))  {	  while(!existingEvents.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	95	None	replace
284	[BUG]  [BUGGY]  final  EventState[]  events  =  state.getOccurrenceEvents();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState[]  events  =  state.getOccurrenceEvents();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState[]  events  =  state.getOccurrenceEvents();	  final    EventState[]    events    =    state.getEvents();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
285	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
286	[BUG]  [BUGGY]  result.add(interpolator);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(interpolator);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
287	[BUG]  [BUGGY]  result.add(exp);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.add(exp);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(exp);	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
288	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	27	None	replace
289	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  this);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  this);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  this);	  final    EventState    <    EventState>    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
290	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	41	None	replace
291	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  occuringEvents  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  occuringEvents  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  occuringEvents  :  eventsStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
292	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  eventStates  :  eventStates.values())  {  [CE]  illegal  start  of  expression  [FE]            NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  eventStates  :  eventStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  eventStates  :  eventStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
293	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurrence(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	54	None	replace
294	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateInstance(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	46	None	replace
295	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.contains(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!isLastStep  &&!eventsStates.contains(interpolator))  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	38	1	replace
296	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.contains(interpolator))  {  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.contains(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!eventsStates.contains(interpolator))  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	38	1	replace
297	[BUG]  [BUGGY]  while(!isLastStep  &&!requiresStates.isEmpty())  {  [CE]  cannot  find  symbol  requiresStates  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!requiresStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!requiresStates.isEmpty())  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  requiresStates	38	None	replace
298	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator)||  state.evaluateMethod(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator)||  state.evaluateMethod(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator)||  state.evaluateMethod(interpolator))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateMethod(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
299	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventState.stepHandlers().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  eventState.stepHandlers().iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  eventState.stepHandlers().iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers().iterator();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
300	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	50	None	replace
301	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	42	None	replace
302	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
303	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(expableODE))  {  [CE]  cannot  find  symbol  expableODE  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(expableODE))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateMethod(expableODE))  {	  while(!eventsStates.isEmpty()    &&    state.evaluateMethod(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  expableODE	78	None	replace
304	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	43	None	replace
305	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	26	None	replace
306	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	48	None	replace
307	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	33	None	replace
308	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	65	None	replace
309	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	34	None	replace
310	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	20	None	replace
311	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
312	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  while(!isLastStep  &&!eventsStates.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  while(!isLastStep  &&!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  while(!isLastStep  &&!eventsStates.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
313	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  While(!isLastStep  &&!eventsStates.isEmpty())  {  [CE]  ';'  expected  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  While(!isLastStep  &&!eventsStates.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep    &&!eventsStates.isEmpty())    {    While(!isLastStep  &&!eventsStates.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	37	None	add
314	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
315	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
316	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurrence(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
317	[BUG]  [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
318	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  incompatible  types	47	None	replace
319	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	47	None	replace
320	[BUG]  [BUGGY]  final  EventState  state  =  state.getEventState();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  state.getEventState();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  state.getEventState();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
321	[BUG]  [BUGGY]  final  EventState  state  =  state.getEventStates().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  state.getEventStates().iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  state.getEventStates().iterator();	  final    EventState    state    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
322	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
323	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
324	[BUG]  [BUGGY]  for(final  EventState  state  :  state.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  state.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  state.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
325	[BUG]  [BUGGY]  static  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  static  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	static  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);	  final    EventState    <    EventState>    eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
326	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  yDot);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  yDot);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator,  yDot);	  final    EventState    <    EventState>    eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
327	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
328	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
329	[BUG]  [BUGGY]  while(!isLastStep.isEmpty()  &&  isLastStep)  {  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep.isEmpty()  &&  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep.isEmpty()  &&  isLastStep)  {	  while(!isLastStep.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
330	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  yDot);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  yDot);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator,  yDot);	  final    EventState    <    EventState>    state    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
331	[BUG]  [BUGGY]  Constants.checkState(isLastStep  >  0);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  Constants.checkState(isLastStep  >  0);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep  >  0);	  Constants.checkState(isLastStep);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
332	[BUG]  [BUGGY]  while(!eventStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  eventStates  [FE]        NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventStates.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!occurrencesStates.isEmpty()    &&    state.evaluateStep(interpolator))    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	52	None	replace
333	[BUG]  [BUGGY]  while(!isLastStep  ||  state.isEmpty())  {  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  ||  state.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  ||  state.isEmpty())  {	  while(!isLastStep    &&!state.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	68	None	replace
334	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents.values())  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	92	None	replace
335	[BUG]  [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	For(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
336	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
337	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	41	None	replace
338	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	22	None	replace
339	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	23	None	replace
340	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  result  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  result	17	None	replace
341	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  currentEvents  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	77	None	replace
342	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  eventT  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  eventT  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(eventT    ==    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  state	66	None	replace
343	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	39	None	replace
344	[BUG]  [BUGGY]  while(!isLastStep  &&!stateInitialized.isEmpty())  {  [CE]  cannot  find  symbol  stateInitialized  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!stateInitialized.isEmpty())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!stateInitialized.isEmpty())  {	  while(!isLastStep    &&!resetOccurred.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	85	None	replace
345	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	32	None	replace
346	[BUG]  [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  for-each  not  applicable  to  expression  type  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  statesInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	67	None	replace
347	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	13	None	replace
348	[BUG]  [BUGGY]  final  EventState  state  =  eventStates.get(0);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventStates.get(0);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventStates.get(0);	  final    EventState    state    =    eventsStates.get(0);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
349	[BUG]  [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	For(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    this.eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
350	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(events.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	61	None	replace
351	[BUG]  [BUGGY]  AssertionError.show(event,  yDot,  tEnd,  orderingSign);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  yDot,  tEnd,  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  yDot,  tEnd,  orderingSign);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
352	[BUG]  [BUGGY]  AssertionError.show(event,  y,  t0,  orderingSign);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  AssertionError.show(event,  y,  t0,  orderingSign);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  y,  t0,  orderingSign);	  AssertionError.show(event,    t0,    tEnd,    orderingSign);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
353	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  result  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  result	18	None	replace
354	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	96	None	replace
355	[BUG]  [BUGGY]  result.clear();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  result.clear();  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.clear();	  result.add(state);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
356	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateAndClearStep(interpolator))    {    eventT    =    state.evaluateAndClearStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
357	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	69	None	replace
358	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
359	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateMethod(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	21	None	replace
360	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  events  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	25	None	replace
361	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  currentEvents.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	94	None	replace
362	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty()  &&  state.evaluate())  {  [CE]  cannot  find  symbol  state  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty()  &&  state.evaluate())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!eventsStates.isEmpty()  &&  state.evaluate())  {	  while(!isLastStep    &&!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	38	None	replace
363	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStepInterpolator(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	19	None	replace
364	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
365	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final    EventState    state    :    this.eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
366	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  While(!eventsStates.isEmpty()  &&  isLastStep)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  While(!eventsStates.isEmpty()  &&  isLastStep)  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    While(!eventsStates.isEmpty()  &&  isLastStep)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
367	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  eventsStates  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  for(final  EventState  <  EventState>  eventsStates  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()    &&    isLastStep)    {    for(final  EventState  <  EventState>  eventsStates  :  eventsStates.values())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
368	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInstance(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInstance(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInstance(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateInstance(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
369	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  &&  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  eventsStates)  {  if(isLastStep  &&  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	compilable	  [FE]  NoSuchElementException  	11	1	replace
370	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  &&  isLastStep)  {  occuringEvents.add(state);  }  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  &&  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(isLastStep  &&  isLastStep)  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(isLastStep    ||    isLastStep)    {    occuringEvents.add(state);    }    	compilable	  [FE]  NoSuchElementException  	11	1	replace
371	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	45	None	replace
372	[BUG]  [BUGGY]  eventT  =  interpolator.evaluateStep(state);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  interpolator.evaluateStep(state);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  interpolator.evaluateStep(state);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
373	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(interpolator,  this);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  eventT  =  state.evaluateStep(interpolator,  this);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluateStep(interpolator,  this);	  eventT    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
374	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]          NoSuchElementException      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [BUGGY]        final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {	  while(!eventsStates.isEmpty())    {    for(final    EventState    <    EventState>    eventStates    :    eventsStates.values())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
375	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign  -  1);  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(ignoredSign  -  1);	  final    EventState    state    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
376	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	63	None	replace
