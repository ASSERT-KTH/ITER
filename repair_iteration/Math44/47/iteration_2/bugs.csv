bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!eventsStates.isEmpty()  &&  isLastStep)  {	  while(!eventsStates.isEmpty())    {    	compilable	  [FE]  AssertionError  	3	1	replace
2	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  [FE]  AssertionError  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  &&  isLastStep)  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  isLastStep)  {	  while(!eventsStates.isEmpty())    {    	compilable	  [FE]  AssertionError  	3	1	replace
3	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]      NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
4	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  isFirstStep)  {  [CE]  cannot  find  symbol  isFirstStep  [FE]        NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  &&  isFirstStep)  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  isFirstStep)  {	  while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  isFirstStep	3	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	20	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	20	None	replace
8	[BUG]  [BUGGY]  while(!events.isEmpty())  {  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!events.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!events.isEmpty())  {	  while(!existingEvents.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  events	17	None	replace
9	[BUG]  [BUGGY]  while(!isLastStep.isEmpty())  {  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep.isEmpty())  {	  while(!existingEvents.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	17	None	replace
10	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }	      	compilable	  [FE]  NoSuchElementException  	5	1	replace
11	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [FE]  NoSuchElementException  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(isLastStep  ||  isLastStep)  {  occuringEvents.add(state);  }	      	compilable	  [FE]  NoSuchElementException  	5	1	replace
12	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	13	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	13	None	replace
15	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  eventT  =  state.evaluateAndClearStep(interpolator);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
16	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(interpolator);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  eventT  =  state.evaluateStep(interpolator);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	eventT  =  state.evaluateStep(interpolator);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  result  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  result.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  result	15	None	replace
18	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  result  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  result.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  result	15	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  result.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateAndClearStep(interpolator))  {  result.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateMethod(interpolator))  {  occuringEvents.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	7	None	replace
23	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	7	None	replace
24	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	compilable	  [FE]  NoSuchElementException  	14	1	replace
25	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [FE]  NoSuchElementException  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	compilable	  [FE]  NoSuchElementException  	14	1	replace
26	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	6	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
28	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
29	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  if(!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  if(!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    if(!eventsStates.isEmpty())  {  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
30	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  while(!eventsStates.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  while(!eventsStates.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    while(!eventsStates.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
31	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	19	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
33	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	10	None	replace
34	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
35	[BUG]  [BUGGY]  while(!isLastStep  &&!events.isEmpty())  {  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!events.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!events.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  events	4	None	replace
36	[BUG]  [BUGGY]  while(!isLastStep  &&!existingEvents.isEmpty())  {  [CE]  cannot  find  symbol  existingEvents  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!existingEvents.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!existingEvents.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	4	None	replace
37	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	while(!isLastStep  &&!eventsStates.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	4	1	replace
38	[BUG]  [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  [FE]  NoSuchElementException  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!eventsStates.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!eventsStates.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	compilable	  [FE]  NoSuchElementException  	4	1	replace
39	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	8	None	replace
40	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	8	None	replace
41	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
42	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
43	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	18	None	replace
46	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateInstance(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  return  state;  }	      	non-compiled	[CE]  incompatible  types	5	None	replace
48	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	6	None	replace
49	[BUG]  [BUGGY]  while(!entries.isEmpty())  {  [CE]  cannot  find  symbol  entries  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!entries.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!entries.isEmpty())  {	  while(!occurrences.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  entries	1	None	replace
50	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	10	None	replace
51	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
52	[BUG]  [BUGGY]  while(!occurrencesStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  occurrencesStates  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!occurrencesStates.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!occurrencesStates.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  occurrencesStates	3	None	replace
53	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  ||  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]      NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  ||  state.evaluateStep(interpolator))  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  ||  state.evaluateStep(interpolator))  {	  while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
54	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
55	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  state  =  eventsStates.iterator();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.iterator();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
56	[BUG]  [BUGGY]  final  EventState[]  events  =  state.getEvents();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState[]  events  =  state.getEvents();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState[]  events  =  state.getEvents();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
57	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  state  =  eventsStates.get(ignoredSign);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(ignoredSign);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
58	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  state  =  eventsStates.get(0);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  state  =  eventsStates.get(0);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
59	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	20	None	replace
60	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [CE]  cannot  find  symbol  occurredingEvents  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  occurredingEvents	12	None	replace
61	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(events.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
62	[BUG]  [BUGGY]  while(!interpolator.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!interpolator.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!interpolator.isEmpty())  {	  while(!existingEvents.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
63	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  eventStates  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	19	None	replace
64	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	19	None	replace
65	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	13	None	replace
66	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  eventT  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsStates)  {  if(eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	13	None	replace
67	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	18	None	replace
68	[BUG]  [BUGGY]  while(!isLastStep  &&!state.isEmpty())  {  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!state.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!state.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
69	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	6	None	replace
70	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  eventT  =  state.evaluateStep(interpolator);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
71	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  eventsStates.iterator();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
72	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  EventState>  state  =  state.evaluateStep(interpolator);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
73	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers().iterator();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlers().iterator();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
74	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Iterator  <  EventState>  iterator  =  events.iterator();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	compilable	  [FE]  AssertionError  	18	1	replace
76	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	compilable	  [FE]  AssertionError  	18	1	replace
77	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	18	None	replace
78	[BUG]  [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator))  {  [CE]  cannot  find  symbol  state  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator))  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty()  &&  state.evaluateMethod(interpolator))  {	  while(!eventsStates.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
79	[BUG]  [BUGGY]  final  EventState  <  Event>[]  events  =  state.getEvents();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  <  Event>[]  events  =  state.getEvents();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  Event>[]  events  =  state.getEvents();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  AssertionError.show(event,  t0,  tEnd,  orderingSign);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  AssertionError.show(event,  t0,  tEnd,  orderingSign);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	AssertionError.show(event,  t0,  tEnd,  orderingSign);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  final  EventState  <  Event>[]  events  =  state.getEventSlots();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  final  EventState  <  Event>[]  events  =  state.getEventSlots();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	final  EventState  <  Event>[]  events  =  state.getEventSlots();	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  result.add(state);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  result.add(state);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	result.add(state);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
83	[BUG]  [BUGGY]  Constants.checkState(isLastStep);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  Constants.checkState(isLastStep);  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	Constants.checkState(isLastStep);	      if(!occuringEvents.isEmpty())    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    result.add(state);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
84	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
85	[BUG]  [BUGGY]  while(!isLastStep  &&!resetOccurred.isEmpty())  {  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!isLastStep  &&!resetOccurred.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!isLastStep  &&!resetOccurred.isEmpty())  {	  while(!isLastStep    &&!occurrences.isEmpty())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	4	None	replace
86	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	compilable	  [FE]  NoSuchElementException  	10	1	replace
87	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [FE]  NoSuchElementException  [FE]                AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	compilable	  [FE]  NoSuchElementException  	10	1	replace
88	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  While(!eventsStates.isEmpty())  {  [CE]  ';'  expected  [FE]    NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  While(!eventsStates.isEmpty())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    While(!eventsStates.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	2	None	add
89	[BUG]  [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [CE]  illegal  start  of  expression  [FE]      NoSuchElementException    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!eventsStates.isEmpty())  {  for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!eventsStates.isEmpty())    {    for(final  EventState  <  EventState>  eventStates  :  eventsStates.values())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
90	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	compilable	  [FE]  NoSuchElementException  	19	1	replace
91	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [FE]  NoSuchElementException  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	compilable	  [FE]  NoSuchElementException  	19	1	replace
92	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	19	None	replace
93	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
94	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  break;  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  events	20	None	replace
95	[BUG]  [BUGGY]  while(!existingEvents.isEmpty()  &&  state.evaluateStep(interpolator))  {  [CE]  cannot  find  symbol  existingEvents  [FE]        AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  while(!existingEvents.isEmpty()  &&  state.evaluateStep(interpolator))  {  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	while(!existingEvents.isEmpty()  &&  state.evaluateStep(interpolator))  {	  while(!existingEvents.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	17	None	replace
96	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError    [CONTEXT]    });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	9	None	replace
