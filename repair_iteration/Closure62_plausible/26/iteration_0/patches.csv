bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE  [FE]    ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	non-compiled	[CE]  cannot  find  symbol  LINE	51	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	compilable	  [FE]  ComparisonFailure  	51	4	replace
3	[BUG]  [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(sourceExcerpt)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	compilable	  [FE]  ComparisonFailure  	51	4	replace
4	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_NUMBER  [FE]          ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_NUMBER)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	non-compiled	[CE]  cannot  find  symbol  LINE_NUMBER	51	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]    [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	  	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	non-compiled	[CE]  illegal  start  of  type	51	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	add	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	compilable	  [FE]  ComparisonFailure  	51	2	replace
7	[BUG]  [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(LINE)&&  0  <=  charno  &&  charno  >=  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	compilable	  [FE]  ComparisonFailure  	51	2	replace
8	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTE  [FE]    ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTE)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTE	51	None	replace
9	[BUG]  [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [CE]  cannot  find  symbol  LINE_EXCERPTOR  [FE]      ComparisonFailure  [CONTEXT]  b.append(error.description);  b.append('\n');  if  (sourceExcerpt  !=  null)  {  b.append(sourceExcerpt);  b.append('\n');  int  charno  =  error.getCharno();      [BUGGY]  if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  [BUGGY]  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  for  (int  i  =  0;  i  <  charno;  i++)  {  char  c  =  sourceExcerpt.charAt(i);  if  (Character.isWhitespace(c))  {  b.append(c);  }  else  {  b.append('  ');  }  }  b.append( "^\n ");  [CLASS]  LightweightMessageFormatter  LineNumberingFormatter  [METHOD]  format  [RETURN_TYPE]  String  JSError  error  boolean  warning  [VARIABLES]  boolean  warning  StringBuilder  b  ExcerptFormatter  excerptFormatter  char  c  SourceExcerpt  excerpt  SourceExcerptProvider  source  String  sourceExcerpt  JSError  error  int  charno  i  	projects/Closure62/src/com/google/javascript/jscomp/LightweightMessageFormatter.java	0.7071067811865475	97	98	2	replace	if(excerpt.equals(SourceExcerptProvider.LINE_EXCERPTOR)&&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {	if  (excerpt.equals(LINE)  &&  0  <=  charno  &&  charno  <  sourceExcerpt.length())  {  	non-compiled	[CE]  cannot  find  symbol  LINE_EXCERPTOR	51	None	replace
