bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.get(compare);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.get(compare);  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.get(compare);		non-compiled	[CE]  	10	None	add
2	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.toArray(newValues);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.toArray(newValues);  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.toArray(newValues);		non-compiled	[CE]  	10	None	add
3	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.toArray(new  Value[values.size()  ]);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.toArray(new  Value[values.size()  ]);  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.toArray(new  Value[values.size()  ]);		non-compiled	[CE]  	10	None	add
4	[BUG]  [BUGGY]  }  else  if(compare!=  0)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]  }  else  if(compare!=  0)  {  [BUGGY]  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	}  else  if(compare!=  0)  {	}  else  if  (compare  ==  0)  {  	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(		non-compiled	[CE]  	10	None	add
6	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(loop  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(loop  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  if(loop		non-compiled	[CE]  	10	None	add
7	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);		non-compiled	[CE]  	10	None	add
8	[BUG]  [BUGGY]  }  else  if(compare  <  0)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]  }  else  if(compare  <  0)  {  [BUGGY]  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	}  else  if(compare  <  0)  {	}  else  if  (compare  ==  0)  {  	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);		non-compiled	[CE]  	10	None	add
10	[BUG]  [BUGGY]    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if(loopRangeField.compareTo(loopRangeField)  >  0)  {  break;  }  [CE]  [FE]      AssertionFailedError  [CONTEXT]  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  [BUGGY]    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if(loopRangeField.compareTo(loopRangeField)  >  0)  {  break;  }  [BUGGY]  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	    DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if(loopRangeField.compareTo(loopRangeField)  >  0)  {  break;  }		non-compiled	[CE]  	10	None	add
