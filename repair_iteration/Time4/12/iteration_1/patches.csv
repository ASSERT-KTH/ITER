bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newValues  =  iTypes.get(value);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newValues  =  iTypes.get(value);	      int[]    newValues    =    iTypes.get(index);    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  int[]  newValues  =  getValues(index);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newValues  =  getValues(index);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newValues  =  getValues(index);	      int[]    newValues    =    getValues();    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  -  1];  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  -  1];  [BUGGY]    int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  -  1];	  DateTimeFieldType[]    newTypes    =    new    DateTimeFieldType[iTypes.length];    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  int[]  newTypes  =  getValues(index);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newTypes  =  getValues(index);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newTypes  =  getValues(index);	      int[]    newTypes    =    getValues();    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  int[]  newTypes  =  iTypes.get(index  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newTypes  =  iTypes.get(index  +  1);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newTypes  =  iTypes.get(index  +  1);	      int[]    newTypes    =    iTypes.get(index);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  int[]  newTypes  =  iTypes.get(value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newTypes  =  iTypes.get(value);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newTypes  =  iTypes.get(value);	      int[]    newTypes    =    iTypes.get(index);    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[iTypes.length]);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[iTypes.length]);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newValues  =  iTypes.toArray(new  int[iTypes.length]);	      int[]    newValues    =    iTypes.toArray(new    int[index]);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[0]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[0]);  [BUGGY]    DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newValues  =  iTypes.toArray(new  int[0]);	      int[]    newValues    =    iTypes.toArray(new    int[index]);    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =(int[])iTypes.toArray(new  int[index]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {    [BUGGY]  int[]  newValues  =(int[])iTypes.toArray(new  int[index]);  [BUGGY]    int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	432	432	1	replace	int[]  newValues  =(int[])iTypes.toArray(new  int[index]);	      	non-compiled	[CE]  	2	None	replace
