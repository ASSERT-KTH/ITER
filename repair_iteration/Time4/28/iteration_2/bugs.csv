bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  newValues  =  getValues(value);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  getValues(value);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  getValues(value);	      int[]    newValues    =    getValues();    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  tries.add(new  TypedField(fieldType,  value));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  tries.add(new  TypedField(fieldType,  value));  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	tries.add(new  TypedField(fieldType,  value));	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.get(fieldType);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.get(fieldType);	      int[]    newValues    =    iTypes.get(value);    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.get(fieldType,  value);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.get(fieldType,  value);	      int[]    newValues    =    iTypes.get(value);    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(iFieldIndex,  value);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.get(iFieldIndex,  value);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.get(iFieldIndex,  value);	      int[]    newValues    =    iTypes.get(iFieldIndex);    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  DateTimeFieldType  fieldType  =  fieldType.getField(iChronology);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  DateTimeFieldType  fieldType  =  fieldType.getField(iChronology);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	DateTimeFieldType  fieldType  =  fieldType.getField(iChronology);	      DateTimeFieldType    fieldType    =    fieldType.getDurationType();    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType  fieldType  =  fieldType.getRangeDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  DateTimeFieldType  fieldType  =  fieldType.getRangeDurationType();  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	DateTimeFieldType  fieldType  =  fieldType.getRangeDurationType();	      DateTimeFieldType    fieldType    =    fieldType.getDurationType();    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.getValues();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  fieldType.getValues();  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  fieldType.getValues();	      int[]    newValues    =    iPartial.getValues();    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredError( "The  field  type  must  not  be  null. ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  aughtExceptionHandler.throwAsIgnoredError( "The  field  type  must  not  be  null. ");  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	aughtExceptionHandler.throwAsIgnoredError( "The  field  type  must  not  be  null. ");	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  nested.add(new  TypedField(fieldType,  value));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  nested.add(new  TypedField(fieldType,  value));  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	nested.add(new  TypedField(fieldType,  value));	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	nested  =  new  LinkedList  <  DateTimeFieldType>();	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  safeMultiply(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  safeMultiply(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	safeMultiply(fieldType,  value)  {  throw  new  IllegalArgumentException( " ");  }	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  safeMultiply(fieldType.getValue(),  value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  safeMultiply(fieldType.getValue(),  value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	safeMultiply(fieldType.getValue(),  value)  {  throw  new  IllegalArgumentException( " ");  }	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  if(value  ==  0  ||  fieldType  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  if(value  ==  0  ||  fieldType  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	if(value  ==  0  ||  fieldType  ==  null)  {	  if(fieldType    ==    null    ||    value    ==    -1)    {    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[0]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[0]);  [BUGGY]    throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.toArray(new  int[0]);	      	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  int[]  newValues  =  getValues();  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  if(iTypes[i]!=  null)  {  return  withPartial(iTypes[i]);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  getValues();  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  if(iTypes[i]!=  null)  {  return  withPartial(iTypes[i]);  }  [BUGGY]    throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  getValues();  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  if(iTypes[i]!=  null)  {  return  withPartial(iTypes[i]);  }	      	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[iTypes.size()  ]);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(new  int[iTypes.size()  ]);  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.toArray(new  int[iTypes.size()  ]);	      int[]    newValues    =    iTypes.get(iFieldIndex);    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.values();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  int[]  newValues  =  iTypes.values();  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	int[]  newValues  =  iTypes.values();	      int[]    newValues    =    iTypes.get(value);    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  [Delete]  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	[Delete]	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  aughtInvalidPartialException( "The  field  type  must  not  be  null. ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  aughtInvalidPartialException( "The  field  type  must  not  be  null. ");  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	aughtInvalidPartialException( "The  field  type  must  not  be  null. ");	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  aughtExceptionHandler(new  IllegalArgumentException( " "));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {    [BUGGY]  aughtExceptionHandler(new  IllegalArgumentException( " "));  [BUGGY]    if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.25	427	427	1	replace	aughtExceptionHandler(new  IllegalArgumentException( " "));	      if(value    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
