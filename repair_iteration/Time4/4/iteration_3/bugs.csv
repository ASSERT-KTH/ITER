bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DurationField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  DurationField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	DurationField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);	  DurationField    loopRangeField    =    loopType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  DurationField  loopRangeField  =  iChronology.getDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  DurationField  loopRangeField  =  iChronology.getDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	DurationField  loopRangeField  =  iChronology.getDurationType().getField(iChronology);	  DurationField    loopRangeField    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  newTypes[compare]  =  loopRangeField.getDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  newTypes[compare]  =  loopRangeField.getDurationType().getField(iChronology);  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	newTypes[compare]  =  loopRangeField.getDurationType().getField(iChronology);	  newTypes[compare]    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  newTypes[compare]  =  rangeField.getDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  newTypes[compare]  =  rangeField.getDurationType().getField(iChronology);  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	newTypes[compare]  =  rangeField.getDurationType().getField(iChronology);	  newTypes[compare]    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  RangeField  loopRangeField  =  loopType.getDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  RangeField  loopRangeField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	RangeField  loopRangeField  =  loopType.getDurationType().getField(iChronology);	  RangeField    loopRangeField    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  RangeField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  RangeField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	RangeField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);	  RangeField    loopRangeField    =    fieldType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  RangeField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  RangeField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	RangeField  loopRangeField  =  iChronology.getRangeDurationType().getField(iChronology);	  RangeField    loopRangeField    =    fieldType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  int[]  newValues  =  loopRangeField.get(compare  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  loopRangeField.get(compare  +  1);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  loopRangeField.get(compare  +  1);	  int[]    newValues    =    iTypes.get(compare    +    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =  rangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  rangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  rangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes	  if(rangeField.isSupported())    {    int[]    newValues    =    rangeField.getValues();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    System.arraycopy(iTypes,    0,    newTypes    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  int[]  newValues  =  loopRangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  loopRangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  loopRangeField.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes	  if(rangeField.isSupported())    {    int[]    newValues    =    rangeField.getValues();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    System.arraycopy(iTypes,    0,    newTypes    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(loopRangeField,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  iTypes.get(loopRangeField,  values);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  iTypes.get(loopRangeField,  values);	  int[]    newValues    =    iTypes.get(loopRangeField);    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(loopRangeField,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  iTypes.get(loopRangeField,  value);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  iTypes.get(loopRangeField,  value);	  int[]    newValues    =    iTypes.get(loopRangeField);    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  int[]  newValues  =  loopRangeField.get(compare,  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  loopRangeField.get(compare,  value);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  loopRangeField.get(compare,  value);	  int[]    newValues    =    loopRangeField.get(compare);    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  int[]  newValues  =  rangeField.get(compare);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  rangeField.get(compare);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  rangeField.get(compare);	  int[]    newValues    =    loopRangeField.get(compare);    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  int[]  newValues  =  loopRangeField.get(iChronology);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  loopRangeField.get(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  loopRangeField.get(iChronology);	  int[]    newValues    =    loopRangeField.get(compare);    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  System.arraycopy(iTypes,  0,  newTypes	  if(rangeField.isSupported())    {    int[]    newValues    =    rangeField.getValues();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    System.arraycopy(iTypes,    0,    newTypes    	non-compiled	[CE]  	15	None	replace
18	[BUG]  [BUGGY]  int[]  newValues  =  rangeField.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  rangeField.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]      break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  rangeField.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  int[]  newValues  =  rangeField.get(loopRangeField);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  rangeField.get(loopRangeField);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  rangeField.get(loopRangeField);	  int[]    newValues    =    iTypes.get(loopRangeField);    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);	  DurationField    loopRangeField    =    rangeField.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  	1	None	replace
21	[BUG]  [BUGGY]  int[]  newValues  =  loopRangeField.get(loopRangeField);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);      [BUGGY]  int[]  newValues  =  loopRangeField.get(loopRangeField);  [BUGGY]      if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.5	449	449	1	replace	int[]  newValues  =  loopRangeField.get(loopRangeField);	  int[]    newValues    =    iTypes.get(loopRangeField);    	non-compiled	[CE]  	13	None	replace
