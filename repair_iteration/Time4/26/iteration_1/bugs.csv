bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int[]  newValues  =  getValues();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    int[]  newValues  =  getValues();  [BUGGY]  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	    int[]  newValues  =  getValues();		non-compiled	[CE]  	52	None	add
2	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.get(value);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    int[]  newValues  =  iTypes.get(value);  [BUGGY]  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	    int[]  newValues  =  iTypes.get(value);		non-compiled	[CE]  	52	None	add
3	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.get(iFieldIndex);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    int[]  newValues  =  iTypes.get(iFieldIndex);  [BUGGY]  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	    int[]  newValues  =  iTypes.get(iFieldIndex);		non-compiled	[CE]  	52	None	add
4	[BUG]  [BUGGY]  int  index  =  indexOfSupported(fieldType);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]  int  index  =  indexOfSupported(fieldType);  [BUGGY]  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	int  index  =  indexOfSupported(fieldType);	int  index  =  indexOf(fieldType);  	non-compiled	[CE]  	51	None	replace
5	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  value);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]  int  index  =  indexOf(fieldType,  value);  [BUGGY]  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	int  index  =  indexOf(fieldType,  value);	int  index  =  indexOf(fieldType);  	non-compiled	[CE]  	51	None	replace
6	[BUG]  [BUGGY]    int[]  newValues  =  iChronology.getValues();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  [BUGGY]    int[]  newValues  =  iChronology.getValues();  [BUGGY]  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2581988897471611	430	430	1	replace	    int[]  newValues  =  iChronology.getValues();		non-compiled	[CE]  	52	None	add
