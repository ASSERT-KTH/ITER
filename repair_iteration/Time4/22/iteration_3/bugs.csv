bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iFieldIndex  -  i  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iFieldIndex  -  i  -  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iFieldIndex  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    value    -    i    -    1);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [BUGGY]        Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);  [BUGGY]        Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  index);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  index);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  index);	  System.arraycopy(iValues,    0,    newValues,    0,    value);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);  [BUGGY]        Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    1);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  iChronology.validate(newPartial,  newTypes,  value);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	iChronology.validate(newPartial,  newTypes,  value);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i);	  System.arraycopy(iTypes,    i,    newTypes,    0,    newTypes.length    -    1);    	non-compiled	[CE]  	14	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length  -  i  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length  -  i  -  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length  -  i  -  1);	  System.arraycopy(iTypes,    0,    newTypes,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  index);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  iChronology.validate(newPartial,  newValues,  index);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	iChronology.validate(newPartial,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  iChronology.validate(newPartial,  newValues,  value  +  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	iChronology.validate(newPartial,  newValues,  value  +  1);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  iChronology.validate(newPartial,  newValues,  value  -  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	iChronology.validate(newPartial,  newValues,  value  -  1);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  +  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  +  1);	  System.arraycopy(iTypes,    0,    newTypes,    0,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value  -  1);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  value  -  1);	  System.arraycopy(iValues,    0,    newValues,    0,    value);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  +  1,  value);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);      [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  +  1,  value);  [BUGGY]      System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	461	461	1	replace	System.arraycopy(iTypes,  i,  newTypes,  0,  newTypes.length  -  i  +  1,  value);	  System.arraycopy(iTypes,    i,    newTypes,    0,    newTypes.length    -    i    +    1);    	non-compiled	[CE]  	7	None	replace
