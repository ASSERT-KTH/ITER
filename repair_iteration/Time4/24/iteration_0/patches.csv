bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newValues,  value);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  	47	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	  	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  	47	None	replace
3	[BUG]  [BUGGY]    newPartial.set(iChronology,  iFieldIndex,  newValues,  value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.set(iChronology,  iFieldIndex,  newValues,  value);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.set(iChronology,  iFieldIndex,  newValues,  value);		non-compiled	[CE]  	48	None	add
4	[BUG]  [BUGGY]    newPartial.set(iChronology,  iFieldIndex,  newValues);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.set(iChronology,  iFieldIndex,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.set(iChronology,  iFieldIndex,  newValues);		non-compiled	[CE]  	48	None	add
5	[BUG]  [BUGGY]    newPartial.setValue(iFieldIndex,  value);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.setValue(iFieldIndex,  value);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.setValue(iFieldIndex,  value);		non-compiled	[CE]  	48	None	add
6	[BUG]  [BUGGY]    newPartial.validate(newPartial);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.validate(newPartial);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.validate(newPartial);		non-compiled	[CE]  	48	None	add
7	[BUG]  [BUGGY]    newPartial.validate(newPartial,  values);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.validate(newPartial,  values);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.validate(newPartial,  values);		non-compiled	[CE]  	48	None	add
8	[BUG]  [BUGGY]    newPartial.setValue(value);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.setValue(value);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.setValue(value);		non-compiled	[CE]  	48	None	add
9	[BUG]  [BUGGY]    newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]    newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	    newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);		non-compiled	[CE]  	48	None	add
10	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newTypes);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	47	None	replace
11	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newValues,  values);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  values);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  cannot  find  symbol  values	47	None	replace
12	[BUG]  [BUGGY]  newPartial.validate(iChronology,  newValues);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  newPartial.validate(iChronology,  newValues);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  newValues);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
13	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  iChronology.validate(newPartial,  newValues,  index);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  index);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	47	None	replace
14	[BUG]  [BUGGY]  newPartial.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  newPartial.validate(newPartial,  newValues);  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  newValues);	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
15	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  not  a  statement	47	None	replace
16	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
17	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
18	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
19	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
20	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
21	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
23	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
24	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues	iChronology.validate(newPartial,  newValues);  	non-compiled	[CE]  ')'  expected	47	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
26	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
28	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
30	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	iChronology.validate(newPartial,  newValues);  	compilable	  [FE]  AssertionFailedError  	47	1	replace
