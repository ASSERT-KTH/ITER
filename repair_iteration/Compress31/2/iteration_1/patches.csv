bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2. ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  if(length  <  2)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(length  <  2)  {  return  0L;  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  2)  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  2)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  return  parseOctal(buffer,  offset,  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L;  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer.length);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer.length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
