bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  type  =  ct.getImplementedType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getImplementedType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getImplementedType();	  type    =    ct.getImplicitType();    	non-compiled	[CE]  ';'  expected	18	None	replace
2	[BUG]  [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ParchetState.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()?  null  :  ct.isConstructor();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()?  null  :  ct.isConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.isConstructor()?  null  :  ct.isConstructor();	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  Constructor  ct  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  ct  =  ct.getConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  ct  =  ct.getConstructor();	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	6	None	replace
6	[BUG]  [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ParchetState.checkState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ParchetState.checkState(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ParchetState.checkState(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  type  =  scope.getConstructorType(ct);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  scope.getConstructorType(ct);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  scope.getConstructorType(ct);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
9	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  scope);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
10	[BUG]  [BUGGY]  type  =  ct.getConstructorType(registry);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(registry);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(registry);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
11	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  operationScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  operationScope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  operationScope);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
12	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  registry);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  registry);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  registry);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
13	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  context);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  context);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  context);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
14	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  true);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  true);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
15	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor(n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor(n);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructor(n);	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getAssignedValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getAssignedValue();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getAssignedValue();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getDeclaredConstructor();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getDeclaredConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getDeclaredConstructor();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getRawClass();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getRawClass();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getRawClass();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
19	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor(scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructor(scope);	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getArgumentFunction();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getArgumentFunction();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getArgumentFunction();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  While(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  While(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	While(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
22	[BUG]  [BUGGY]  allowNonConstructor(ct)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowNonConstructor(ct)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowNonConstructor(ct)  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
23	[BUG]  [BUGGY]  allowNonConstructors(ct)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowNonConstructors(ct)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowNonConstructors(ct)  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
24	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor());	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
25	[BUG]  [BUGGY]  Parchet.checkState(ct.isConstructor());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.checkState(ct.isConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.checkState(ct.isConstructor());	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
26	[BUG]  [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isFunctionType());  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isFunctionType());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.checkState(ct.isConstructor()  ||  ct.isFunctionType());	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
27	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
28	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS_EXPECTED);    	non-compiled	[CE]  ';'  expected	34	None	replace
33	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS_EXPECTED);    	non-compiled	[CE]  ';'  expected	34	None	replace
34	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS_EXPECTED);    	non-compiled	[CE]  ';'  expected	34	None	replace
35	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS_EXPECTED);    	non-compiled	[CE]  ';'  expected	34	None	replace
36	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_NOT_OBJECT_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS_EXPECTED);    	non-compiled	[CE]  ';'  expected	34	None	replace
37	[BUG]  [BUGGY]  scope  =  ct.getFunctionScope();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getFunctionScope();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getFunctionScope();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
38	[BUG]  [BUGGY]  scope  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getConstructor();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
39	[BUG]  [BUGGY]  scope  =  ct.getScopeType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeType();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
40	[BUG]  [BUGGY]  scope  =  ct.getScopeInstance();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeInstance();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeInstance();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
41	[BUG]  [BUGGY]  scope  =  ct.getScope(scope);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScope(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScope(scope);	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
42	[BUG]  [BUGGY]  scope  =  ct.getParent();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getParent();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getParent();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
43	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getAssignedValue();  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getAssignedValue();  compiler.reportCodeChange();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getAssignedValue();  compiler.reportCodeChange();	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getParent();  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getParent();  compiler.reportCodeChange();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getParent();  compiler.reportCodeChange();	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getDeclaredConstructor();  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getDeclaredConstructor();  compiler.reportCodeChange();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getDeclaredConstructor();  compiler.reportCodeChange();	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE));  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE));	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getCurrentConstructor();  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getCurrentConstructor();  compiler.reportCodeChange();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getCurrentConstructor();  compiler.reportCodeChange();	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
48	[BUG]  [BUGGY]  arg  =  ct.getParameterType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getParameterType(CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getParameterType(CONSTRUCTOR_TYPE);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
49	[BUG]  [BUGGY]  arg  =  ct.getParameterType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getParameterType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getParameterType(UNKNOWN_TYPE);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
50	[BUG]  [BUGGY]  arg  =  ct.getConstructorType(0);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getConstructorType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getConstructorType(0);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
51	[BUG]  [BUGGY]  arg  =  ct.getRawParameterType(0);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getRawParameterType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getRawParameterType(0);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
52	[BUG]  [BUGGY]  arg  =  ct.getArgumentType(0);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getArgumentType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getArgumentType(0);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
53	[BUG]  [BUGGY]  type  =  ct.getDeclaredType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getDeclaredType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getDeclaredType();	  type    =    ct.getReturnType();    	non-compiled	[CE]  ';'  expected	8	None	replace
54	[BUG]  [BUGGY]  ct  =  ct.toMaibeFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toMaibeFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toMaibeFunctionType();	  ct    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	26	None	replace
55	[BUG]  [BUGGY]  ct  =  ct.toMainFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toMainFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toMainFunctionType();	  ct    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	26	None	replace
56	[BUG]  [BUGGY]  ct  =  constructorType.toConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  constructorType.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  constructorType.toConstructor();	  ct    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	26	None	replace
57	[BUG]  [BUGGY]  ct  =  type.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  type.toMaybeFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  type.toMaybeFunctionType();	  ct    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	26	None	replace
58	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  constructorType);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  constructorType);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    constructorType);    	non-compiled	[CE]  ';'  expected	21	None	replace
59	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  constructorType,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  constructorType,  scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  constructorType,  scope);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    constructorType);    	non-compiled	[CE]  ';'  expected	21	None	replace
60	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  INVALID_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  INVALID_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  INVALID_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    constructorType);    	non-compiled	[CE]  ';'  expected	21	None	replace
61	[BUG]  [BUGGY]  type  =  ct.getConstructorDeclaration();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorDeclaration();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorDeclaration();	  type    =    ct.getImplicitDeclaration();    	non-compiled	[CE]  ';'  expected	22	None	replace
62	[BUG]  [BUGGY]  type  =  ct.getImplicitTypeDeclaration();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getImplicitTypeDeclaration();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getImplicitTypeDeclaration();	  type    =    ct.getImplicitDeclaration();    	non-compiled	[CE]  ';'  expected	22	None	replace
63	[BUG]  [BUGGY]  type  =  ct.getJavaType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getJavaType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getJavaType();	  type    =    ct.getJSType();    	non-compiled	[CE]  ';'  expected	24	None	replace
64	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  TEMPLATE_TYPE_OF_THIS);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS);    	non-compiled	[CE]  ';'  expected	35	None	replace
65	[BUG]  [BUGGY]  type  =  ct.getConstructorType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED);	  type    =    ct.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_NOT_OBJECT_TYPE  :  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_NOT_OBJECT_TYPE  :  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_NOT_OBJECT_TYPE  :  TEMPLATE_TYPE_OF_THIS_EXPECTED;	  type    =    ct.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
68	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_OF_THIS_EXPECTED  :  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_OF_THIS_EXPECTED  :  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)?  TEMPLATE_TYPE_OF_THIS_EXPECTED  :  TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
69	[BUG]  [BUGGY]  type  =  constructorType.toMainType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  constructorType.toMainType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  constructorType.toMainType();	  type    =    ct.toMainType();    	non-compiled	[CE]  ';'  expected	38	None	replace
70	[BUG]  [BUGGY]  type  =  ct.getRawType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getRawType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getRawType();	  type    =    ct.getInterfaceType();    	non-compiled	[CE]  ';'  expected	39	None	replace
71	[BUG]  [BUGGY]  While(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  While(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	While(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  allowNonConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowNonConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowNonConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
74	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.isConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.isConstructor();	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
75	[BUG]  [BUGGY]  type  =  ct.getImplementedConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getImplementedConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getImplementedConstructor();	  type    =    ct.getImplicitConstructor();    	non-compiled	[CE]  ';'  expected	19	None	replace
76	[BUG]  [BUGGY]  type  =  constructorType.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  constructorType.toMaybeFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  constructorType.toMaybeFunctionType();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
77	[BUG]  [BUGGY]  Type  t  =  ct.toConstructor();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Type  t  =  ct.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Type  t  =  ct.toConstructor();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
78	[BUG]  [BUGGY]  type  =  context.toConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  context.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  context.toConstructor();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
79	[BUG]  [BUGGY]  type  =  scope.toConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  scope.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  scope.toConstructor();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
80	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getConstructor(n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getConstructor(n);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getConstructor(n);	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
81	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getConstructor(scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getConstructor(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getConstructor(scope);	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
82	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getConstructorInstance();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getConstructorInstance();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getConstructorInstance();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
83	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getCurrentConstructor();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getCurrentConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getCurrentConstructor();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
84	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.toConstructor();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.toConstructor();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
85	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getConstructorScope();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getConstructorScope();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getConstructorScope();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
86	[BUG]  [BUGGY]  type  =  ct.getConstructorType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(TEMPLATE_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(TEMPLATE_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE);    	non-compiled	[CE]  ';'  expected	20	None	replace
87	[BUG]  [BUGGY]  type  =  ct.getTypeFactory().getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeFactory().getNativeType(TEMPLATE_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeFactory().getNativeType(TEMPLATE_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE);    	non-compiled	[CE]  ';'  expected	20	None	replace
88	[BUG]  [BUGGY]  type  =  ct.getNativeType(NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(NO_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(NO_OBJECT_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE);    	non-compiled	[CE]  ';'  expected	20	None	replace
89	[BUG]  [BUGGY]  type  =  ct.getConstructorType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(UNKNOWN_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE);    	non-compiled	[CE]  ';'  expected	20	None	replace
90	[BUG]  [BUGGY]  type  =  ct.toDeclaredType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toDeclaredType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toDeclaredType();	  type    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  2;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  2;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)+  2;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
92	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE)+  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE)+  1;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE)+  1;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
93	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)/  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)/  1;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)/  1;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
94	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  3;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  3;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)+  3;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
95	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  4;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)+  4;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)+  4;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
96	[BUG]  [BUGGY]  ct  =  ct.toConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toConstructor();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
97	[BUG]  [BUGGY]  ct  =  ct.toConstructorType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toConstructorType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toConstructorType();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
98	[BUG]  [BUGGY]  ct  =  ct.toFunctionType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toFunctionType();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
99	[BUG]  [BUGGY]  ct  =  ct.toDeclaredType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toDeclaredType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toDeclaredType();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
100	[BUG]  [BUGGY]  type  =  constructorType.toConstructorType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  constructorType.toConstructorType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  constructorType.toConstructorType();	  type    =    ct.toConstructorType();    	non-compiled	[CE]  ';'  expected	37	None	replace
101	[BUG]  [BUGGY]  type  =  ct.getConstructorType(NO_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(NO_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(NO_TYPE);	  type    =    ct.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	17	None	replace
102	[BUG]  [BUGGY]  type  =  ct.getTypeFactory().getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeFactory().getNativeType(NO_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeFactory().getNativeType(NO_TYPE);	  type    =    ct.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	17	None	replace
103	[BUG]  [BUGGY]  type  =  ct.getConstructorType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(CONSTRUCTOR_TYPE);	  type    =    ct.getNativeType(CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
104	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  CONSTRUCTOR_TYPE);	  type    =    ct.getNativeType(CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
105	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  UNKNOWN_TYPE);	  type    =    ct.getNativeType(CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
106	[BUG]  [BUGGY]  type  =  ct.getInstanceType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getInstanceType(CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getInstanceType(CONSTRUCTOR_TYPE);	  type    =    ct.getNativeType(CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
107	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  FUNCTION_LITERAL_UNDEFINED_THIS);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	16	None	replace
108	[BUG]  [BUGGY]  ct.setConstructor(false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(false);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(false);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
109	[BUG]  [BUGGY]  ct.setConstructor(true,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(true,  scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(true,  scope);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
110	[BUG]  [BUGGY]  ct.setConstructor(true,  false);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(true,  false);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(true,  false);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
111	[BUG]  [BUGGY]  ct.setConstructor(true,  true);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(true,  true);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(true,  true);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
112	[BUG]  [BUGGY]  ct.setConstructor(n);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(n);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(n);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
113	[BUG]  [BUGGY]  ct  =  ct.getFunctionType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getFunctionType();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
114	[BUG]  [BUGGY]  ct  =  ct.getOwnerFunction();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getOwnerFunction();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getOwnerFunction();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
115	[BUG]  [BUGGY]  ct  =  ct.getRawClass();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getRawClass();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getRawClass();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
116	[BUG]  [BUGGY]  ct  =  ct.getConstructor(scope);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getConstructor(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getConstructor(scope);	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
117	[BUG]  [BUGGY]  ct  =  ct.getDeclaredType();  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getDeclaredType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getDeclaredType();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
118	[BUG]  [BUGGY]  ct  =  ct.getConstructorType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getConstructorType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getConstructorType();	  ct    =    ct.getInstanceType();    	non-compiled	[CE]  ';'  expected	32	None	replace
119	[BUG]  [BUGGY]  ct  =  ct.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getNativeType(UNKNOWN_TYPE);	  ct    =    ct.getInstanceType();    	non-compiled	[CE]  ';'  expected	32	None	replace
120	[BUG]  [BUGGY]  type  =  ct.toType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toType();	  type    =    ct.toJavaType();    	non-compiled	[CE]  ';'  expected	10	None	replace
121	[BUG]  [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
122	[BUG]  [BUGGY]  type  =  ct.getConstructor().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructor().getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructor().getNativeType(UNKNOWN_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
123	[BUG]  [BUGGY]  type  =  registry.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  registry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  registry.getNativeType(UNKNOWN_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
124	[BUG]  [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(NO_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeRegistry().getNativeType(NO_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
125	[BUG]  [BUGGY]  type  =  ct.getConstructorRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorRegistry().getNativeType(UNKNOWN_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
126	[BUG]  [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  constructorType);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
127	[BUG]  [BUGGY]  type  =  ct.getNativeType(NO_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(NO_TYPE,  constructorType);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(NO_TYPE,  constructorType);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    constructorType);    	non-compiled	[CE]  ';'  expected	21	None	replace
128	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getParameterType(0);  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getParameterType(0);  compiler.reportCodeChange();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getParameterType(0);  compiler.reportCodeChange();	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
129	[BUG]  [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  INVALID_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  INVALID_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(CONSTRUCTOR_TYPE,  INVALID_TYPE);	  type    =    ct.getNativeType(CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
130	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  &&  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  &&  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  &&  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
131	[BUG]  [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
132	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
133	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
134	[BUG]  [BUGGY]  Parchet.IsConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.IsConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.IsConstructor(ct)  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
135	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isLocal())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isLocal())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isLocal())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
136	[BUG]  [BUGGY]  type  =  ct.getNativeType(OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(OBJECT_TYPE);	  type    =    ct.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	17	None	replace
137	[BUG]  [BUGGY]  type  =  ct.getNativeType(STRING_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(STRING_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(STRING_TYPE);	  type    =    ct.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	17	None	replace
138	[BUG]  [BUGGY]  type  =  constructorType.toJavaType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  constructorType.toJavaType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  constructorType.toJavaType();	  type    =    ct.toJavaType();    	non-compiled	[CE]  ';'  expected	10	None	replace
139	[BUG]  [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
140	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
141	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isUnknownType())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
142	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
143	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isStatement())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
144	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionPrototype())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionPrototype())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionPrototype())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
145	[BUG]  [BUGGY]  scope  =  ct.getScopeRoot();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeRoot();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeRoot();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
146	[BUG]  [BUGGY]  scope  =  ct.getScopeInput();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeInput();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeInput();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
147	[BUG]  [BUGGY]  ct  =  ct.toDeserialize();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toDeserialize();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toDeserialize();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
148	[BUG]  [BUGGY]  type  =  ct.getConstructorType(functionScope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(functionScope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(functionScope);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
149	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  constructorType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  constructorType);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  constructorType);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
150	[BUG]  [BUGGY]  type  =  ct.getConstructorType(n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(n);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(n);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
151	[BUG]  [BUGGY]  arg  =  ct.getGenericParameterType(0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getGenericParameterType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getGenericParameterType(0);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
152	[BUG]  [BUGGY]  arg  =  ct.getDeclaredType(0);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  arg  =  ct.getDeclaredType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	arg  =  ct.getDeclaredType(0);	  arg    =    ct.getParameterType(0);    	non-compiled	[CE]  ';'  expected	33	None	replace
153	[BUG]  [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
154	[BUG]  [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;	  type    =    ct.getTypeRegistry().getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
155	[BUG]  [BUGGY]  ct  =  ct.getImplicitPrototype();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getImplicitPrototype();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getImplicitPrototype();	  ct    =    ct.getInstanceType();    	non-compiled	[CE]  ';'  expected	32	None	replace
156	[BUG]  [BUGGY]  type  =  ct.getNativeType(NO_TYPE,  CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(NO_TYPE,  CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(NO_TYPE,  CONSTRUCTOR_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    CONSTRUCTOR_TYPE);    	non-compiled	[CE]  ';'  expected	16	None	replace
157	[BUG]  [BUGGY]  type  =  ct.toMaybeType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toMaybeType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toMaybeType();	  type    =    ct.toMainType();    	non-compiled	[CE]  ';'  expected	38	None	replace
158	[BUG]  [BUGGY]  type  =  ct.getImplicitConstructorType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getImplicitConstructorType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getImplicitConstructorType();	  type    =    ct.getImplicitConstructor();    	non-compiled	[CE]  ';'  expected	19	None	replace
159	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
160	[BUG]  [BUGGY]  Parchet.IsConstructor(ct)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.IsConstructor(ct)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.IsConstructor(ct)  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
161	[BUG]  [BUGGY]  allowNonConstructorType(ct)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowNonConstructorType(ct)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowNonConstructorType(ct)  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
162	[BUG]  [BUGGY]  ParchetState.checkState(ct.isConstructor());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ParchetState.checkState(ct.isConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ParchetState.checkState(ct.isConstructor());	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
163	[BUG]  [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE)+  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE)+  1;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(TEMPLATE_TYPE)+  1;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
164	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE)?  constructorType.toMaybeFunctionType()  :  ct.toConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE)?  constructorType.toMaybeFunctionType()  :  ct.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  getNativeType(UNKNOWN_TYPE)?  constructorType.toMaybeFunctionType()  :  ct.toConstructor();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
165	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  ct.toConstructor());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  ct.toConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  ct.toConstructor());	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
166	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  ct.toMaybeFunctionType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  ct.toMaybeFunctionType());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  ct.toMaybeFunctionType());	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
167	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE)?  ct.toConstructor()  :  constructorType.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE)?  ct.toConstructor()  :  constructorType.toMaybeFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  getNativeType(UNKNOWN_TYPE)?  ct.toConstructor()  :  constructorType.toMaybeFunctionType();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
168	[BUG]  [BUGGY]  ct  =  ct.getParent();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getParent();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getParent();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
169	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getOwnerFunction();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getOwnerFunction();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getOwnerFunction();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
170	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getParameterType(0);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getParameterType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getParameterType(0);	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
171	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getOwnerFunction();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getOwnerFunction();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getOwnerFunction();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
172	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.getOwnConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.getOwnConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.getOwnConstructor();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
173	[BUG]  [BUGGY]  [Delete]  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  [Delete]  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	[Delete]	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
174	[BUG]  [BUGGY]  allowState(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowState(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowState(ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
175	[BUG]  [BUGGY]  allowState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowState(ct.isConstructor()  ||  ct.isConstructor())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
176	[BUG]  [BUGGY]  allowState(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowState(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowState(ct.isConstructor()  ||  ct.isInterface())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
177	[BUG]  [BUGGY]  allowState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowState(ct.isConstructor()  ||  ct.isFunctionType())  {  throw  new  IllegalStateException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
178	[BUG]  [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor());  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.checkState(ct.isConstructor()  ||  ct.isConstructor());	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	6	None	replace
179	[BUG]  [BUGGY]  allowState(ct.isConstructor()  ||  ct.isConstructor());  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowState(ct.isConstructor()  ||  ct.isConstructor());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowState(ct.isConstructor()  ||  ct.isConstructor());	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	6	None	replace
180	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(UNKNOWN_TYPE,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
181	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(sourceName,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(sourceName,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructor();  compiler.report(JSError.make(sourceName,  n,  FUNCTION_LITERAL_UNDEFINED_THIS));	  Constructor    <?>    arg    =    ct.getConstructor();    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	5	None	replace
182	[BUG]  [BUGGY]  type  =  ct.getFunctionDeclaration();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getFunctionDeclaration();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getFunctionDeclaration();	  type    =    ct.getImplicitDeclaration();    	non-compiled	[CE]  ';'  expected	22	None	replace
183	[BUG]  [BUGGY]  scope  =  ct.getScopeExpression();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeExpression();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeExpression();	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
184	[BUG]  [BUGGY]  scope  =  ct.getScopeInstance(scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeInstance(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeInstance(scope);	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
185	[BUG]  [BUGGY]  scope  =  ct.getScopeRoot(scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  scope  =  ct.getScopeRoot(scope);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	scope  =  ct.getScopeRoot(scope);	  scope    =    ct.getScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
186	[BUG]  [BUGGY]  ct.setConstructor(null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(null);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(null);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
187	[BUG]  [BUGGY]  ct.setConstructor(true,  null);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct.setConstructor(true,  null);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct.setConstructor(true,  null);	  ct.setConstructor(true);    	non-compiled	[CE]  ';'  expected	29	None	replace
188	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    constructorType);    	non-compiled	[CE]  ';'  expected	21	None	replace
189	[BUG]  [BUGGY]  type  =  ct.type.toConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.type.toConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.type.toConstructor();	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
190	[BUG]  [BUGGY]  type  =  ct.toDeclaredType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toDeclaredType(CONSTRUCTOR_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toDeclaredType(CONSTRUCTOR_TYPE);	  type    =    constructorType.toConstructor();    	non-compiled	[CE]  ';'  expected	23	None	replace
191	[BUG]  [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(TEMPLATE_TYPE_OF_THIS);	  type    =    ct.getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
192	[BUG]  [BUGGY]  ct  =  ct.getScope();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.getScope();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.getScope();	  ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
193	[BUG]  [BUGGY]  type  =  ct.getNativeType(ARRAY_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(ARRAY_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(ARRAY_TYPE);	  type    =    ct.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	17	None	replace
194	[BUG]  [BUGGY]  type  =  ct.getGenericType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getGenericType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getGenericType();	  type    =    ct.getJSType();    	non-compiled	[CE]  ';'  expected	24	None	replace
195	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructorParameterType(0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructorParameterType(0);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructorParameterType(0);	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
196	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getConstructorParameters();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  arg  =  ct.getConstructorParameters();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  arg  =  ct.getConstructorParameters();	  Constructor    <?>    arg    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	2	None	replace
197	[BUG]  [BUGGY]  type  =  ct.toFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toFunctionType();	  type    =    ct.toJavaType();    	non-compiled	[CE]  ';'  expected	10	None	replace
198	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)-  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE)-  1;  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE)-  1;	  type    =    ct.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
199	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  n);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  n);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
200	[BUG]  [BUGGY]  type  =  ct.getConstructorType(scope,  compiler);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getConstructorType(scope,  compiler);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getConstructorType(scope,  compiler);	  type    =    ct.getConstructorType(scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
201	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isFunction())  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
202	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
203	[BUG]  [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType());  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Parchet.isTrue(ct.isConstructor()  ||  ct.isFunctionType());	  if(ct.isConstructor()    ||    ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
204	[BUG]  [BUGGY]  ct  =  ct.toMemberFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toMemberFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toMemberFunctionType();	  ct    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	26	None	replace
205	[BUG]  [BUGGY]  allowNonConstructors(ct)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  allowNonConstructors(ct)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	allowNonConstructors(ct)  {  throw  new  IllegalArgumentException( " ");  }	  if(ct.isConstructor())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
206	[BUG]  [BUGGY]  type  =  ct.getNativeType(NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(NOT_OBJECT_TYPE);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(NOT_OBJECT_TYPE);	  type    =    ct.getNativeType(TEMPLATE_TYPE);    	non-compiled	[CE]  ';'  expected	20	None	replace
207	[BUG]  [BUGGY]  type  =  ct.toOtherFunctionType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.toOtherFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.toOtherFunctionType();	  type    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	9	None	replace
208	[BUG]  [BUGGY]  Constructor  <?>  ct  =  ct.createConstructor();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  Constructor  <?>  ct  =  ct.createConstructor();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	Constructor  <?>  ct  =  ct.createConstructor();	  Constructor    <?>    ct    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	4	None	replace
209	[BUG]  [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_OF_THIS);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_OF_THIS);  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	type  =  ct.getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE_OF_THIS);	  type    =    ct.getNativeType(UNKNOWN_TYPE,    TEMPLATE_TYPE_OF_THIS);    	non-compiled	[CE]  ';'  expected	35	None	replace
210	[BUG]  [BUGGY]  ct  =  ct.toOtherFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {      [BUGGY]  ct  =  ct.toOtherFunctionType();  [BUGGY]      }  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1054	1054	1	replace	ct  =  ct.toOtherFunctionType();	  ct    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	27	None	replace
