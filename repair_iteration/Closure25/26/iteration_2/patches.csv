bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!objectType.hasLendsName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName()  ||  hasLendsName)  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  if(!objectType.hasName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasName()  ||  hasLendsName)  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  if(!hasLendsName  ||!registry.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!registry.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!registry.hasReferenceName())  {	  if(!hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	50	None	replace
4	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {	  if(!hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	50	None	replace
5	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
6	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
7	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
8	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
9	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
10	[BUG]  [BUGGY]  if(n.hasReferenceName()  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
11	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
12	[BUG]  [BUGGY]  if(!hasLendsName  ||  n.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  n.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  n.hasReferenceName())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
13	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasReferenceName())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
14	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
15	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasType())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
16	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
17	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	22	None	replace
18	[BUG]  [BUGGY]  if(hasLendsName  &&  scope.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  scope.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  scope.hasReferenceName())  {	  if(hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
19	[BUG]  [BUGGY]  if(hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {	  if(hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
20	[BUG]  [BUGGY]  if(hasLendsName  &&  type.isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  type.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  type.isInterface())  {	  if(hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
21	[BUG]  [BUGGY]  if(hasLendsName  &&  type.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  type.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  type.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasOwnSideEffects())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
23	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasOwnSideEffects())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
24	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
25	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasOwnSideEffects())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
26	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasOwnSideEffects())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
27	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  scope.hasChildren())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  scope.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  scope.hasChildren())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
28	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
29	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()!=  0)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()!=  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().length()!=  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
30	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  objectType.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
31	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
32	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  >  0)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  >  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().length()  >  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
33	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  >=  0)  {  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  >=  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().length()  >=  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
34	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
35	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasDeclaration())  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
36	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType!=  null  &&  objectType.hasDeclaration())  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
37	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
38	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
39	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	47	None	replace
40	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isConstructor())  {	  if    (!hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	47	None	replace
41	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||  scope.isConstructor())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||  scope.isConstructor())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isInterface()  ||  scope.isConstructor())  {	  if    (!hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	47	None	replace
42	[BUG]  [BUGGY]  if(!objectType.hasLendsName  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName  &&  hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
43	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
44	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
45	[BUG]  [BUGGY]  if(!hasLendsName  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
46	[BUG]  [BUGGY]  if(!objectType.hasLendsName  ||  hasLendsName  ||!scope.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName  ||  hasLendsName  ||!scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName  ||  hasLendsName  ||!scope.isInterface())  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
47	[BUG]  [BUGGY]  if(!hasLendsName  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
48	[BUG]  [BUGGY]  if(hasLendsName  ||  type.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  type.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  type.isInterface())  {	  if(hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
49	[BUG]  [BUGGY]  if(hasLendsName  ||  type.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  type.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  type.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
50	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
51	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isConstructor())  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
52	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isUnknownType())  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
53	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isContainer())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isContainer())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isContainer())  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
54	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  scope.isFunctionDeclaration())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  scope.isFunctionDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  ||  scope.isFunctionDeclaration())  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
55	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
56	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
57	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  &&  hasObjName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  &&  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasReferenceName()  &&  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
58	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
59	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
60	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
61	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasObjName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasObjName())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
62	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
63	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasObjName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasObjName())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
64	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasObjName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasObjName())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
65	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  qObjName.length()  ==  0)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  qObjName.length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  qObjName.length()  ==  0)  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
66	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
67	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ==  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()  ==  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
68	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
69	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
70	[BUG]  [BUGGY]  if(hasLendsName  &&  scope.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  scope.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  scope.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
71	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()!=  null  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
72	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
73	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaredProperty( "object "))  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
74	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
75	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaredProperty( ".object "))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasDeclaredProperty( ".object "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasDeclaredProperty( ".object "))  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
76	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
77	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
78	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
79	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
80	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasLendsName()  ||  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
81	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
82	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
83	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
84	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
85	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
86	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
87	[BUG]  [BUGGY]  if(!hasLendsName  ||  type.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  type.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  type.isInterface())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
88	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
89	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
90	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
91	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
92	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {	  if(!hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
93	[BUG]  [BUGGY]  if  (!hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
94	[BUG]  [BUGGY]  if  (!hasLendsName  &&  scope.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  scope.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  scope.hasReferenceName()  &&  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
95	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasChildren())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
96	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasChildren())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
97	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType!=  null  &&  objectType.hasChildren())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
98	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
99	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
100	[BUG]  [BUGGY]  if(hasLendsName  &&  scope.hasChildren())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  scope.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  scope.hasChildren())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
101	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
102	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  ||  objectType.hasLendsName()  ||  hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
103	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  ||  objectType.hasName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||  objectType.hasName()  ||  hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
104	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
105	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasKey())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasKey())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasKey())  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
106	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasKey())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasKey())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasKey())  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
107	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasKey()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasKey()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasKey()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
108	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasValue())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasValue())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasValue())  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
109	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasKey()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasKey()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasKey()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
110	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
111	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.isUnknownType())  {	  if(!hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
112	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.isConstructor())  {	  if(!hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
113	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	59	None	replace
114	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
115	[BUG]  [BUGGY]  if  (hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (hasLendsName  &&  objectType.hasReferenceName()  ||  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
116	[BUG]  [BUGGY]  if  (!hasLendsName  &&  scope.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
117	[BUG]  [BUGGY]  if  (hasLendsName  &&  scope.isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (hasLendsName  &&  scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (hasLendsName  &&  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
118	[BUG]  [BUGGY]  if  (!hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
119	[BUG]  [BUGGY]  if  (hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (hasLendsName  &&  scope.hasReferenceName()  &&  objectType.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
120	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
121	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType!=  null  &&  objectType.hasObjName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType!=  null  &&  objectType.hasObjName())  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
122	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
123	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	26	None	replace
124	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	26	None	replace
125	[BUG]  [BUGGY]  if(!objectType.hasLendsName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName()  ||!hasLendsName)  {	  if(!objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
126	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
127	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
128	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  >>  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  >>  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  >>  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
129	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  [Delete]  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  [Delete]  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  [Delete]  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
130	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  >=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  >=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  >=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
131	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isInterface()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
132	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isPrimitive())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isPrimitive())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isPrimitive())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
133	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isUnknownType())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
134	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isConstructor())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
135	[BUG]  [BUGGY]  if(!hasLendsName  &&  scope.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  scope.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  scope.hasReferenceName())  {	  if(!hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
136	[BUG]  [BUGGY]  if(!hasLendsName  &&  type.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  type.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  type.isInterface())  {	  if(!hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
137	[BUG]  [BUGGY]  if(!hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  type.getReferenceName().equals(objectType.getReferenceName()))  {	  if(!hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
138	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
139	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
140	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
141	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
142	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
143	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo().hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
144	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
145	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	60	None	replace
146	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	25	None	replace
147	[BUG]  [BUGGY]  if(!objectType.hasLendsName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName()  &&  hasLendsName)  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
148	[BUG]  [BUGGY]  if(!objectType.hasName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasName()  &&  hasLendsName)  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
149	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  qObjName.equals( " "))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  qObjName.equals( " "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  &&  hasLendsName  &&  qObjName.equals( " "))  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
150	[BUG]  [BUGGY]  if(objectType.hasReferenceName()  ||  hasLendsName  &&  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType.hasReferenceName()  ||  hasLendsName  &&  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType.hasReferenceName()  ||  hasLendsName  &&  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
151	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
152	[BUG]  [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
153	[BUG]  [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName  ||  objectType.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName  ||  objectType.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  ||  hasLendsName  ||  objectType.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
154	[BUG]  [BUGGY]  if(objectType.hasReferenceName()  &&  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType.hasReferenceName()  &&  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType.hasReferenceName()  &&  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
155	[BUG]  [BUGGY]  if(type.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
156	[BUG]  [BUGGY]  if(n.hasJSDocInfo()  ||  hasLendsName  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasJSDocInfo()  ||  hasLendsName  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasJSDocInfo()  ||  hasLendsName  ||  objectType.hasReferenceName())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
157	[BUG]  [BUGGY]  if(hasLendsName  &&!registry.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!registry.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!registry.hasReferenceName())  {	  if(hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
158	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {	  if(hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
159	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.isInterface())  {	  if(hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
160	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {	  if(hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
161	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasAssignmentOp())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasAssignmentOp())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasAssignmentOp())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
162	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasAssignmentOp())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasAssignmentOp())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasAssignmentOp())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
163	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
164	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasAssignmentOp())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasAssignmentOp())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasAssignmentOp())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
165	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasMemberName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasMemberName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  hasMemberName)  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
166	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  &&  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
167	[BUG]  [BUGGY]  if(hashLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hashLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hashLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
168	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasDeclaration()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
169	[BUG]  [BUGGY]  if(!type.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!type.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasReferenceName()  ||!hasLendsName)  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
170	[BUG]  [BUGGY]  if(!type.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!type.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasReferenceName()  ||  hasLendsName)  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
171	[BUG]  [BUGGY]  if(!hasLendsName  &&!type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!type.hasReferenceName())  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
172	[BUG]  [BUGGY]  if(hasLendsName  &&!type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!type.hasReferenceName())  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
173	[BUG]  [BUGGY]  if(!type.hasName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!type.hasName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasName()  &&!hasLendsName)  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
174	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	23	None	replace
175	[BUG]  [BUGGY]  if(!hasLendsName  &&  type.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  type.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  type.hasReferenceName()  ||  hasLendsName)  {	  if(type.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
176	[BUG]  [BUGGY]  if(type.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type.hasReferenceName()  &&  hasLendsName)  {	  if(type.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
177	[BUG]  [BUGGY]  if(scope.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(scope.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(scope.hasReferenceName()  ||  hasLendsName)  {	  if(type.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
178	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
179	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
180	[BUG]  [BUGGY]  if(hasLendsName  &&  scope.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  scope.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  scope.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
181	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasDeclaration())  {	  if(hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
182	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType  ==  null  &&  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType  ==  null  &&  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType  ==  null  &&  objectType.hasDeclaration())  {	  if(hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
183	[BUG]  [BUGGY]  if(!hasLendsName  &&!registry.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!registry.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!registry.hasReferenceName())  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
184	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.isInterface())  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
185	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasReferenceName()  &&  hasLendsName)  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
186	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasName())  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
187	[BUG]  [BUGGY]  if(!objectType.hasKey()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasKey()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasKey()  &&!hasLendsName)  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
188	[BUG]  [BUGGY]  if(!objectType.hasName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasName()  ||!hasLendsName)  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
189	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.hasName())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!objectType.hasName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.hasName())  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
190	[BUG]  [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  ||  hasLendsName)  {	  if(n.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
191	[BUG]  [BUGGY]  if(n.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  ||!hasLendsName)  {	  if(n.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
192	[BUG]  [BUGGY]  if(n.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  &&  hasLendsName)  {	  if(n.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
193	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
194	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
195	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getLendsName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getLendsName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getLendsName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
196	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasLendsName())  {	  if(!objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
197	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&!objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.hasLendsName())  {	  if(!objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
198	[BUG]  [BUGGY]  if(!objectType.hasObjName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasObjName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasObjName()  &&!hasLendsName)  {	  if(!objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
199	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(type.getReferenceName()))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(type.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(type.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
200	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
201	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.getReferenceName().equals(objectType.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
202	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName())||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName())||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName())||  hasLendsName)  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
203	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(valueType.getReferenceName()))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(valueType.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(valueType.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
204	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(scope.getReferenceName()))  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(scope.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(scope.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
205	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
206	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
207	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
208	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
209	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasReferenceName()  &&  objectType.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
210	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
211	[BUG]  [BUGGY]  if(!objectType.hasLendsName()  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasLendsName()  ||!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName()  ||!objectType.hasReferenceName())  {	  if(!objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
212	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  }  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  }  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  }  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
213	[BUG]  [BUGGY]  if(n.hasLendsName()  &&!hasReferenceName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(n.hasLendsName()  &&!hasReferenceName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasLendsName()  &&!hasReferenceName)  {	  if(n.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
214	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.hasName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!objectType.hasName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.hasName())  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
215	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasKey()  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasKey()  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasKey()  ||  objectType.hasReferenceName()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasObjName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
216	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.hasLendsName())  {	  if(!objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
217	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "value "))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "value "))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaredProperty( "value "))  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
218	[BUG]  [BUGGY]  if(hasLendsName  ||!registry.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!registry.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!registry.hasReferenceName())  {	  if(hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
219	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
220	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
221	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
222	[BUG]  [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
223	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasJSDocInfo())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
224	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasDeclaration())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasDeclaration())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
225	[BUG]  [BUGGY]  if(hasLendsName  &&  type.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  type.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  type.getReferenceName()!=  null)  {	  if(hasLendsName    &&    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
226	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.isInterface())  {	  if(!hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	50	None	replace
227	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.hasDeclaration())  {	  if(!hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	50	None	replace
228	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
229	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
230	[BUG]  [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type  ==  null  ||!hasLendsName  ||  type.hasReferenceName())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
231	[BUG]  [BUGGY]  if(type!=  null  ||!hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type!=  null  ||!hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type!=  null  ||!hasLendsName  ||  type.hasReferenceName())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
232	[BUG]  [BUGGY]  if(type!=  null  &&!hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type!=  null  &&!hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type!=  null  &&!hasLendsName  ||  type.hasReferenceName())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
233	[BUG]  [BUGGY]  if(type!=  null  &&!hasLendsName  &&  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type!=  null  &&!hasLendsName  &&  type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type!=  null  &&!hasLendsName  &&  type.hasReferenceName())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
234	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasDeclaration()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
235	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasDeclaration()  ||  isInterface())  {	  if(hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
236	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
237	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
238	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	23	None	replace
239	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	23	None	replace
240	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
241	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
242	[BUG]  [BUGGY]  if  (!hasLendsName  &&  registry.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  registry.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  registry.hasReferenceName()  &&  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
243	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
244	[BUG]  [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type  ==  null  ||!hasLendsName  ||  objectType.hasDeclaration())  {	  if(!hasLendsName    ||    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
245	[BUG]  [BUGGY]  if(hashLendsName  &&  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hashLendsName  &&  objectType.hasOwnSideEffects())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hashLendsName  &&  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
246	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isInterface())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
247	[BUG]  [BUGGY]  if(type!=  null  &&!type.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type!=  null  &&!type.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type!=  null  &&!type.hasReferenceName()  &&!hasLendsName)  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
248	[BUG]  [BUGGY]  if(hashLendsName  &&  objectType.hasAssignmentOp())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hashLendsName  &&  objectType.hasAssignmentOp())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hashLendsName  &&  objectType.hasAssignmentOp())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
249	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
250	[BUG]  [BUGGY]  if(type  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
251	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  ||  objectType.hasDeclaration()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||  objectType.hasDeclaration()  ||  hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
252	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  qObjName!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  qObjName!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  &&  qObjName!=  null)  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
253	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
254	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()!=  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	60	None	replace
255	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo()  ==  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	60	None	replace
256	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  objectType.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  objectType.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
257	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName(scope)!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName(scope)!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName(scope)!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
258	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isInterface()  &&  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	47	None	replace
259	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||!type.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface()  ||!type.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isInterface()  ||!type.isInterface())  {	  if    (!hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	47	None	replace
260	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName())    {    	non-compiled	[CE]  ';'  expected	51	None	replace
261	[BUG]  [BUGGY]  if(!type.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!type.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasReferenceName()  &&  hasLendsName)  {	  if(type.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
262	[BUG]  [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type  ==  null  ||!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type  ==  null  ||!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
263	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
264	[BUG]  [BUGGY]  if(!objectType.hasName  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasName  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasName  ||  hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
265	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasLendsName)  {	  if(!objectType.hasLendsName    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
266	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
267	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
268	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
269	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasDeclaration())  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
270	[BUG]  [BUGGY]  if(type  ==  null  ||  hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(type  ==  null  ||  hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type  ==  null  ||  hasLendsName  ||  type.hasReferenceName())  {	  if(hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
271	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasArg())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasArg())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasArg())  {	  if(hasLendsName    &&    objectType.hasKey())    {    	non-compiled	[CE]  ';'  expected	44	None	replace
272	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	26	None	replace
273	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasChildren())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
274	[BUG]  [BUGGY]  if(objectType  ==  null  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType  ==  null  ||!objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||!objectType.hasReferenceName()  ||  hasLendsName)  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
275	[BUG]  [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&!objectType.hasReferenceName()  ||  hasLendsName)  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
276	[BUG]  [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&!objectType.hasReferenceName()  &&  hasLendsName)  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
277	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo().isInterface())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
278	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName(scope)!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName(scope)!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName(scope)!=  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	59	None	replace
279	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||!objectType.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||!objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isInterface()  ||!objectType.isInterface())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
280	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	25	None	replace
281	[BUG]  [BUGGY]  if(!hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  n.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
282	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(n.getReferenceName()))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(n.getReferenceName()))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(n.getReferenceName()))  {	  if(hasLendsName    &&    objectType.getReferenceName().equals(objectType.getReferenceName()))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
283	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
284	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&!hasLendsName)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
285	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName()  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName()  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName()  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
286	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName)&&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName)&&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName)&&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasLendsName    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	34	None	replace
287	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
288	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
289	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasDeclaration())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
290	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
291	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
292	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.isInterface()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface()  ||  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {	  if(hasLendsName    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
293	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
294	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
295	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasMember()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasMember()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasMember()  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
296	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasJSDocInfo()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
297	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  isInterface())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
298	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName()  ||  n.hasChildren())  {	  if(hasLendsName    ||    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
299	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructor();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	25	None	replace
300	[BUG]  [BUGGY]  if(!type.hasLendsName  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!type.hasLendsName  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasLendsName  ||  hasLendsName)  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
301	[BUG]  [BUGGY]  if(hasLendsName  ||!type.hasReferenceName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!type.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!type.hasReferenceName())  {	  if(!type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
302	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.isInterface()  ||  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.isInterface()  ||  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.isInterface()  ||  n.getJSDocInfo()!=  null)  {	  if(!hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
303	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	58	None	replace
304	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	23	None	replace
305	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	26	None	replace
306	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
307	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSyntheticType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSyntheticType();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSyntheticType();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	22	None	replace
308	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.isUnknownType())  {	  if(!hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	50	None	replace
309	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  scope.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  scope.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName()    &&    scope.isInterface())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
310	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
311	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasJSDocInfo()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasJSDocInfo()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasJSDocInfo()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
312	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasType()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasType()  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasType()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
313	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	60	None	replace
314	[BUG]  [BUGGY]  if(!hasLendsName  ||  type.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  type.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  type.isUnknownType())  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
315	[BUG]  [BUGGY]  if(!hasLendsName  ||  type.isSubtype(objectType))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  type.isSubtype(objectType))  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  type.isSubtype(objectType))  {	  if(!hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
316	[BUG]  [BUGGY]  if(hasLendsName  ||  type.isUnknownType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  type.isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  type.isUnknownType())  {	  if(hasLendsName    ||    type.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
317	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.getReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
318	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.hasName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||!objectType.hasName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.hasName())  {	  if(!objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
319	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
320	[BUG]  [BUGGY]  if(hasLendsName  ||  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  n.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName()    &&    n.getJSDocInfo()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
321	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
322	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().hasLendsName())  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
323	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo().isInterface())  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
324	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  &&  hasLendsName  &&  n.getJSDocInfo()!=  null)  {	  if(!objectType.hasReferenceName()    &&    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
325	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isInterface()  ||  objectType.isInterface())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
326	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isNone())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.isNone())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isNone())  {	  if(hasLendsName    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
327	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||!objectType.isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.isInterface())  {	  if(hasLendsName    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
328	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
329	[BUG]  [BUGGY]  if(hasLendsName  &&  n.hasObjName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.hasObjName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.hasObjName())  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
330	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
331	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasObjName())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
332	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.isLends()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  boolean  hasLendsName  =  n.isLends()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.isLends()  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasChildren()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	59	None	replace
333	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  ==  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  ==  0)  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
334	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  >  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  >  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName().length()  >  0)  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
335	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object ")&&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {	  if(!hasLendsName    ||    objectType.hasDeclaredProperty(   "object   "))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
336	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  ||  hasLendsName  ||  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!objectType.hasReferenceName()  ||  hasLendsName  ||  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  ||  hasLendsName  ||  n.getJSDocInfo().hasLendsName())  {	  if(!objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
337	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
338	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
339	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
340	[BUG]  [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
341	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null)  {	  if(hasLendsName    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
342	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isUnknownType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOwnSideEffects()  ||  isUnknownType())  {	  if(hasLendsName    ||    objectType.hasOwnSideEffects())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
343	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasChildren())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
344	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasDeclaredType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&  n.hasDeclaredType())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasDeclaredType())  {	  if(!hasLendsName    &&    n.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
345	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName    ||    n.hasJSDocInfo())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
346	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOp())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasOp())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOp())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
347	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasChildren())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  n.hasChildren())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
348	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  isInterface())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp()  ||  isInterface())  {	  if(hasLendsName    ||    objectType.hasAssignmentOp())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
349	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
350	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
351	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
352	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null)  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
353	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	52	None	replace
354	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasReferenceName()  &&!hasLendsName)  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
355	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.isFunctionPrototype())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;      [BUGGY]  if(!hasLendsName  &&!objectType.isFunctionPrototype())  {  [BUGGY]      return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.isFunctionPrototype())  {	  if(!hasLendsName    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
