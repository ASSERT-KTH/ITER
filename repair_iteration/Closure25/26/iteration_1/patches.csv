bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  hasLendsName)  {	  if    (!hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  scope.isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  scope.isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.hasReferenceName()  &&  scope.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  if(objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType.hasReferenceName()  &&  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(type.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(type.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type.hasReferenceName()  ||  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  if(objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType.hasReferenceName()  ||  hasLendsName  ||  n.hasJSDocInfo())  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  ||!hasLendsName)  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
9	[BUG]  [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  &&!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&!objectType.hasReferenceName())  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&!objectType.hasReferenceName())  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  if(!objectType.hasLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasLendsName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName()  &&!hasLendsName)  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  if(!objectType.hasName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasName()  &&!hasLendsName)  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  if(!hasLendsName  &&  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  &&  type.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  type.hasReferenceName())  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  if(hasLendsName  &&  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  type.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  type.hasReferenceName())  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  if(!type.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!type.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!type.hasReferenceName()  &&!hasLendsName)  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  if(n.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(n.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(n.hasReferenceName()  &&!hasLendsName)  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().equals(objectType.getReferenceName()))  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
19	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasDeclaration())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasDeclaration())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName().length()  ==  0)  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
23	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
24	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();	      	non-compiled	[CE]  ';'  expected	5	None	replace
25	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
26	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();	      	non-compiled	[CE]  ';'  expected	5	None	replace
27	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  >=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  >=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  >=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
30	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasDeclaration())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasDeclaration())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasAssignmentOp())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasAssignmentOp())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
33	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasReferenceName()  ||  hasObjName)  {	  if(!hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
34	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasLendsName  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasReferenceName()  &&  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasReferenceName()  &&  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  hasLendsName)  {	  if(objectType.hasReferenceName()    ||    hasLendsName)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
38	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasReferenceName()  ||  n.hasJSDocInfo())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasObjName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasObjName())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
40	[BUG]  [BUGGY]  if(type.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(type.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(type.hasReferenceName()  ||!hasLendsName)  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.isInterface())  {	  if(!hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
42	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaration())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaration())  {	  if(!hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  if(hasLendsName  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||!objectType.hasReferenceName())  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasKey())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasKey())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasKey())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.getReferenceName()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
46	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasObjName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasObjName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasObjName())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
47	[BUG]  [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if  (!hasLendsName  &&  objectType.isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if  (!hasLendsName  &&  objectType.isInterface())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
48	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {	  if    (objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  if(!objectType.hasLendsName  ||  hasLendsName)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!objectType.hasLendsName  ||  hasLendsName)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!objectType.hasLendsName  ||  hasLendsName)  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  if(!hasLendsName  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||!objectType.hasReferenceName())  {	  if(!objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
51	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasChildren())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasChildren())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo()!=  null)  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
54	[BUG]  [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  &&  objectType.hasReferenceName()  &&  n.getJSDocInfo().isInterface())  {	  if(hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
55	[BUG]  [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  objectType.hasDeclaredProperty( "object "))  {	  if(!hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.isInterface())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  objectType.hasOwnSideEffects())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  objectType.hasOwnSideEffects())  {	  if(hasLendsName    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.hasChildren();  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren();	      	non-compiled	[CE]  ';'  expected	5	None	replace
59	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
60	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	boolean  hasLendsName  =  n.hasChildren()  &&  n.getJSDocInfo().getLendsName()  ==  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
61	[BUG]  [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  &&  n.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  &&  n.hasReferenceName())  {	  if    (!hasLendsName    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
62	[BUG]  [BUGGY]  if(!hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(!hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(!hasLendsName  ||  type.hasReferenceName())  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
63	[BUG]  [BUGGY]  if(hasLendsName  ||  type.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;    [BUGGY]  if(hasLendsName  ||  type.hasReferenceName())  {  [BUGGY]    return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	669	669	1	replace	if(hasLendsName  ||  type.hasReferenceName())  {	  if(type.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
