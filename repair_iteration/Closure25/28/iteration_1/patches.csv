bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount();  name!=  null;	  for(Node    name    =    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getJSDocInfo();  name!=  null;	  for(Node    name    =    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
3	[BUG]  [BUGGY]  for(Node  name  =  n.getKey();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  n.getKey();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getKey();  name!=  null;	  for(Node    name    =    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
4	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
5	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getFirstChild().getNext();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  qObjName.getFirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getFirstChild();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild());  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getFirstChild());  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild());  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
8	[BUG]  [BUGGY]  for(Node  name  :  n.getNext();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getNext();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
9	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
10	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));	      	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  -  1);  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length()  -  1);	      	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'));  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'));	      	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  JSType  rawValueType  =  qObjName.getJSType();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName.getJSType();	      	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  -  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  -  2);  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length()  -  2);	      	non-compiled	[CE]  ';'  expected	5	None	replace
15	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  n.setJSDocInfo(qObjName);  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName);	      	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  Node  name  =  n.getFirstChild();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	5	None	replace
17	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  qObjName.getLastChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getLastChild();  name!=  null;	  for(Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getNext();  name!=  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  qObjName.getNext();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getNext();  name!=  null;	  for(Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
19	[BUG]  [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getFirstChild();  name!=  null;	  for(Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
20	[BUG]  [BUGGY]  For  (Node  name  =  n.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For  (Node  name  =  n.getLastChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  n.getLastChild();  name!=  null;	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  For  (Node  name  =  qObjName.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For  (Node  name  =  qObjName.getFirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  qObjName.getFirstChild();  name!=  null;	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  For  (Node  name  =  scope.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For  (Node  name  =  scope.getFirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  scope.getFirstChild();  name!=  null;	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  For  (Node  name  =  n.getNext();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For  (Node  name  =  n.getNext();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  n.getNext();  name!=  null;	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null;	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
25	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
26	[BUG]  [BUGGY]  for(Node  name  =  n.getfirstChild();  name!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  n.getfirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getfirstChild();  name!=  null;	  for(Node    name    =    n.getLastChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
27	[BUG]  [BUGGY]  for(Node  name  =  n.getParent();  name!=  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  n.getParent();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getParent();  name!=  null;	  for(Node    name    =    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
30	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();	      	non-compiled	[CE]  ';'  expected	5	None	replace
33	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();	      	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.isEmpty();	      	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  JSType  rawValueType  =  n.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  JSType  rawValueType  =  n.getJSType();  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  n.getJSType();	      	non-compiled	[CE]  ';'  expected	5	None	replace
37	[BUG]  [BUGGY]  for(Node  name  :  qObjName;  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  qObjName;  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName;  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
38	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getFirstChild();  name  ==  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  qObjName.getFirstChild();  name  ==  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getFirstChild();  name  ==  null;	  for(Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
39	[BUG]  [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  this.node.getFirstChild();  name!=  null;	  for(Node    name    =    n.getLastChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
40	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().cloneTree();  name!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName!=  null;	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  for(Node  name  =  qObjName.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  for(Node  name  =  qObjName.cloneTree();  name!=  null;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.cloneTree();  name!=  null;	  for(Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
46	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;	  For    (Node    name    =    n.getFirstChild();    name!=    null;    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));    [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [BUGGY]    name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);	      	non-compiled	[CE]  ';'  expected	5	None	replace
