bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  name  =  scope.getJSDocInfo();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getJSDocInfo();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getJSDocInfo();  name!=  null;	  for(Node    name    =    n.getJSDocInfo();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
2	[BUG]  [BUGGY]  For(Node  name  =  n.getJSDocInfo();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getJSDocInfo();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getJSDocInfo();  name!=  null;	  for(Node    name    =    n.getJSDocInfo();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
3	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount()  -  1;  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount()  -  1;  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount()  -  1;  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  for(Node  name  =  scope.getChildCount();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getChildCount();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getChildCount();  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount()  -  2;  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount()  -  2;  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount()  -  2;  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  for(Node  name  =  this.node.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  this.node.getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  this.node.getLastChild();  name!=  null;	  for(Node    name    =    this.node.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	39	None	replace
7	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild().cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild().cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild().cloneTree();  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
8	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree(),  qObjName!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree(),  qObjName!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().cloneTree(),  qObjName!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
9	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getString();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getString();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getString();  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
10	[BUG]  [BUGGY]  for(Node  name  :  n.getNext().cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getNext().cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getNext().cloneTree();  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
11	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length()  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length()  -  1);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length()  -  1);	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
14	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(1);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(1);	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
15	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName;	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
16	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()):  qObjName.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()):  qObjName.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()):  qObjName.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
17	[BUG]  [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(2);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName!=  null?  qObjName.substring(0,  qObjName.length()  -  1):  qObjName.substring(2);	  String    name    =    qObjName.substring(0,    qObjName.length()    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
18	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
19	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
20	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
21	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
22	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  for(Node  name  :  n.getChildCount();  name!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildCount();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildCount();  name!=  null;	  for(Node    name    :    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
24	[BUG]  [BUGGY]  for(Node  name  :  n.getJSDocInfo();  name!=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getJSDocInfo();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getJSDocInfo();  name!=  null;	  for(Node    name    :    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
25	[BUG]  [BUGGY]  for(Node  name  :  n.getParent();  name!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getParent();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getParent();  name!=  null;	  for(Node    name    :    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
26	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getLastChild();  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getNext();  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getNext();  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
28	[BUG]  [BUGGY]  for(Node  name  :  qObjName.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.cloneTree();  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
29	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getFirstChild());  name!=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getFirstChild());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getFirstChild());  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
30	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1);	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
31	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  2);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  2);	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
32	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.')+  1));	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
33	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
34	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
35	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
36	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
37	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getString()));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
38	[BUG]  [BUGGY]  for(Node  name  =  objectType.getNext();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getNext();  name!=  null;	  for(Node    name    =    qObjName.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	18	None	replace
39	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
40	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
41	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
42	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(scope.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
43	[BUG]  [BUGGY]  For  (Node  name  =  qObjName.getNext();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For  (Node  name  =  qObjName.getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  qObjName.getNext();  name!=  null;	  For    (Node    name    =    n.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	23	None	replace
44	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
45	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
46	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
47	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.startsWith(scope.getLastChild()));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.startsWith(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.startsWith(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
48	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&!qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&!qObjName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&!qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
49	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName(qObjName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
50	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
51	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName(qObjName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
52	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;	  for(Node    name    :    n.getLastChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
53	[BUG]  [BUGGY]  n.setJSDocInfo(objectType.hasReferenceName()?  qObjName  :  qObjName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(objectType.hasReferenceName()?  qObjName  :  qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(objectType.hasReferenceName()?  qObjName  :  qObjName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
54	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName  +  1);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName  +  1);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
55	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName,  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName,  scope);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName,  scope);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
56	[BUG]  [BUGGY]  n.setLendsName(qObjName);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setLendsName(qObjName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
57	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName  + ": "  +  qObjName);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName  + ": "  +  qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName  + ": "  +  qObjName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
58	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName)&&!hasLendsName;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName)&&!hasLendsName;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName)&&!hasLendsName;	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
59	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length();	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
60	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qobjName.length());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qobjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qobjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
61	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length()));	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
62	[BUG]  [BUGGY]  String  name  =  qobjName.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qobjName.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qobjName.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
63	[BUG]  [BUGGY]  String  name  =  this.qObjName.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  this.qObjName.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  this.qObjName.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
64	[BUG]  [BUGGY]  String  name  =  n.substring(0,  qObjName.length());  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  n.substring(0,  qObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  n.substring(0,  qObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
66	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
67	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
68	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
69	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
70	[BUG]  [BUGGY]  for(Node  name  :  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
71	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
72	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
73	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
74	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
75	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
76	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
77	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
78	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
79	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
80	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  n;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
81	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestValue(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
82	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  objectType);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
83	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestVar(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestVar(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
84	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  scope);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
85	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.length()  ==  0;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.length()  ==  0;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.length()  ==  0;	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
86	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty()  ||  qObjName.isEmpty();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty()  ||  qObjName.isEmpty();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.isEmpty()  ||  qObjName.isEmpty();	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
87	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.length()!=  0;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.length()!=  0;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.length()!=  0;	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
88	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.equals( " ")||  qObjName.isEmpty();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.equals( " ")||  qObjName.isEmpty();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.equals( " ")||  qObjName.isEmpty();	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
89	[BUG]  [BUGGY]  for(Node  name  =  n.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.cloneTree();  name!=  null;	  for(Node    name    =    qObjName.cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
90	[BUG]  [BUGGY]  for(Node  name  =  qObjName!=  null?  null  :  qObjName.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName!=  null?  null  :  qObjName.cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName!=  null?  null  :  qObjName.cloneTree();  name!=  null;	  for(Node    name    =    qObjName.cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
91	[BUG]  [BUGGY]  for(Node  name  =  objectType.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.cloneTree();  name!=  null;	  for(Node    name    =    qObjName.cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
92	[BUG]  [BUGGY]  for(Node  name  =  scope.cloneTree();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.cloneTree();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.cloneTree();  name!=  null;	  for(Node    name    =    qObjName.cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
93	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  objectType.getJSType();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  objectType.getJSType();	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
94	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  null  :  qObjName.getJSType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  null  :  qObjName.getJSType();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName!=  null?  null  :  qObjName.getJSType();	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName  ==  null?  null  :  qObjName.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName  ==  null?  null  :  qObjName.getJSType();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName  ==  null?  null  :  qObjName.getJSType();	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
96	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName.toString();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName.toString();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName.toString();	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
97	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "* "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
98	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
99	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
100	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
101	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "_ "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
102	[BUG]  [BUGGY]  JSType  rawValueType  =  scope.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  scope.getJSType();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  scope.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
103	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild());  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild());  name!=  null;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
104	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name!=  null;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name!=  null;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild())  {  name!=  null;  }	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
105	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getNext());  name!=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getNext());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getNext());  name!=  null;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
106	[BUG]  [BUGGY]  for(Node  name  :  n.getNext());  name!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getNext());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getNext());  name!=  null;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
107	[BUG]  [BUGGY]  for(Node  name  :  n;  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n;  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n;  name!=  null;	  for(Node    name    :    qObjName;    name!=    null;    	non-compiled	[CE]  ';'  expected	37	None	replace
108	[BUG]  [BUGGY]  for(Node  name  :  qObjName)  {  name!=  null;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName)  {  name!=  null;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName)  {  name!=  null;  }	  for(Node    name    :    qObjName;    name!=    null;    	non-compiled	[CE]  ';'  expected	37	None	replace
109	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	32	None	replace
110	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	32	None	replace
111	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	31	None	replace
112	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	31	None	replace
113	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	31	None	replace
114	[BUG]  [BUGGY]  for(Node  name  =  objectType.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getLastChild();  name!=  null;	  for(Node    name    =    objectType.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	19	None	replace
115	[BUG]  [BUGGY]  for(Node  name  =  n.getValue();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getValue();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getValue();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
116	[BUG]  [BUGGY]  for(Node  name  =  n.getAssignedValue();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getAssignedValue();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getAssignedValue();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
117	[BUG]  [BUGGY]  for(Node  name  =  n.getSimpleName();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getSimpleName();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getSimpleName();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
118	[BUG]  [BUGGY]  For(Node  name  =  n.getKey();  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getKey();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getKey();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
119	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild(),  qObjName!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild(),  qObjName!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild(),  qObjName!=  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
120	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  ==  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName  ==  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
121	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  [Delete]  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  [Delete]  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName  [Delete]  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
122	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  >=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  >=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName  >=  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
123	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild(),  qObjName  ==  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild(),  qObjName  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild(),  qObjName  ==  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
124	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  value!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  value!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  value!=  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
125	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	34	None	replace
126	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	34	None	replace
127	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  n.getLastChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
128	[BUG]  [BUGGY]  Node  name  =  qObjName.getFirstChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  qObjName.getFirstChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  qObjName.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
129	[BUG]  [BUGGY]  Node  name  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  scope.getFirstChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  scope.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
130	[BUG]  [BUGGY]  Node  name  =  qObjName.getLastChild();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  qObjName.getLastChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  qObjName.getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
131	[BUG]  [BUGGY]  Node  name  =  objectType.getFirstChild();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  objectType.getFirstChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  objectType.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
132	[BUG]  [BUGGY]  Node  name  =  n.getNext();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  n.getNext();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
133	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getLastChild().getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getLastChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
134	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getLastChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getLastChild().getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getLastChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getNext(),  qObjName!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getNext(),  qObjName!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getNext(),  qObjName!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
136	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getParent();  name!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getParent();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getParent();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
137	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  :  n.getFirstChild().getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  :  n.getFirstChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
138	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
139	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
140	[BUG]  [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
141	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
142	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
143	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name  ==  null;	  for(Node    name    =    qObjName.getFirstChild();    name    ==    null;    	non-compiled	[CE]  ';'  expected	38	None	replace
144	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren())  {  name!=  null;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren())  {  name!=  null;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren())  {  name!=  null;  }	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
145	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren());  name!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren());  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
146	[BUG]  [BUGGY]  For(Node  name  :  n.getChildren();  name!=  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  :  n.getChildren();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  :  n.getChildren();  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
147	[BUG]  [BUGGY]  for(Node  name  :  scope.getChildren();  name!=  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  scope.getChildren();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  scope.getChildren();  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
148	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren();  name  ==  null;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren();  name  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren();  name  ==  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
149	[BUG]  [BUGGY]  For  (Node  name  =  scope.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For  (Node  name  =  scope.getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  scope.getLastChild();  name!=  null;	  For    (Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	22	None	replace
150	[BUG]  [BUGGY]  For  (Node  name  =  qObjName.getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For  (Node  name  =  qObjName.getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For  (Node  name  =  qObjName.getLastChild();  name!=  null;	  For    (Node    name    =    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	21	None	replace
151	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getNext();  name  ==  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getNext();  name  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getNext();  name  ==  null;	  for(Node    name    =    qObjName.getFirstChild();    name    ==    null;    	non-compiled	[CE]  ';'  expected	38	None	replace
152	[BUG]  [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getReferenceName()))  {  return  scope;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getReferenceName()))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getReferenceName()))  {  return  scope;  }	  for(Node    name    =    objectType.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	19	None	replace
153	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getLocalName();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getLocalName();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getLocalName();  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
154	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree(),  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree(),  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().cloneTree(),  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().clonePath();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().clonePath();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().clonePath();  name!=  null;	  for(Node    name    :    n.getFirstChild().cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
156	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLlue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLlue(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLlue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
157	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargerValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargerValue(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargerValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
158	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargestLValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargestLValue(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLargestLValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
159	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
160	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    	non-compiled	[CE]  	30	None	replace
161	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getChildCount();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getChildCount();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getChildCount();  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
162	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount()  +  1;  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount()  +  1;  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount()  +  1;  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
163	[BUG]  [BUGGY]  For(Node  name  =  n.getChildCount();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getChildCount();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getChildCount();  name!=  null;	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
164	[BUG]  [BUGGY]  for(Node  name  :  n.getfirstChild();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getfirstChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getfirstChild();  name!=  null;	  for(Node    name    :    n.getLastChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
165	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getLastChild();  name!=  null  &&  qObjName.equals(n.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
166	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getFirstChild().getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
167	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  n.getFirstChild().getLastChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  n.getFirstChild().getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
168	[BUG]  [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {	  for(Node    name    =    this.node.getFirstChild();    name!=    null;    	non-compiled	[CE]  	39	None	replace
169	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  qObjName.isEmpty();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  qObjName.isEmpty();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  qObjName.isEmpty();	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
170	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.length()  >  0;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.length()  >  0;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.length()  >  0;	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
171	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.indexOf('.')+  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.indexOf('.')+  1);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.indexOf('.')+  1);	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
172	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
173	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
174	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	34	None	replace
175	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getLastChild()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(objectType.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
176	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLocalName()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLocalName()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLocalName()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
177	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  +  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  +  2);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length()  +  2);	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
178	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.length()  2);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.length()  2);	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
179	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getParent();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getParent();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getParent();  name!=  null;	  for(Node    name    =    qObjName.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	18	None	replace
180	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getType();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getType();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getType();  name!=  null;	  for(Node    name    =    qObjName.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	18	None	replace
181	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getFirstChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getFirstChild().getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getFirstChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
182	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getLastChild();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getLastChild();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getLastChild();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
183	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	32	None	replace
184	[BUG]  [BUGGY]  for(Node  name  =  qObjName.getKey();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.getKey();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.getKey();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
185	[BUG]  [BUGGY]  for(Node  name  =  n.getScope();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getScope();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getScope();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
186	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( ". "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
187	[BUG]  [BUGGY]  n.setJSDocName(qObjName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocName(qObjName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
188	[BUG]  [BUGGY]  n.setJSDocInfo(dataObjName);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(dataObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(dataObjName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
189	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName.restrictByNotNullOrUndefined();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName.restrictByNotNullOrUndefined();	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
190	[BUG]  [BUGGY]  for(Node  name  =  qObjName.next();  name!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.next();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.next();  name!=  null;	  for(Node    name    =    qObjName.cloneTree();    name!=    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
191	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getChildren();  name!=  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getChildren();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getChildren();  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
192	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren(),  name!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren(),  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren(),  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
193	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren())  {  name!=  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren())  {  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren())  {  name!=  null;	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
194	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
195	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName);	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
196	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
197	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  >>  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName  >>  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName  >>  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
198	[BUG]  [BUGGY]  for(Node  name  :  n.getNext(),  qObjName!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getNext(),  qObjName!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getNext(),  qObjName!=  null;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
199	[BUG]  [BUGGY]  for(Node  name  :  qObjName.getString();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.getString();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.getString();  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
200	[BUG]  [BUGGY]  JSType  rawValueType  =  n.getJSType(qObjName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  n.getJSType(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  n.getJSType(qObjName);	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
201	[BUG]  [BUGGY]  for(Node  name  =  n.getObject();  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getObject();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getObject();  name!=  null;	  for(Node    name    =    n.getJSDocInfo();    name!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
202	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
203	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(value.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
204	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
205	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
206	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild())  {  name!=  null;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
207	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name  }  ;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name  }  ;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild())  {  name  }  ;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
208	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
209	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
210	[BUG]  [BUGGY]  For(Node  name  =  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getNext();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	46	None	replace
211	[BUG]  [BUGGY]  for(Node  name  =  n.getPrevious();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getPrevious();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getPrevious();  name!=  null;	  for(Node    name    =    n.getParent();    name!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
212	[BUG]  [BUGGY]  for(Node  name  =  n.getAncestor(1);  name!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getAncestor(1);  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getAncestor(1);  name!=  null;	  for(Node    name    =    n.getParent();    name!=    null;    	non-compiled	[CE]  ';'  expected	27	None	replace
213	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName(qObjName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
214	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
215	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }	  for(Node    name    :    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	42	None	replace
216	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName  + "_ "  +  qKeyName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName  + "_ "  +  qKeyName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName  + "_ "  +  qKeyName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
217	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName  + ": "  +  qKeyName);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName  + ": "  +  qKeyName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName  + ": "  +  qKeyName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
218	[BUG]  [BUGGY]  n.setJSDocInfo(qObjName  + ". "  +  qKeyName);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  n.setJSDocInfo(qObjName  + ". "  +  qKeyName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	n.setJSDocInfo(qObjName  + ". "  +  qKeyName);	  n.setJSDocInfo(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
219	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasObjName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	32	None	replace
220	[BUG]  [BUGGY]  for(Node  name  =  qObjName.clone();  name!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  qObjName.clone();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  qObjName.clone();  name!=  null;	  for(Node    name    =    qObjName.getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	18	None	replace
221	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree());  name!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().cloneTree());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().cloneTree());  name!=  null;	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
222	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name  =  qObjName;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild())  {  name  =  qObjName;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild())  {  name  =  qObjName;  }	  for(Node    name    :    n.getFirstChild());    name!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
223	[BUG]  [BUGGY]  Node  name  =  qObjName.removeFirstChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  qObjName.removeFirstChild();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  qObjName.removeFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
224	[BUG]  [BUGGY]  Node  name  =  qObjName.getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  Node  name  =  qObjName.getNext();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	Node  name  =  qObjName.getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
225	[BUG]  [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    objectType.getFirstChild();    name!=    null;    	non-compiled	[CE]  	19	None	replace
226	[BUG]  [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  objectType.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    objectType.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	19	None	replace
227	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
228	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName.getString()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(sourceName.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
229	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	28	None	replace
230	[BUG]  [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    this.node.getFirstChild();    name!=    null;    	non-compiled	[CE]  	39	None	replace
231	[BUG]  [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals(this.node.getString()));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals(this.node.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  this.node.getFirstChild();  name!=  null  &&  qObjName.equals(this.node.getString()));	  for(Node    name    =    this.node.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	39	None	replace
232	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild().getFirstChild().getNext();  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild().getFirstChild().getNext();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild().getFirstChild().getNext();  name!=  null;	  for(Node    name    :    n.getFirstChild().getNext();    name!=    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
233	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  null;	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
234	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  qObjName;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  qObjName;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName!=  null?  qObjName.getJSType()  :  qObjName;	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
235	[BUG]  [BUGGY]  JSType  rawValueType  =  qObjName  ==  null?  qObjName.getJSType()  :  qObjName;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  qObjName  ==  null?  qObjName.getJSType()  :  qObjName;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  qObjName  ==  null?  qObjName.getJSType()  :  qObjName;	  JSType    rawValueType    =    qObjName.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
236	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "   "))  {  return  scope;	  For(Node    name    =    n.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    	non-compiled	[CE]  	47	None	replace
237	[BUG]  [BUGGY]  for(Node  name  =  n.getChildren();  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildren();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildren();  name!=  null;	  for(Node    name    =    n.getKey();    name!=    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
238	[BUG]  [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    n.getJSDocInfo();    name!=    null;    	non-compiled	[CE]  	2	None	replace
239	[BUG]  [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getJSDocInfo();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;	  for(Node    name    =    n.getJSDocInfo();    name!=    null;    	non-compiled	[CE]  	2	None	replace
240	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  n.length());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  n.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  n.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
241	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  cObjName.length());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  cObjName.length());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  cObjName.length());	  String    name    =    qObjName.substring(0,    qObjName.length()    -    2);    	non-compiled	[CE]  ';'  expected	14	None	replace
242	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  n));	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
243	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'),  qKeyName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'),  qKeyName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'),  qKeyName);	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
244	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  '-'));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  '-'));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.',  '-'));	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
245	[BUG]  [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'  +  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'  +  1));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  name  =  qObjName.substring(0,  qObjName.lastIndexOf('.'  +  1));	  String    name    =    qObjName.substring(0,    qObjName.lastIndexOf('.'));    	non-compiled	[CE]  ';'  expected	12	None	replace
246	[BUG]  [BUGGY]  for(Node  name  :  qObjName.cloneTree());  name!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.cloneTree());  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.cloneTree());  name!=  null;	  for(Node    name    :    qObjName;    name!=    null;    	non-compiled	[CE]  ';'  expected	37	None	replace
247	[BUG]  [BUGGY]  for(Node  name  :  qObjName,  name!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName,  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName,  name!=  null;	  for(Node    name    :    qObjName;    name!=    null;    	non-compiled	[CE]  ';'  expected	37	None	replace
248	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getLastChild());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getLastChild()));    	non-compiled	[CE]  ';'  expected	29	None	replace
249	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  	9	None	replace
250	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getChildren();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    :    n.getChildren();    name!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
251	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
252	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(name.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
253	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null  &&  qObjName.equals(type.getString());	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(n.getString());    	non-compiled	[CE]  ';'  expected	44	None	replace
254	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(n.getString()));	  For    (Node    name    =    scope.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	22	None	replace
255	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qKeyName.equals(scope.getLastChild()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qKeyName.equals(scope.getLastChild()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qKeyName.equals(scope.getLastChild()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
256	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getString()));	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
257	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()),  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()),  n);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals(scope.getLastChild()),  n);	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(scope.getLastChild()));    	non-compiled	[CE]  ';'  expected	25	None	replace
258	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
259	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
260	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
261	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVariable(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVariable(n));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVariable(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	10	None	replace
262	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName!=  null  &&!hasLendsName;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  n.getFirstChild(),  qObjName!=  null  &&!hasLendsName;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  n.getFirstChild(),  qObjName!=  null  &&!hasLendsName;	  for(Node    name    :    n.getFirstChild(),    qObjName!=    null;    	non-compiled	[CE]  ';'  expected	41	None	replace
263	[BUG]  [BUGGY]  for(Node  name  :  qObjName.clone();  name!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  :  qObjName.clone();  name!=  null;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  :  qObjName.clone();  name!=  null;	  for(Node    name    :    qObjName.getFirstChild();    name!=    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
264	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName(qObjName);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	48	None	replace
265	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals( " "))  {  return  scope;  }	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  	1	None	replace
266	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString()));  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString()));	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
267	[BUG]  [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString());  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  n.getChildCount();  name!=  null  &&  qObjName.equals(n.getString());	  for(Node    name    =    n.getChildCount();    name!=    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
268	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null  &&  qObjName.equals( "- "))  {  return  scope;  }	  for(Node    name    =    scope.getFirstChild();    name!=    null    &&    qObjName.equals(   "   "))    {    return    scope;    }    	non-compiled	[CE]  	43	None	replace
269	[BUG]  [BUGGY]  JSType  rawValueType  =  n.getJSType()  ||  qObjName!=  null?  qObjName  :  n.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  JSType  rawValueType  =  n.getJSType()  ||  qObjName!=  null?  qObjName  :  n.getJSType();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	JSType  rawValueType  =  n.getJSType()  ||  qObjName!=  null?  qObjName  :  n.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
270	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty()  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.isEmpty()  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.isEmpty()  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
271	[BUG]  [BUGGY]  boolean  hasLendsName  =  qObjName.length()  >=  0;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));      [BUGGY]  boolean  hasLendsName  =  qObjName.length()  >=  0;  [BUGGY]      name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  valueType  =  getNativeType(UNKNOWN_TYPE);  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	675	675	1	replace	boolean  hasLendsName  =  qObjName.length()  >=  0;	  boolean    hasLendsName    =    qObjName.isEmpty();    	non-compiled	[CE]  ';'  expected	35	None	replace
