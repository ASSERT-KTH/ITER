bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasValueName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasValueName())  {	  if(objectType!=    null    &&    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
2	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasValueName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasValueName())  {	  if(objectType!=    null    &&    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
3	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getFirstChild(),  scope);	  scope    =    traverse(objectType.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
4	[BUG]  [BUGGY]  scope  =  traverse(scope.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(scope.getLastChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(scope.getLastChild(),  objectType);	  scope    =    traverse(objectType.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
5	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType  ==  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType  ==  null)  {	  if(objectType!=    null    ||    objectType    ==    null)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isInterface())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
8	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
9	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
12	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
13	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
14	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName().length()  ==  0)  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
15	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isConstructor())  {	  if(objectType    ==    null    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	23	None	replace
16	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isFunction())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isFunction())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isFunction())  {	  if(objectType    ==    null    &&    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	23	None	replace
17	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getName()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getName()!=  null)  {	  if(objectType    ==    null    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
18	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getLastChild(),  type);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  type);	  scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	14	None	replace
19	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getLastChild(),  valueType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  valueType);	  scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	14	None	replace
20	[BUG]  [BUGGY]  scope  =  traverse(objectType.getLastChild(),  name);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(objectType.getLastChild(),  name);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getLastChild(),  name);	  scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	14	None	replace
21	[BUG]  [BUGGY]  scope  =  traverse(name.getString(),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getString(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getString(),  objectType);	  scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
23	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
24	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasValueName()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    ||    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  objectType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getFirstChild(),  objectType);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
26	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  type);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  type);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  type);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
27	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  valueType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  valueType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  valueType);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
28	[BUG]  [BUGGY]  Scope  scope  =  traverse(objectType.getLastChild(),  name);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(objectType.getLastChild(),  name);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(objectType.getLastChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
29	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  objectType,  scope);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  objectType,  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  objectType,  scope);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasName())  {	  if(objectType!=    null    ||    objectType.hasName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasName())  {	  if(objectType!=    null    ||    objectType.hasName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasName())  {	  if(objectType!=    null    ||    objectType.hasName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
34	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
35	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  >  0  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  >  0  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  >  0  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
36	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getLendsName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getLendsName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
37	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  +!hasLendsName)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  +!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  +!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
38	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
39	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType  ==  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType  ==  UnknownType.NULL)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType  ==  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
40	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType!=  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType!=  UnknownType.NULL)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType!=  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
41	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType  ==  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType  ==  UnknownType.NULL)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType  ==  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
42	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType  ==  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType  ==  UnknownType.NULL)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType  ==  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
43	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
44	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
45	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  &&  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
46	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isReferenceName()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
47	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
48	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isSubtype(scope))  {	  if(objectType!=    null    &&    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(scope))  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isPrimitive())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
50	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isPrimitive())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isPrimitive())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
51	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isReferenceName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isReferenceName()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isReferenceName()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	69	None	replace
52	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
53	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
54	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
55	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
56	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName()  ==  null)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    ==    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
57	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getName()  ==  null)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getName()  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getName()  ==  null)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    ==    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
58	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
59	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.isUnknownType()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
60	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.isUnknownType()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
61	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.isUnknownType()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
62	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.isUnknownType()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
63	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getFirstChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
64	[BUG]  [BUGGY]  Scope  scope  =  traverse(objectType.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(objectType.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(objectType.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
65	[BUG]  [BUGGY]  Scope  scope  =  traverse(scope.getLastChild(),  name);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(scope.getLastChild(),  name);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(scope.getLastChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
66	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getString(),  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getString(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getString(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
67	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
68	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
69	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
70	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
71	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
72	[BUG]  [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  name);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  name);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getFirstChild(),  name);	  scope    =    traverse(name.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  scope  =  traverse(value.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(value.getLastChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(value.getLastChild(),  objectType);	  scope    =    traverse(name.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	15	None	replace
74	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(n.getLastChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(n.getLastChild(),  objectType);	  scope    =    traverse(value.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	52	None	replace
75	[BUG]  [BUGGY]  scope  =  traverse(objectType.getLastChild(),  value);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(objectType.getLastChild(),  value);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getLastChild(),  value);	  scope    =    traverse(value.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	52	None	replace
76	[BUG]  [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  value);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  value);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getFirstChild(),  value);	  scope    =    traverse(value.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	52	None	replace
77	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  objectType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(n.getFirstChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(n.getFirstChild(),  objectType);	  scope    =    traverse(value.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	52	None	replace
78	[BUG]  [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
79	[BUG]  [BUGGY]  Scope  name  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  name  =  traverse(name.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  name  =  traverse(name.getLastChild(),  scope);	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
80	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isConstructor())  {	  if(objectType    ==    null    ||    objectType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
81	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
82	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
83	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
84	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
85	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
86	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
87	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  ==  1)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  ==  1)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
88	[BUG]  [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
89	[BUG]  [BUGGY]  if(objectType  ==  null  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
90	[BUG]  [BUGGY]  if(objectType  ==  null  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||!objectType.hasReferenceName())  {	  if(objectType!=    null    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
91	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasValueName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasValueName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasValueName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasValueName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
92	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  value);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getFirstChild(),  value);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getFirstChild(),  value);	  scope    =    traverse(name.getLastChild(),    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
93	[BUG]  [BUGGY]  scope  =  traverse(name.getString(),  value);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getString(),  value);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getString(),  value);	  scope    =    traverse(name.getLastChild(),    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
94	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {	  if(objectType    ==    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
95	[BUG]  [BUGGY]  scope  =  traverse(name.getString(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getString(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getString(),  scope);	  scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
96	[BUG]  [BUGGY]  n.setJSType(objectType.getReferenceName());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType.getReferenceName());  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType.getReferenceName());	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
97	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  objectType);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  objectType);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  objectType);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
98	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  objectType);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  objectType);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  objectType);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
99	[BUG]  [BUGGY]  n.setJSType(objectType.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType.restrictByNotNullOrUndefined());  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType.restrictByNotNullOrUndefined());	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
100	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
101	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
102	[BUG]  [BUGGY]  scope  =  traverse(type.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(type.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(type.getLastChild(),  scope);	  scope    =    traverse(objectType.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
103	[BUG]  [BUGGY]  scope  =  traverse(value.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(value.getFirstChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(value.getFirstChild(),  scope);	  scope    =    traverse(objectType.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
104	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isFunction())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isFunction())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isFunction())  {	  if(objectType!=    null    ||    objectType.isFunction())    {    	non-compiled	[CE]  ';'  expected	40	None	replace
105	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isFunction())  {	  if(objectType!=    null    ||    objectType.isFunction())    {    	non-compiled	[CE]  ';'  expected	40	None	replace
106	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.getReferenceName())  {	  if(objectType!=    null    &&    objectType.getReferenceName())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
107	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName())  {	  if(objectType!=    null    &&    objectType.getReferenceName())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
108	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()).length()  ==  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()).length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()).length()  ==  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
109	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  >  0)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  >  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  >  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
110	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
111	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isInterface()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
112	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
113	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInterface()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
114	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasLendsName())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
115	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  scope.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  scope.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isConstructor()  ||  scope.isInterface())  {	  if(objectType!=    null    ||    objectType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
116	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getDeclaringClass()!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getDeclaringClass()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getDeclaringClass()!=  null)  {	  if(objectType!=    null    &&    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
117	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
118	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isConstructor()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
119	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionObject())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionObject())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionObject())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
120	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
121	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
122	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
123	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().equals(memberName))  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().equals(memberName))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName().equals(memberName))  {	  if(objectType!=    null    &&    objectType.hasLendsName)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
124	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
125	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
126	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
127	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInterface()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
128	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isConstructor())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isConstructor())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isConstructor())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
129	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isFunctionScope())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isFunctionScope())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isFunctionScope())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
130	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName().length()  ==  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
131	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.getReferenceName().length()  ==  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
132	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  >=  0)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  >=  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName().length()  >=  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
133	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName().length()!=  0)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName().length()!=  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName().length()!=  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
134	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.getReferenceName().length()  ==  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
135	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getName().length()  ==  0)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getName().length()  ==  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getName().length()  ==  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
136	[BUG]  [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
137	[BUG]  [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
138	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
139	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isReferenceName()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isReferenceName()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isReferenceName()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
140	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isFunctionPrototype())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isFunctionPrototype())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isFunctionPrototype())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
141	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isReferenceName())  {	  if(objectType!=    null    &&    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
142	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isConstructor()  ||  objectType.isUnknownType())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	55	None	replace
143	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType()  ||  scope.isFunctionDeclaration())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType()  ||  scope.isFunctionDeclaration())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType()  ||  scope.isFunctionDeclaration())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	55	None	replace
144	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
145	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
146	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasValueName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
147	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
148	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
149	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasName()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
150	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isSubtype(null))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isSubtype(null))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isSubtype(null))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
151	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isSubtype(null))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isSubtype(null))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isSubtype(null))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
152	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isSubtype(scope))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
153	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(scope))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isSubtype(scope))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
154	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isSubtype(null))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isSubtype(null))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isSubtype(null))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
155	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isObject())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
156	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunctionObject())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunctionObject())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunctionObject())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
157	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasLendsName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
158	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasLendsName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
159	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(n.getLastChild(),  scope);	  scope    =    traverse(value.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
160	[BUG]  [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
161	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.getReferenceName())  {	  if(objectType!=    null    &&    objectType.getReferenceName())    {    	non-compiled	[CE]  ';'  expected	54	None	replace
162	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isObjectType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isObjectType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isObjectType())  {	  if(objectType    ==    null    &&    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	37	None	replace
163	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionPrototype())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionPrototype())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isFunctionPrototype())  {	  if(objectType!=    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
164	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasName())  {	  if(objectType!=    null    ||    objectType.hasName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
165	[BUG]  [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
166	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType!=  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType!=  UnknownType.NULL)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType!=  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
167	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isPrimitive())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isPrimitive())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isPrimitive())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isPrimitive())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
168	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInstanceType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInstanceType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInstanceType())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isPrimitive())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
169	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
170	[BUG]  [BUGGY]  scope  =  traverse(value.getLastChild(),  name);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(value.getLastChild(),  name);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(value.getLastChild(),  name);	  scope    =    traverse(name.getLastChild(),    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
171	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isFunctionPrototypeType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isFunctionPrototypeType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isFunctionPrototypeType())  {	  if(objectType    ==    null    &&    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
172	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasDeclaration())  {	  if(objectType!=    null    ||    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
173	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isUnknownType())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	55	None	replace
174	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isNone())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isNone())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isNone())  {	  if(objectType    ==    null    ||    objectType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
175	[BUG]  [BUGGY]  scope  =  traverse(type.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(type.getLastChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(type.getLastChild(),  objectType);	  scope    =    traverse(name.getFirstChild(),    objectType);    	non-compiled	[CE]  ';'  expected	15	None	replace
176	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
177	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
178	[BUG]  [BUGGY]  if(objectType  ==  null  &&  valueType!=  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  valueType!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  valueType!=  null)  {	  if(objectType!=    null    &&    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
179	[BUG]  [BUGGY]  if(objectType!=  null  &&  valueType!=  null)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  valueType!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  valueType!=  null)  {	  if(objectType!=    null    &&    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
180	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
181	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
182	[BUG]  [BUGGY]  n.setJSType(objectType  ==  null?  null  :  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType  ==  null?  null  :  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType  ==  null?  null  :  objectType);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
183	[BUG]  [BUGGY]  n.setJSType(objectType!=  null?  null  :  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType!=  null?  null  :  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType!=  null?  null  :  objectType);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
184	[BUG]  [BUGGY]  n.setJSType(valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(valueType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(valueType);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
185	[BUG]  [BUGGY]  n.setJSType(objectType  }  );  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType  }  );  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType  }  );	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
186	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(type);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(type);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
187	[BUG]  [BUGGY]  n.setJSType(objectType!=  null?  scope  :  objectType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  n.setJSType(objectType!=  null?  scope  :  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType!=  null?  scope  :  objectType);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
188	[BUG]  [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(value.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
189	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  value);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  value);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  value);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
190	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasLendsName())  {	  if(objectType!=    null    &&    objectType.hasLendsName())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
191	[BUG]  [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(value.getLastChild(),  objectType);	  Scope    scope    =    traverse(name.getLastChild(),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
192	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
193	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  &&  objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
194	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isNone())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isNone())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isNone())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
195	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.getReferenceName()!=  null)  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
196	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasDeclaration())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasDeclaration())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasDeclaration())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
197	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()!=  null)  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
198	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName()  ==  null)  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
199	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isNone())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isNone())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isNone())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
200	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isConstructor())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
201	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
202	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.getReferenceName()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
203	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  >  1)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.getChildCount()  >  1)  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
204	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasValueName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  &&  objectType.hasValueName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasValueName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasValueName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
205	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(null,  scope))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(null,  scope))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isSubtype(null,  scope))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
206	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isObjectType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isObjectType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isObjectType())  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
207	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(this))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(this))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isSubtype(this))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
208	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasValue())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasValue())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasValue())  {	  if(objectType!=    null    ||    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
209	[BUG]  [BUGGY]  if(objectType  >=  null  &&  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  >=  null  &&  objectType.hasValueName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  >=  null  &&  objectType.hasValueName())  {	  if(objectType!=    null    ||    objectType.hasValueName())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
210	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasLendsName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    ||!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
211	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
212	[BUG]  [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  name);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  name);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  n.setJSType(objectType);  }  else  {  scope  =  traverse(name.getFirstChild(),  name);  }	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
213	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isConstructor()  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isConstructor()  ||  objectType.isConstructor())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isConstructor()  ||  objectType.isConstructor())  {	  if(objectType!=    null    ||    objectType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
214	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ==  null  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ==  null  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  ==  null  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    ==    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
215	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
216	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
217	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName()    ||    objectType.hasChildren())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
218	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasValueName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasValueName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasValueName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasValueName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
219	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  value,  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  scope  =  traverse(name.getLastChild(),  value,  objectType);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  value,  objectType);	  scope    =    traverse(name.getLastChild(),    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
220	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ||!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.getReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.getReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
221	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
222	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
223	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
224	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  &&!hasLendsName)  {	  if(objectType    ==    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
225	[BUG]  [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&!objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&!objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {	  if(objectType!=    null    ||!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
226	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInstanceType()  ||  objectType.isInterface())  {	  if(objectType!=    null    &&    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
227	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isAssignableFrom(objectType)||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isAssignableFrom(objectType)||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isAssignableFrom(objectType)||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
228	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isAllType()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isAllType()  ||  objectType.isUnknownType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isAllType()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    &&    objectType.isUnknownType()    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	70	None	replace
229	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isFunctionPrototype())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isFunctionPrototype())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isFunctionPrototype())  {	  if(objectType    ==    null    &&    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	37	None	replace
230	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isAllType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isAllType()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isAllType()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	69	None	replace
231	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.getReferenceName())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	69	None	replace
232	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isInterface()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInterface()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
233	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasChildren())  {	  if(objectType!=    null    ||    objectType.hasName())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
234	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isReferenced()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isReferenced()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isReferenced()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInstanceType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
235	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(objectType))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(objectType))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isSubtype(objectType))  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isPrimitive())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
236	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.isUnknownType()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
237	[BUG]  [BUGGY]  if(objectType  >=  null  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  >=  null  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  >=  null  &&  objectType.getReferenceName()!=  null)  {	  if(objectType!=    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
238	[BUG]  [BUGGY]  if(objectType  [Delete]  null  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  [Delete]  null  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  [Delete]  null  &&  objectType.getReferenceName()!=  null)  {	  if(objectType!=    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
239	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
240	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasChildren())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasChildren())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasChildren())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
241	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&!objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
242	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isAssignableFrom(objectType))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isAssignableFrom(objectType))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isAssignableFrom(objectType))  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	59	None	replace
243	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
244	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
245	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
246	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType())  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }	  if(objectType!=    null)    {    scope    =    traverse(name.getLastChild(),    scope);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
247	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.hasReferenceName())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
248	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isExtern())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isExtern())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isExtern())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
249	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunction())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunction())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isFunction())  {	  if(objectType!=    null    ||    objectType.isUnknownType()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
250	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  >  0)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  >  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName().length()  >  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
251	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().indexOf(';')>  0)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().indexOf(';')>  0)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName().indexOf(';')>  0)  {	  if(objectType!=    null    &&    objectType.getReferenceName().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
252	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  scope  =  traverse(name.getFirstChild(),  scope);  }	  if(objectType!=    null)    {    scope    =    traverse(name.getFirstChild(),    scope);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
253	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isFunction()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
254	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isNone()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isNone()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isNone()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
255	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isObject()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isObject()  ||  objectType.isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isObject()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface()    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	56	None	replace
256	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasLendsName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasLendsName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
257	[BUG]  [BUGGY]  if(objectType  >=  null  &&  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  >=  null  &&  objectType.getReferenceName()  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  >=  null  &&  objectType.getReferenceName()  ==  null)  {	  if(objectType!=    null    ||    objectType.getReferenceName()    ==    null)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
258	[BUG]  [BUGGY]  if(objectType  [Delete]  null  &&  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  [Delete]  null  &&  objectType.getReferenceName()  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  [Delete]  null  &&  objectType.getReferenceName()  ==  null)  {	  if(objectType!=    null    ||    objectType.getReferenceName()    ==    null)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
259	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(objectType))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(objectType))  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isSubtype(objectType))  {	  if(objectType    ==    null    ||    objectType.isSubtype(null))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
260	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  isInterface())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInstanceType()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType()    ||    isInterface())    {    	non-compiled	[CE]  ';'  expected	45	None	replace
261	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isAllType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType!=  null  &&  objectType.isAllType())  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isAllType())  {	  if(objectType    ==    null    &&    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
262	[BUG]  [BUGGY]  Scope  scope  =  traverse(syntacticScope.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(syntacticScope.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(syntacticScope.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
263	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(n.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
264	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType!=  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType!=  null)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
265	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType  ==  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType  ==  null)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL  ||  objectType  ==  null)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
266	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.UNKNOWN)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);      [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.UNKNOWN)  {  [BUGGY]      return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType  ==  UnknownType.UNKNOWN)  {	  if(objectType    ==    null    ||    objectType    ==    UnknownType.NULL)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
