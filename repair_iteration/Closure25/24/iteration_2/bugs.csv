bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasLendsName())  {	  if(objectType    ==    null    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasValueName())  {	  if(objectType    ==    null    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
4	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType.isUnknownType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
5	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isConstructor())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isConstructor())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.hasValueName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasValueName())  {	  if(objectType!=    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
8	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.hasName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.hasName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.hasName())  {	  if(objectType!=    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
9	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType  ==  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType  ==  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType  ==  null)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
10	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType!=  null)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
11	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType!=  null)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
12	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType!=  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType!=  null)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
13	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType  ==  null)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType  ==  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType  ==  null)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
14	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(name.getLastChild(),  objectType);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  objectType);	      	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(name.getFirstChild(),  objectType);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getFirstChild(),  objectType);	      	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  scope  =  traverse(objectType.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(objectType.getLastChild(),  scope);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  objectType);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	Scope  scope  =  traverse(name.getLastChild(),  objectType);	      	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasValueName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.hasValueName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasValueName())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
23	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
24	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
25	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  ==  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName().length()  ==  0)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName().length()  ==  0)  {	  if(objectType!=    null    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()!=  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
27	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType.getReferenceName()!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.getReferenceName()!=  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
28	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName()!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName()!=  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.getReferenceName()!=  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.getReferenceName()  ==  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.getReferenceName()  ==  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
30	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  ==  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  ==  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
31	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasLendsName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.hasReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
33	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
34	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasValueName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasValueName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.isInstanceType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isInstanceType())  {	  if(objectType    ==    null    ||    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  if(objectType  ==  null  &&  objectType.isInstanceType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  &&  objectType.isInstanceType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  &&  objectType.isInstanceType())  {	  if(objectType    ==    null    ||    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isInstanceType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInstanceType())  {	  if(objectType    ==    null    ||    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isFunction())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isFunction())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isFunction())  {	  if(objectType!=    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  if(objectType!=  null  ||!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||!objectType.hasReferenceName())  {	  if(objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
42	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isConstructor())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isConstructor())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(null))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isSubtype(null))  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isSubtype(null))  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
45	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isInterface())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
46	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ==  null)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.getReferenceName()  ==  null)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.getReferenceName()  ==  null)  {	  if(objectType    ==    null    ||    objectType.getReferenceName()!=    null)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
47	[BUG]  [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(objectType.getFirstChild(),  scope);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(objectType.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
48	[BUG]  [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  scope  =  traverse(name.getFirstChild(),  scope);  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
49	[BUG]  [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null)  {  scope  =  traverse(name.getLastChild(),  scope);  }  else  {  return  scope;  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
50	[BUG]  [BUGGY]  n.setJSType(objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  n.setJSType(objectType);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	n.setJSType(objectType);	      	non-compiled	[CE]  ';'  expected	7	None	replace
51	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  value);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(name.getLastChild(),  value);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(name.getLastChild(),  value);	      	non-compiled	[CE]  ';'  expected	7	None	replace
52	[BUG]  [BUGGY]  scope  =  traverse(value.getFirstChild(),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(value.getFirstChild(),  objectType);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(value.getFirstChild(),  objectType);	      	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  scope  =  traverse(value.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  scope  =  traverse(value.getLastChild(),  scope);  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	scope  =  traverse(value.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.getReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.getReferenceName())  {	  if(objectType!=    null    &&    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
55	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
56	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInterface()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
57	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  &&!objectType.hasReferenceName())  {	  if(objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
58	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType  ==  UnknownType.NULL)  {	  if(objectType    ==    null    ||    objectType!=    null)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
59	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
60	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
61	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isUnknownType()  ||  objectType.isPrimitive())  {	  if(objectType    ==    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
62	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasReferenceName()  ||  objectType.hasReferenceName())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
63	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.hasReferenceName()  ||  objectType.hasChildren())  {	  if(objectType    ==    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
64	[BUG]  [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  ==  null  ||  objectType.isInstanceType()  ||  objectType.isInterface())  {	  if(objectType    ==    null    ||    objectType.isInstanceType())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
65	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  &&!hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.hasLendsName)  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.hasLendsName)  {	  if(objectType!=    null    &&    objectType.hasReferenceName()    &&!hasLendsName)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
67	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isInterface()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isInterface())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
68	[BUG]  [BUGGY]  if(objectType  >=  null  &&  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType  >=  null  &&  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType  >=  null  &&  objectType.hasReferenceName())  {	  if(objectType!=    null    ||    objectType.hasReferenceName())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
69	[BUG]  [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  ||  objectType.isUnknownType()  ||  objectType.hasReferenceName())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);    [BUGGY]  if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {  [BUGGY]    return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	663	663	1	replace	if(objectType!=  null  &&  objectType.isUnknownType()  ||  objectType.isUnknownType())  {	  if(objectType!=    null    ||    objectType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
