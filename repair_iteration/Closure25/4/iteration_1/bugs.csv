bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.getLastChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.getLastChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  Node  constructor  =  n.getNext();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.getNext();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.getNext();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
3	[BUG]  [BUGGY]  Node  constructor  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  scope.getFirstChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  scope.getFirstChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
4	[BUG]  [BUGGY]  Node  constructor  =  n.getParent();  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.getParent();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.getParent();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]  Node  constructor  =  n.getType();  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.getType();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.getType();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
6	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]    [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	  	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  Node  constructor  =  n!=  null?  scope.getLastChild()  :  n.getLastChild();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n!=  null?  scope.getLastChild()  :  n.getLastChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n!=  null?  scope.getLastChild()  :  n.getLastChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  Node  constructor  =  n  ==  null?  scope.getLastChild()  :  n.getLastChild();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n  ==  null?  scope.getLastChild()  :  n.getLastChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n  ==  null?  scope.getLastChild()  :  n.getLastChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  Node  constructor  =  n!=  null?  scope.getFirstChild()  :  n.getLastChild();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n!=  null?  scope.getFirstChild()  :  n.getLastChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n!=  null?  scope.getFirstChild()  :  n.getLastChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  Node  constructor  =  n  ==  null?  scope.getFirstChild()  :  n.getLastChild();  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n  ==  null?  scope.getFirstChild()  :  n.getLastChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n  ==  null?  scope.getFirstChild()  :  n.getLastChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  Node  constructor  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.removeFirstChild();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.removeFirstChild();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  Node  constructor  =  n.cloneTree();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.cloneTree();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.cloneTree();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  Node  constructor  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  [BUGGY]  Node  constructor  =  n.getFirstChild().getNext();  [BUGGY]  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1037	1037	1	replace	Node  constructor  =  n.getFirstChild().getNext();	Node  constructor  =  n.getFirstChild();  	non-compiled	[CE]  ';'  expected	7	None	replace
