bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.cloneTree(),  scope);	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope.cloneTree());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n.getFirstChild(),  scope.cloneTree());	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  null);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.cloneTree(),  null);	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.clonePair());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.clonePair());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.clonePair());	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.getParent());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.getParent());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.getParent());	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.getType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.getType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.getType());	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  break;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE));  break;	  n.setJSType(getNativeType(STRING_TYPE));    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
8	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  break;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));  break;	  n.setJSType(getNativeType(STRING_TYPE));    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
9	[BUG]  [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  break;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NO_TYPE));  break;	  n.setJSType(getNativeType(STRING_TYPE));    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
10	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE));  break;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE));  break;	  n.setJSType(getNativeType(STRING_TYPE));    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
11	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseAdd(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseAdd(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseAdd(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
12	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseNext(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseNext(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseNext(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
13	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseInt(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseInt(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseInt(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
14	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseRemove(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseRemove(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseRemove(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
15	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseShort(n,  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseShort(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseShort(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
16	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE,  castType));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE,  castType));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE,  castType));	  n.setJSType(getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE)+  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE)+  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE)+  1);	  n.setJSType(getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE_NOT_OBJECT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(FUNCTION_TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  n.setJSType(getNativeType(NO_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NO_OBJECT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NO_OBJECT_TYPE));	  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	1	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseNegated(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegated(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegated(n,  scope.cloneTree());	  scope    =    traverseNegated(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseNegated(n,  scope.getJSDocInfo());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegated(n,  scope.getJSDocInfo());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegated(n,  scope.getJSDocInfo());	  scope    =    traverseNegated(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseNegated(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegated(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegated(n,  scope  -  1);	  scope    =    traverseNegated(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
23	[BUG]  [BUGGY]  scope  =  traverseFunction(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseFunction(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseFunction(n,  scope);	  scope    =    traverseRemove(n,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
24	[BUG]  [BUGGY]  scope  =  traverseInclude(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseInclude(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseInclude(n,  scope);	  scope    =    traverseRemove(n,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
25	[BUG]  [BUGGY]  scope  =  traverseEmpty(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEmpty(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n.getLastChild(),  scope);	  scope    =    traverseEmpty(n,    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
26	[BUG]  [BUGGY]  scope  =  traverseEmpty(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEmpty(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n.getFirstChild(),  scope);	  scope    =    traverseEmpty(n,    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseEmpty(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEmpty(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n,  scope.cloneTree());	  scope    =    traverseEmpty(n,    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseEmpty(n,  scope);  break;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEmpty(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n,  scope);  break;	  scope    =    traverseChildren(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	51	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseSingleNode(n,  scope);  break;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseSingleNode(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseSingleNode(n,  scope);  break;	  scope    =    traverseChildren(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	51	None	replace
30	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope,  castType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope,  castType);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  scope,  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
31	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE),  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)/  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)/  1;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)/  1;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  2;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)+  2;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  2;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)-  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)-  1;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)-  1;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  3;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)+  3;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  3;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  1L;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)+  1L;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  1L;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  4;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)+  4;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  4;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseInt(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseInt(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseInt(n,  scope  -  1);	  scope    =    traverseInt(n,    scope);    	non-compiled	[CE]  ';'  expected	39	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseInt(n,  scope.intValue());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseInt(n,  scope.intValue());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseInt(n,  scope.intValue());	  scope    =    traverseInt(n,    scope);    	non-compiled	[CE]  ';'  expected	39	None	replace
40	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE,  castType));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE,  castType));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNBOOLEAN_TYPE,  castType));	  n.setJSType(getNativeType(UNBOOLEAN_TYPE));    	non-compiled	[CE]  ';'  expected	46	None	replace
41	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNBOOLEAN_TYPE),  scope);	  n.setJSType(getNativeType(UNBOOLEAN_TYPE));    	non-compiled	[CE]  ';'  expected	46	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  +  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  +  2);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  +  2);	  scope    =    traverseNumber(n,    scope    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseNull(n,  scope  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n,  scope  +  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n,  scope  +  1);	  scope    =    traverseNumber(n,    scope    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  +  3);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  +  3);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  +  3);	  scope    =    traverseNumber(n,    scope    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope  +  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope  +  1);	  scope    =    traverseNumber(n,    scope    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseStart(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseStart(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseStart(n,  scope);	  scope    =    traverseEnd(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseEnd(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEnd(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n,  scope.cloneTree());	  scope    =    traverseEnd(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseEnd(n,  scope.getJSDocInfo());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEnd(n,  scope.getJSDocInfo());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n,  scope.getJSDocInfo());	  scope    =    traverseEnd(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseReturn(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseReturn(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseReturn(n,  scope);	  scope    =    traverseAdd(n,    scope);    	non-compiled	[CE]  ';'  expected	38	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseNull(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n,  scope  -  1);	  scope    =    traverseNumber(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.length  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.length  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.length  -  1);	  scope    =    traverseNumber(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  -  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  -  2);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  -  2);	  scope    =    traverseNumber(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseShort(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseShort(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseShort(n,  scope);  break;	  scope    =    traverseLocal(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	44	None	replace
54	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  scope),  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  scope),  castType);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  scope),  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    scope));    	non-compiled	[CE]  ';'  expected	25	None	replace
55	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE,  scope));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE,  scope));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE,  scope));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    scope));    	non-compiled	[CE]  ';'  expected	25	None	replace
56	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  STRING_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  STRING_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  STRING_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    scope));    	non-compiled	[CE]  ';'  expected	25	None	replace
57	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    scope));    	non-compiled	[CE]  ';'  expected	25	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseSingleNode(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseSingleNode(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseSingleNode(n.getFirstChild(),  scope);	  scope    =    traverseSingleNode(n,    scope);    	non-compiled	[CE]  ';'  expected	29	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseSingleNode(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseSingleNode(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseSingleNode(n.getLastChild(),  scope);	  scope    =    traverseSingleNode(n,    scope);    	non-compiled	[CE]  ';'  expected	29	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseNode(n,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNode(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNode(n,  scope);	  scope    =    traverseSingleNode(n,    scope);    	non-compiled	[CE]  ';'  expected	29	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
62	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneChildren());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.cloneChildren());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.cloneChildren());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
63	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n,  scope.cloneTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
64	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneChild());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.cloneChild());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.cloneChild());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
65	[BUG]  [BUGGY]  scope  =  traverseRemove(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseRemove(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n,  scope.cloneTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
66	[BUG]  [BUGGY]  scope  =  traverseAdd(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseAdd(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseAdd(n,  scope.cloneTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseFirstChild(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseFirstChild(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseFirstChild(n,  scope);	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
68	[BUG]  [BUGGY]  scope  =  traverseFirst(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseFirst(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseFirst(n,  scope);	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
69	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNext(n,  scope.cloneTree());	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
70	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE),  castType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE),  castType);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE),  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    castType);    	non-compiled	[CE]  ';'  expected	42	None	replace
71	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  castType,  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    castType);    	non-compiled	[CE]  ';'  expected	42	None	replace
72	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n.getLastChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
73	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
74	[BUG]  [BUGGY]  scope  =  traverseNumber(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
75	[BUG]  [BUGGY]  scope  =  traverse(n.getNext(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n.getNext(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n.getNext(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
76	[BUG]  [BUGGY]  scope  =  traverseNumber(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n.getLastChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
77	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  break;	  n.setJSType(getNativeType(NUMBER_TYPE));    break;    	non-compiled	[CE]  ';'  expected	54	None	replace
78	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  break;	  n.setJSType(getNativeType(NUMBER_TYPE));    break;    	non-compiled	[CE]  ';'  expected	54	None	replace
79	[BUG]  [BUGGY]  scope  =  traverseRemove(n,  scope  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseRemove(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n,  scope  -  1);	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
80	[BUG]  [BUGGY]  scope  =  traverseAdd(n,  scope  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseAdd(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseAdd(n,  scope  -  1);	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
81	[BUG]  [BUGGY]  scope  =  traverse(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n,  scope  -  1);	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
82	[BUG]  [BUGGY]  scope  =  traverseLocal(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseLocal(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLocal(n.getFirstChild(),  scope);	  scope    =    traverseLocal(n,    scope);    	non-compiled	[CE]  ';'  expected	28	None	replace
83	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseLocal(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLocal(n,  scope.cloneTree());	  scope    =    traverseLocal(n,    scope);    	non-compiled	[CE]  ';'  expected	28	None	replace
84	[BUG]  [BUGGY]  scope  =  traverseNull(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n,  scope);  break;	  scope    =    traverseNumber(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	9	None	replace
85	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseLong(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLong(n,  scope);  break;	  scope    =    traverseNumber(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	9	None	replace
86	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  castType),  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	23	None	replace
87	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	23	None	replace
88	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	23	None	replace
89	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  scope));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  scope));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  scope));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
90	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  STRING_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  STRING_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  STRING_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
91	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType),  scope);	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
92	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  DEFAULT_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  DEFAULT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  DEFAULT_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
93	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  UNKNOWN_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  UNKNOWN_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
94	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  NO_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  NO_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  NO_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
95	[BUG]  [BUGGY]  scope  =  traverseNull(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n,  scope.cloneTree());	  scope    =    traverseNull(n,    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
96	[BUG]  [BUGGY]  scope  =  traverseNotNull(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNotNull(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNotNull(n,  scope);	  scope    =    traverseNull(n,    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
97	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope.cloneTree());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
98	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getJSDocInfo());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope.getJSDocInfo());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope.getJSDocInfo());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
99	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope.getJSType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope.getJSType());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
100	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope  -  1);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
101	[BUG]  [BUGGY]  scope  =  traverseUndefined(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseUndefined(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseUndefined(n,  scope);	  scope    =    traverseShort(n,    scope);    	non-compiled	[CE]  ';'  expected	48	None	replace
102	[BUG]  [BUGGY]  n.setJSType(getNativeType(FUNCTION_LITERAL_UNDEFINED_THIS));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(FUNCTION_LITERAL_UNDEFINED_THIS));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(FUNCTION_LITERAL_UNDEFINED_THIS));	  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));    	non-compiled	[CE]  ';'  expected	52	None	replace
103	[BUG]  [BUGGY]  scope  =  traverseAdd(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseAdd(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseAdd(n,  scope);  break;	  scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	6	None	replace
104	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNext(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNext(n,  scope);  break;	  scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	6	None	replace
105	[BUG]  [BUGGY]  scope  =  traverseRemove(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseRemove(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n,  scope);  break;	  scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	6	None	replace
106	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegate(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegate(n,  scope.cloneTree());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
107	[BUG]  [BUGGY]  scope  =  traverseNoChildren(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNoChildren(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNoChildren(n,  scope);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
108	[BUG]  [BUGGY]  scope  =  traverseChildren(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n.getLastChild(),  scope);	  scope    =    traverseChildren(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  scope  =  traverseEnd(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEnd(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n.getFirstChild(),  scope);	  scope    =    traverseChildren(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
110	[BUG]  [BUGGY]  scope  =  traverseChildren(n.getNext(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n.getNext(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n.getNext(),  scope);	  scope    =    traverseChildren(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
111	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseLong(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLong(n,  scope  -  1);	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
112	[BUG]  [BUGGY]  scope  =  traverseStartScope(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseStartScope(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseStartScope(n,  scope);	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
113	[BUG]  [BUGGY]  scope  =  traverseEndScope(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEndScope(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEndScope(n.getFirstChild(),  scope);	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
114	[BUG]  [BUGGY]  scope  =  traverseEndScope(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEndScope(n,  scope.cloneTree());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEndScope(n,  scope.cloneTree());	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
115	[BUG]  [BUGGY]  scope  =  traverseEndScope(n,  scope.getJSDocInfo());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEndScope(n,  scope.getJSDocInfo());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEndScope(n,  scope.getJSDocInfo());	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
116	[BUG]  [BUGGY]  scope  =  traverseNumberScope(n,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumberScope(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumberScope(n,  scope);	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
117	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  scope));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  scope));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  scope));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
118	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  STRING_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  STRING_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  STRING_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
119	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  DEFAULT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  DEFAULT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  DEFAULT_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
120	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  UNKNOWN_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  UNKNOWN_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
121	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  NO_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  NO_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  NO_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
122	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  type));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  type));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  type));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
123	[BUG]  [BUGGY]  scope  =  traverseNumber(n.getLastChild(),  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n.getLastChild(),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n.getLastChild(),  scope);  break;	  scope    =    traverseNumber(n.getFirstChild(),    scope);    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
124	[BUG]  [BUGGY]  scope  =  traverseNull(n.getFirstChild(),  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n.getFirstChild(),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n.getFirstChild(),  scope);  break;	  scope    =    traverseNumber(n.getFirstChild(),    scope);    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
125	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n.getFirstChild(),  scope);  break;	  scope    =    traverseNumber(n.getFirstChild(),    scope);    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
126	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  break;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n.getLastChild(),  scope);  break;	  scope    =    traverseNumber(n.getFirstChild(),    scope);    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
127	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  break;	  n.setJSType(getNativeType(UNKNOWN_TYPE));    break;    	non-compiled	[CE]  ';'  expected	7	None	replace
128	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  break;	  n.setJSType(getNativeType(UNKNOWN_TYPE));    break;    	non-compiled	[CE]  ';'  expected	7	None	replace
129	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.cloneTree(),  scope);	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
130	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.cloneChildren());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.cloneChildren());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.cloneChildren());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
131	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.getType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.getType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.getType());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
132	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.getParent());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.getParent());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.getParent());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
133	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree(),  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree(),  null);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.cloneTree(),  null);	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
134	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE,  castType));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE,  castType));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECT_TYPE,  castType));	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n.getFirstChild(),  scope  -  1);	  scope    =    traverseChildren(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
136	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope  -  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope  -  2);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope  -  2);	  scope    =    traverseChildren(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
137	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope  +  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope  +  1);	  scope    =    traverseChildren(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
138	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  INVALID_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  INVALID_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  INVALID_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	23	None	replace
139	[BUG]  [BUGGY]  scope  =  traverseUndefined(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseUndefined(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseUndefined(n,  scope);  break;	  scope    =    traverseLocal(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	44	None	replace
140	[BUG]  [BUGGY]  scope  =  traverseNull(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNull(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n.getFirstChild(),  scope);	  scope    =    traverseChildren(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
141	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  NUMBER_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  NUMBER_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  NUMBER_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	22	None	replace
142	[BUG]  [BUGGY]  scope  =  traverseIntLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseIntLiteral(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseIntLiteral(n,  scope);	  scope    =    traverseAdd(n,    scope);    	non-compiled	[CE]  ';'  expected	38	None	replace
143	[BUG]  [BUGGY]  scope  =  traverseEnd(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEnd(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n,  scope  -  1);	  scope    =    traverseEnd(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
144	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE),  scope);	  n.setJSType(getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
145	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE),  castType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE),  castType);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE),  castType);	  n.setJSType(getNativeType(ARRAY_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
146	[BUG]  [BUGGY]  n.setJSType(getNativeType(THIS_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(THIS_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(THIS_TYPE));	  n.setJSType(getNativeType(TEMPLATE_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
147	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));	  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));    	non-compiled	[CE]  ';'  expected	43	None	replace
148	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.getJSType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.getJSType());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
149	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.clonePair());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.clonePair());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.clonePair());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
150	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseLocal(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLocal(n,  scope  -  1);	  scope    =    traverseLocal(n,    scope);    	non-compiled	[CE]  ';'  expected	28	None	replace
151	[BUG]  [BUGGY]  scope  =  traverseShort(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseShort(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseShort(n,  scope  -  1);	  scope    =    traverseShort(n,    scope);    	non-compiled	[CE]  ';'  expected	48	None	replace
152	[BUG]  [BUGGY]  scope  =  traverseNE(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNE(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNE(n.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
153	[BUG]  [BUGGY]  scope  =  traverseInt(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseInt(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseInt(n,  scope);  break;	  scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	6	None	replace
154	[BUG]  [BUGGY]  scope  =  traverseEmpty(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEmpty(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n,  scope  -  1);	  scope    =    traverseEmpty(n,    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
155	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE));  break;	  n.setJSType(getNativeType(NUMBER_TYPE));    break;    	non-compiled	[CE]  ';'  expected	54	None	replace
156	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegate(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegate(n,  scope  -  1);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
157	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope  <  Node>());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope  <  Node>());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegate(n,  new  FlowScope  <  Node>());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
158	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegate(n,  null);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegate(n,  null);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
159	[BUG]  [BUGGY]  scope  =  traverseNEgate(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEgate(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEgate(n,  scope);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
160	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope  -  1  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope  -  1  +  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope  -  1  +  1);	  scope    =    traverseChildren(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
161	[BUG]  [BUGGY]  n.setJSType(getNativeType(OTHER_TYPE,  castType));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OTHER_TYPE,  castType));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OTHER_TYPE,  castType));	  n.setJSType(getNativeType(OTHER_TYPE));    	non-compiled	[CE]  ';'  expected	50	None	replace
162	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getParent());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.getParent());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.getParent());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
163	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.getType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.getType());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
164	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.getLastChild());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
165	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope  &  0xFFFF);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope  &  0xFFFF);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope  &  0xFFFF);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
166	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  null);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  null);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  null);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
167	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseNull(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseNull(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseNull(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
168	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseNegate(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseNegate(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseNegate(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
169	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  +  1  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  +  1  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  +  1  -  1);	  scope    =    traverseNumber(n,    scope    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
170	[BUG]  [BUGGY]  scope  =  traverseEndScope(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEndScope(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEndScope(n,  scope  -  1);	  scope    =    traverseEndScope(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
171	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNext(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNext(n,  scope  -  1);	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
172	[BUG]  [BUGGY]  scope  =  traverseNEgated(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEgated(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEgated(n,  scope);	  scope    =    traverseNegated(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
173	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  NUMBER_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  NUMBER_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  NUMBER_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
174	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  INVALID_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  INVALID_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  INVALID_TYPE));	  n.setJSType(getNativeType(STRING_TYPE,    castType));    	non-compiled	[CE]  ';'  expected	32	None	replace
175	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  -  1  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  -  1  +  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  -  1  +  1);	  scope    =    traverseNumber(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
176	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  *  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope  *  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  *  1);	  scope    =    traverseNumber(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
177	[BUG]  [BUGGY]  scope  =  traverseRemove(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseRemove(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n.getFirstChild(),  scope);	  scope    =    traverseRemove(n,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
178	[BUG]  [BUGGY]  scope  =  traverseRemove(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseRemove(n.getLastChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n.getLastChild(),  scope);	  scope    =    traverseRemove(n,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
179	[BUG]  [BUGGY]  scope  =  traverseEnd(n,  scope);  break;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseEnd(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n,  scope);  break;	  scope    =    traverseChildren(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	51	None	replace
180	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.cloneChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.cloneChildren());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.cloneChildren());	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
181	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  0;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope)+  0;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  0;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
182	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE),  castType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE),  castType);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNBOOLEAN_TYPE),  castType);	  n.setJSType(getNativeType(UNBOOLEAN_TYPE));    	non-compiled	[CE]  ';'  expected	46	None	replace
183	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE)+  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE)+  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNBOOLEAN_TYPE)+  1);	  n.setJSType(getNativeType(UNBOOLEAN_TYPE));    	non-compiled	[CE]  ';'  expected	46	None	replace
184	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEW(n,  scope  -  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEW(n,  scope  -  1);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
185	[BUG]  [BUGGY]  scope  =  traverseNegated(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegated(n,  scope.getJSType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegated(n,  scope.getJSType());	  scope    =    traverseNegated(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
186	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEW(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEW(n,  scope);  break;	  scope    =    traverseNumber(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	9	None	replace
187	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NEW_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TYPE_NEW_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_NEW_TYPE));	  n.setJSType(getNativeType(TYPE_STRING_TYPE));    	non-compiled	[CE]  ';'  expected	49	None	replace
188	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  this);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree(),  this);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.cloneTree(),  this);	  scope    =    traverseChildren(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	12	None	replace
189	[BUG]  [BUGGY]  scope  =  traverseNE(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNE(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNE(n,  scope);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
190	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEW(n.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
191	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverse(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverse(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverse(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
192	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseNegative(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  case  Token.NEW:  scope  =  traverseNegative(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseNegative(n,  scope);  break;	  case    Token.NEW:    scope    =    traverseNew(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	53	None	replace
193	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEgative(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEgative(n,  scope);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
194	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope);  break;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNegative(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope);  break;	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
195	[BUG]  [BUGGY]  scope  =  traverseNEGative(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEGative(n,  scope);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEGative(n,  scope);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  ';'  expected	55	None	replace
196	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEW(n.getFirstChild(),  scope);  break;	  scope    =    traverseNumber(n.getFirstChild(),    scope);    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
197	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope)+  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope)+  1;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope)+  1;	  scope    =    traverseNumber(n,    scope)+    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
198	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_TYPE));  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_NOT_TYPE));	  n.setJSType(getNativeType(NOT_TYPE));    	non-compiled	[CE]  ';'  expected	45	None	replace
199	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope  *  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseChildren(n,  scope  *  1);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope  *  1);	  scope    =    traverseChildren(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	40	None	replace
200	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.getScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope.getScope());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.getScope());	  scope    =    traverseNumber(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	33	None	replace
201	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_STRING_TYPE));  break;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  n.setJSType(getNativeType(TYPE_STRING_TYPE));  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_STRING_TYPE));  break;	  n.setJSType(getNativeType(STRING_TYPE));    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
202	[BUG]  [BUGGY]  scope  =  traverseReference(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseReference(n,  scope);  break;  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseReference(n,  scope);  break;	  scope    =    traverseLocal(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	44	None	replace
203	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  null);  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.cloneTree(),  null);	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
204	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);      [BUGGY]  scope  =  traverseNew(n,  scope.getJSType());  [BUGGY]        case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.getJSType());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	21	None	replace
