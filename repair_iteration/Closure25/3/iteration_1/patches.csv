bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(NUMBER_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
5	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECT_TYPE));	  n.setJSType(getNativeType(NUMBER_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNew(n,  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  break;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseNumber(n.getFirstChild(),  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n.getFirstChild(),  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n.getFirstChild(),  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n,  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  n.setJSType(getNativeType(NULL_TYPE));  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(NULL_TYPE));  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NULL_TYPE));  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE));  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseChildren(n,  scope.cloneTree());  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope.cloneTree());	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseChildren(n.getFirstChild(),  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n.getFirstChild(),  scope);	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseEmpty(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseEmpty(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEmpty(n,  scope);	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  scope  =  traverseEndScope(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseEndScope(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEndScope(n,  scope);	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseNull(n,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNull(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNull(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
17	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverse(n.getFirstChild(),  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseNegated(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNegated(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegated(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseRemove(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseRemove(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseRemove(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNext(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNext(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree());  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope.cloneTree());	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
22	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE,  castType));	  n.setJSType(getNativeType(OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  scope));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  scope));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  scope));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseLong(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLong(n,  scope);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n,  scope  -  1);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  -  1);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseLocal(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLocal(n,  scope);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseSingleNode(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseSingleNode(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseSingleNode(n,  scope);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(FUNCTION_TYPE));	  n.setJSType(getNativeType(OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE));	  n.setJSType(getNativeType(NUMBER_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
32	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  castType));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(STRING_TYPE,  castType));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(STRING_TYPE,  castType));	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n,  scope.cloneTree());  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope.cloneTree());	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n,  scope  +  1);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope  +  1);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNumber(n,  scope)+  1;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNumber(n,  scope)+  1;	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  -  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNew(n,  scope  -  1);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNew(n,  scope  -  1);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNegate(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegate(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseAdd(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseAdd(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseAdd(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseInt(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseInt(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseInt(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope  -  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseChildren(n,  scope  -  1);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope  -  1);	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseEnd(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseEnd(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseEnd(n,  scope);	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
43	[BUG]  [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(CONSTRUCTOR_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseLocal(n,  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseLocal(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(NOT_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NOT_TYPE));	  n.setJSType(getNativeType(NULL_TYPE));    	non-compiled	[CE]  ';'  expected	6	None	replace
46	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNBOOLEAN_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(UNBOOLEAN_TYPE));	  n.setJSType(getNativeType(BOOLEAN_TYPE));    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNEW(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNEW(n,  scope);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseShort(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseShort(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseShort(n,  scope);	  scope    =    traverseNumber(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_STRING_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(TYPE_STRING_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TYPE_STRING_TYPE));	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  n.setJSType(getNativeType(OTHER_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(OTHER_TYPE));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(OTHER_TYPE));	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	8	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope);  break;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseChildren(n,  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseChildren(n,  scope);  break;	  scope    =    traverseChildren(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
52	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));	  n.setJSType(getNativeType(NUMBER_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
53	[BUG]  [BUGGY]  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  n.setJSType(getNativeType(NUMBER_TYPE));  break;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  n.setJSType(getNativeType(NUMBER_TYPE));  break;  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	n.setJSType(getNativeType(NUMBER_TYPE));  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);    [BUGGY]  scope  =  traverseNegative(n,  scope);  [BUGGY]      case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  n.setJSType(getNativeType(NUMBER_TYPE));  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	289	289	1	replace	scope  =  traverseNegative(n,  scope);	  scope    =    traverseNew(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
