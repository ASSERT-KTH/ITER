bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
2	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBestValue(n));  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBestValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBestValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
3	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLValue(n));  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
4	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
5	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n));  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
6	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
7	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n));  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
8	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]    [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	  	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
9	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestQualifiedName(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
10	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVar(n));  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVar(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestVar(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
11	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestValue(n));  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
12	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLlue(n));  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLlue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBestLlue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
13	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getBestLValue(n));  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getBestLValue(n));  [BUGGY]  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getBestLValue(n));	String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  	non-compiled	[CE]  ';'  expected	53	None	replace
