bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  objectType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
2	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
3	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLargerValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLargerValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLargerValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
4	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
5	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getLargerValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getLargerValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getLargerValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
6	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
7	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
8	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
9	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasReferenceName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasReferenceName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasReferenceName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
10	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  isLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  isLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  isLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
11	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	80	None	replace
12	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
13	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastQualifiedName(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
14	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(name));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(name));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
15	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
16	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
17	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  false);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
18	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
19	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
20	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
21	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
22	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  valueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
23	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
24	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
25	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
26	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
27	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
28	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getValue());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getValue());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getValue());	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
29	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastShortValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastShortValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastShortValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
30	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n),  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastQualifiedName(n),  objectType);	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastSimpleValue(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastSimpleValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastSimpleValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
32	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getBestValue(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getBestValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getBestValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
33	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastValue(n));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getLeastValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
34	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n));    	non-compiled	[CE]  ';'  expected	27	None	replace
35	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n));    	non-compiled	[CE]  ';'  expected	27	None	replace
36	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalVar(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n));    	non-compiled	[CE]  ';'  expected	27	None	replace
37	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalVar(n));    	non-compiled	[CE]  ';'  expected	27	None	replace
38	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getStringValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getStringValue(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
41	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getStringValue());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getStringValue());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getStringValue());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  false);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
44	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    scope);    	non-compiled	[CE]  ';'  expected	51	None	replace
45	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    scope);    	non-compiled	[CE]  ';'  expected	51	None	replace
46	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    scope);    	non-compiled	[CE]  ';'  expected	51	None	replace
47	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
48	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
49	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(name));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(name));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
50	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
51	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  true);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
52	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFileName(n));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFileName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFileName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
53	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
54	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
55	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
56	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLastVar(n));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLastVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLastVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
57	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLlue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLlue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLlue(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	22	None	replace
58	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	22	None	replace
59	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVariant(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVariant(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVariant(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	22	None	replace
60	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
61	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
62	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
63	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  null);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
64	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  true);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  false,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
65	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
66	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  null);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
68	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
69	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  valueType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  valueType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
70	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  true);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  true);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
72	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
73	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
74	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n,  scope,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
75	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  2);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  2);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
76	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n)+  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
77	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
78	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)/  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)/  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)/  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
79	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
80	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
81	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
82	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getJSDocInfo());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
83	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
84	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
85	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
86	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getTopLevelVar(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getTopLevelVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getTopLevelVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
87	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
88	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
89	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
90	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerVar(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
91	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
92	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasReferenceName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasReferenceName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasReferenceName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	55	None	replace
93	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  objectType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	55	None	replace
94	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasLendsName,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	55	None	replace
95	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
96	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
97	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBooleanValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBooleanValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBooleanValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
98	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumberValue(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumberValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumberValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
99	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLongValue(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLongValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLongValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
100	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  value,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  value,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  value,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    value);    	non-compiled	[CE]  ';'  expected	91	None	replace
101	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  name);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    value);    	non-compiled	[CE]  ';'  expected	91	None	replace
102	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
103	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
104	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastQualifiedName(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
105	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastQualifiedName(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
106	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType.getReferenceName());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType.getReferenceName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType.getReferenceName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
107	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getJSType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getJSType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
108	[BUG]  [BUGGY]  JSType  rawValueType  =  scope.getJSType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  scope.getJSType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  scope.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
109	[BUG]  [BUGGY]  JSType  rawValueType  =  name.getJSType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  name.getJSType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  name.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
110	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
111	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getVar(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getVar(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
112	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
113	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVar(n)+  1);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
114	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getString());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getString());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
115	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalName(n));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalName(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
116	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLongValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLongValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLongValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
117	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastValue(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
118	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
119	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getValue(n),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
120	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  name);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  name);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    value);    	non-compiled	[CE]  ';'  expected	67	None	replace
121	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  value);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVar(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    value);    	non-compiled	[CE]  ';'  expected	67	None	replace
122	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  value);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    value);    	non-compiled	[CE]  ';'  expected	67	None	replace
123	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
124	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  true);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
125	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
126	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
127	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getString());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getString());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	85	None	replace
128	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	85	None	replace
129	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	85	None	replace
130	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(name));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(name));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	85	None	replace
131	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getString(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	85	None	replace
132	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getQualifiedName());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
133	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getReferenceName());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getReferenceName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getReferenceName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
134	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getQualifiedName());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
135	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
136	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name.getQualifiedName());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(name.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
137	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getQualifiedName());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(objectType.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
138	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
139	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
140	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getReferenceName(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
141	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
142	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE)+  1);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
143	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
144	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getNativeType(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
145	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.UNKNOWN_TYPE);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.UNKNOWN_TYPE);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
146	[BUG]  [BUGGY]  n  =  n.getJSDocInfo().getLendsName();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getJSDocInfo().getLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getJSDocInfo().getLendsName();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
147	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getLastChild();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
148	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getFirstChild();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
149	[BUG]  [BUGGY]  n  =  scope.getJSDocInfo();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  scope.getJSDocInfo();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  scope.getJSDocInfo();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
150	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getNext();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getNext();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
151	[BUG]  [BUGGY]  n  =  n.getJSDocInfo().getValue();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getJSDocInfo().getValue();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getJSDocInfo().getValue();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
152	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
153	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getLeastVar(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getLeastVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getLeastVar(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
154	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
155	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastVar(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastVar(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
156	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
157	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
158	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  true);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  false,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
159	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  false);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
160	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  false);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
161	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  null);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
162	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	78	None	replace
163	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	78	None	replace
164	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	78	None	replace
165	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  name);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    value);    	non-compiled	[CE]  ';'  expected	82	None	replace
166	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  value,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  value,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  value,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    value);    	non-compiled	[CE]  ';'  expected	82	None	replace
167	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(name),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    value);    	non-compiled	[CE]  ';'  expected	82	None	replace
168	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
169	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
170	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getSourceName(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getSourceName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getSourceName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
171	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
172	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	35	None	replace
173	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	35	None	replace
174	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getRawClass();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getRawClass();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getRawClass();	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
175	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getQualifiedName();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getQualifiedName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getQualifiedName();	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
176	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
177	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
178	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
179	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
180	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getReturnType();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getReturnType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getReturnType();	  JSType    rawValueType    =    objectType.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
181	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
182	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
183	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLong(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
184	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
185	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(n,  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(n,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(n,  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
186	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
187	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
188	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(name,  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(name,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(name,  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
189	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
190	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
191	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
192	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  objectType,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
193	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
194	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
195	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
196	[BUG]  [BUGGY]  n.setJSType(objectType.getName());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
197	[BUG]  [BUGGY]  n.setJSType(objectType.getLocalName());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLocalName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLocalName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
198	[BUG]  [BUGGY]  n.setJSType(objectType.getReferenceName()  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getReferenceName()  +  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getReferenceName()  +  1);	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
199	[BUG]  [BUGGY]  n.setJSType(objectType.getSimpleName());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getSimpleName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getSimpleName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
200	[BUG]  [BUGGY]  n.setJSType(objectType.getLeastSupertype());  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLeastSupertype());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLeastSupertype());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
201	[BUG]  [BUGGY]  n.setJSType(objectType.getLeastReferenceName());  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLeastReferenceName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLeastReferenceName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
202	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getBestValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getBestValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getBestValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
203	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
204	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getValue(n),  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
205	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getQualifiedName(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
206	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getLabelValue(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getLabelValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getLabelValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
207	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getValue(n));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLabelName(NodeUtil.getValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
208	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
209	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
210	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getString(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getString(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getString(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
211	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getString());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(objectType.getString());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
212	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(name));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(name));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
213	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
214	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
215	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
216	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
217	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastValue(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLastValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
218	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValue(NodeUtil.getLeastValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValue(NodeUtil.getLeastValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValue(NodeUtil.getLeastValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
219	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
220	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
221	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
222	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getReferenceName());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getReferenceName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(objectType.getReferenceName());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
223	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n,  objectType));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n,  objectType));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n,  objectType));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
224	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
225	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
226	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
227	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastQualifiedName(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
228	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
229	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  false);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
230	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  false));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  false));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  false));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
231	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
232	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
233	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
234	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  true,  hasLendsName);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  true,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  true,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
235	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
236	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
237	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
238	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getLeastSupertype(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getLeastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(objectType.getLeastSupertype(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
239	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n,  objectType));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n,  objectType));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n,  objectType));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
240	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasReferenceName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasReferenceName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasReferenceName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasReferenceName();    	non-compiled	[CE]  ';'  expected	77	None	replace
241	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name,  objectType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(name,  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
242	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
243	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  type);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
244	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType,  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType,  n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType,  n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
245	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
246	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(n,  scope);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
247	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getValueName(n,  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getValueName(n,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getValueName(n,  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
248	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(n,  scope);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
249	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
250	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getNativeValueName(n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getNativeValueName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getNativeValueName(n,  scope);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
251	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
252	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
253	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
254	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name,  scope));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
255	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getQualifiedName(name));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(objectType.getQualifiedName(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(objectType.getQualifiedName(name));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
256	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  name);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  name);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    value);    	non-compiled	[CE]  ';'  expected	87	None	replace
257	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    value);    	non-compiled	[CE]  ';'  expected	87	None	replace
258	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  hasLendsName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  value,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    value);    	non-compiled	[CE]  ';'  expected	87	None	replace
259	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
260	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getStringValue(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getStringValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
261	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
262	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
263	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NO_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NO_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NO_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
264	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
265	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  2);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  2);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
266	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)/  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)/  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)/  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
267	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  3);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  3);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  3);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
268	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  4);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  4);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  4);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
269	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
270	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
271	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVariant(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVariant(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVariant(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
272	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
273	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
274	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
275	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
276	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
277	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getNativeType(UNKNOWN_TYPE);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getNativeType(UNKNOWN_TYPE);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
278	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  objectType));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  objectType));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  objectType));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
279	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
280	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  hasLendsName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
281	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
282	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
283	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n,  scope));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
284	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
285	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
286	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NODE_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NODE_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NODE_TYPE));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
287	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	14	None	replace
288	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getStringValue(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(objectType.getStringValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	14	None	replace
289	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  true);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  true);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	14	None	replace
290	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
291	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(objectType.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
292	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE)+  1);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
293	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
294	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
295	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
296	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(name,  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
297	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
298	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toLowerCase();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toLowerCase();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toLowerCase();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
299	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getString());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getString());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	89	None	replace
300	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	89	None	replace
301	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLlue(n),    scope);    	non-compiled	[CE]  ';'  expected	105	None	replace
302	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  scope,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLlue(n),  scope,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLlue(n),    scope);    	non-compiled	[CE]  ';'  expected	105	None	replace
303	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	8	None	replace
304	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n)+  1);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	8	None	replace
305	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
306	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
307	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
308	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n,  scope));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
309	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPosition(n));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPosition(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPosition(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
310	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  false);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
311	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLeastSupertype(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLeastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLeastSupertype(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
312	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
313	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
314	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
315	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
316	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
317	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n,  scope));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
318	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
319	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
320	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
321	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    value);    	non-compiled	[CE]  ';'  expected	69	None	replace
322	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  name);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  name);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    value);    	non-compiled	[CE]  ';'  expected	69	None	replace
323	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  value,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    value);    	non-compiled	[CE]  ';'  expected	69	None	replace
324	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    value);    	non-compiled	[CE]  ';'  expected	69	None	replace
325	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
326	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVariant(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVariant(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVariant(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
327	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
328	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(name);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
329	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
330	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
331	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
332	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n).toString();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n).toString();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n).toString();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
333	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  ||  n.getJSType().hasReferenceName();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  ||  n.getJSType().hasReferenceName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  ||  n.getJSType().hasReferenceName();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
334	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()  ==  null  &&  n.getJSType().hasReferenceName();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()  ==  null  &&  n.getJSType().hasReferenceName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()  ==  null  &&  n.getJSType().hasReferenceName();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
335	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isReferenceName();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isReferenceName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isReferenceName();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
336	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isConstructor();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isConstructor();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isConstructor();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
337	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSynthetic();  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSynthetic();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSynthetic();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
338	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getVar(n));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getVar(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
339	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  objectType);	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
340	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
341	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n),  scope);	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
342	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVar(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVar(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
343	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLabel(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLabel(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getLabel(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLabel(n));    	non-compiled	[CE]  ';'  expected	102	None	replace
344	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  objectType);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLabel(n));    	non-compiled	[CE]  ';'  expected	102	None	replace
345	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLabel(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLabel(n));    	non-compiled	[CE]  ';'  expected	102	None	replace
346	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getLabel());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getLabel());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getLabel());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLabel(n));    	non-compiled	[CE]  ';'  expected	102	None	replace
347	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalFunctionName(n));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalFunctionName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalFunctionName(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestVar(n));    	non-compiled	[CE]  ';'  expected	24	None	replace
348	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	33	None	replace
349	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
350	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  true);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
351	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  null);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
352	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope),  false);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  scope),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
353	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  false));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  false));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  false));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
354	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalPart(n));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalPart(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLocalPart(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	13	None	replace
355	[BUG]  [BUGGY]  Node  n  =  name.getLastChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  name.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  name.getLastChild();	  Node    n    =    name.getFirstChild();    	non-compiled	[CE]  ';'  expected	42	None	replace
356	[BUG]  [BUGGY]  Node  n  =  name.getNext();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  name.getNext();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  name.getNext();	  Node    n    =    name.getFirstChild();    	non-compiled	[CE]  ';'  expected	42	None	replace
357	[BUG]  [BUGGY]  Node  n  =  name.getParent();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  name.getParent();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  name.getParent();	  Node    n    =    name.getFirstChild();    	non-compiled	[CE]  ';'  expected	42	None	replace
358	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
359	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  hasLendsName);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  hasLendsName);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
360	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE,  objectType));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE,  objectType));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE,  objectType));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
361	[BUG]  [BUGGY]  Node  n  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  scope.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  scope.getLastChild();	  Node    n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
362	[BUG]  [BUGGY]  Node  n  =  objectType.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  objectType.getFirstChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  objectType.getFirstChild();	  Node    n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
363	[BUG]  [BUGGY]  Node  n  =  scope.getNext();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  scope.getNext();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  scope.getNext();	  Node    n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
364	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	79	None	replace
365	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	79	None	replace
366	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
367	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
368	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  null);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  null);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  null);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
369	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  objectType,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
370	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
371	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
372	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  false,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
373	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  true));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  true));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n,  true));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
374	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(n),  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
375	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+  1,  true);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+  1,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+  1,  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
376	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  true));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  true));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n,  true));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
377	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
378	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
379	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
380	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getShortValueName(NodeUtil.getLongValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getShortValueName(NodeUtil.getLongValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getShortValueName(NodeUtil.getLongValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
381	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVarValue(n));    	non-compiled	[CE]  ';'  expected	108	None	replace
382	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVarValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVarValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getVarValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVarValue(n));    	non-compiled	[CE]  ';'  expected	108	None	replace
383	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVarValue(n));    	non-compiled	[CE]  ';'  expected	108	None	replace
384	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  false);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVarValue(n));    	non-compiled	[CE]  ';'  expected	108	None	replace
385	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getQualifiedName(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n));    	non-compiled	[CE]  ';'  expected	17	None	replace
386	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n));    	non-compiled	[CE]  ';'  expected	17	None	replace
387	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getQualifiedName(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(objectType.getQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(objectType.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n));    	non-compiled	[CE]  ';'  expected	17	None	replace
388	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
389	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  objectType,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
390	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  objectType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
391	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
392	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
393	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getVar(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringValueName(NodeUtil.getVar(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
394	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
395	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
396	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getValueName(NodeUtil.getVar(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
397	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
398	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVariant(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVariant(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVariant(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
399	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
400	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVariant(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVariant(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastVariant(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
401	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  false);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
402	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	43	None	replace
403	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
404	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  objectType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
405	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPrettyPrinter(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPrettyPrinter(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getPrettyPrinter(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
406	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  true);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
407	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	14	None	replace
408	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  false);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  false);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	14	None	replace
409	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  true);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  true);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
410	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	65	None	replace
411	[BUG]  [BUGGY]  Node  n  =  value.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  value.getFirstChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  value.getFirstChild();	  Node    n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	38	None	replace
412	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValue);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    value);    	non-compiled	[CE]  ';'  expected	87	None	replace
413	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalName(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLlue(n));    	non-compiled	[CE]  ';'  expected	20	None	replace
414	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  n.getJSDocInfo());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
415	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  rawValue);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  scope,  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
416	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getStringValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getStringValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
417	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getSourceName(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getSourceName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getSourceName(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
418	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getTopValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getTopValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getTopValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
419	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeValue(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getNativeValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
420	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n),  scope);	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
421	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
422	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n)+  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastVar(n)+  1);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
423	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	22	None	replace
424	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
425	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValue);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  scope,  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
426	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
427	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
428	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
429	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
430	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  valueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
431	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  rawValueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
432	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  type);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	1	None	replace
433	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE),  n);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
434	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeArrayType(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeArrayType(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeArrayType(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
435	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLongValue(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
436	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
437	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NODE_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NODE_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(NODE_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
438	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
439	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
440	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  value);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastValue(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	92	None	replace
441	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
442	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
443	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getSourceName(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getSourceName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getSourceName(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
444	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getNativeValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getNativeValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getNativeValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
445	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n),  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getStringValue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
446	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  rawValueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  rawValueType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
447	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  valueType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
448	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  rawValueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  rawValueType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
449	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  name);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
450	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	79	None	replace
451	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n).toString(),  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n).toString(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n).toString(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
452	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n)||  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n)||  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n)||  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
453	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  value);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastQualifiedName(n));    	non-compiled	[CE]  ';'  expected	64	None	replace
454	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	11	None	replace
455	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n,  scope));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n,  scope));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
456	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  true);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  true);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
457	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n),  value);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
458	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
459	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
460	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
461	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  rawValueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
462	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
463	[BUG]  [BUGGY]  JSType  rawValueType  =  valueType.getJSType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  valueType.getJSType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  valueType.getJSType();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
464	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.NO_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.NO_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.NO_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	101	None	replace
465	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringQualifiedName(n);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringQualifiedName(n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringQualifiedName(n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
466	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  true);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  true);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
467	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  qKeyName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  qKeyName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  qKeyName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
468	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLong(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLong(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLong(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
469	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastSupertype(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastSupertype(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
470	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestQualifiedName(n));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestQualifiedName(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
471	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getString(n));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getString(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getString(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
472	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getNativeType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n.getNativeType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
473	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(ARRAY_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(ARRAY_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
474	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
475	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(NODE_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(NODE_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeType(NODE_TYPE));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
476	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstChild(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
477	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  hasLendsName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
478	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	70	None	replace
479	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  rawValueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  scope,  rawValueType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
480	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  value);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
481	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
482	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
483	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  true);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getSourceName(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getSourceName(n));    	non-compiled	[CE]  ';'  expected	98	None	replace
484	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
485	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  n.getJSDocInfo());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  scope,  n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    scope);    	non-compiled	[CE]  ';'  expected	51	None	replace
486	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelLlue(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
487	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
488	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  objectType,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
489	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  type);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	53	None	replace
490	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastSupertype(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLeastSupertype(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
491	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLocalName(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLocalName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLocalName(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
492	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValue);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    value);    	non-compiled	[CE]  ';'  expected	91	None	replace
493	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  qKeyName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  qKeyName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  qKeyName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	55	None	replace
494	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSTypeNative.OBJECT_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestVar(n));    	non-compiled	[CE]  ';'  expected	24	None	replace
495	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
496	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  value);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
497	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n)+  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
498	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  false);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
499	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
500	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValue);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  scope,  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
501	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().hasLendsName();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().hasLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().hasLendsName();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
502	[BUG]  [BUGGY]  JSType  rawValueType  =  scope.getRawType();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  scope.getRawType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  scope.getRawType();	  JSType    rawValueType    =    objectType.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
503	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getBaseType();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getBaseType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getBaseType();	  JSType    rawValueType    =    objectType.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
504	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
505	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getFirstValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
506	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
507	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
508	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n)+  1);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
509	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
510	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  valueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
511	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  rawValueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  objectType,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
512	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),  type);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	45	None	replace
513	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(),  n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
514	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName(),  n);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName(),  n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(objectType.getQualifiedName(),  n);	  String    qObjName    =    NodeUtil.getBestQualifiedName(objectType.getQualifiedName());    	non-compiled	[CE]  ';'  expected	63	None	replace
515	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
516	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  value);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
517	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  rawValue);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n),  rawValue);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
518	[BUG]  [BUGGY]  n.setJSType(objectType.getLeastSupertype(objectType.getReferenceName()));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLeastSupertype(objectType.getReferenceName()));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLeastSupertype(objectType.getReferenceName()));	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
519	[BUG]  [BUGGY]  n.setJSType(objectType.getLanguage());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLanguage());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLanguage());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
520	[BUG]  [BUGGY]  n.setJSType(objectType.getRawType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getRawType());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getRawType());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
521	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  rawValueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  rawValueType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
522	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  valueType);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
523	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  name);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  name);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
524	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(ARRAY_TYPE));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
525	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getQualifiedName(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
526	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  objectType);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
527	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
528	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getQualifiedName(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
529	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getQualifiedName(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestQualifiedName(n));    	non-compiled	[CE]  ';'  expected	90	None	replace
530	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	35	None	replace
531	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  qKeyName);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  qKeyName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  qKeyName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
532	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  hasLendsName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
533	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
534	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n,  scope));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPrettyPrinter(n));    	non-compiled	[CE]  ';'  expected	96	None	replace
535	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  value);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
536	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  rawValue);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(n),  rawValue);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
537	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	89	None	replace
538	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getString(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getString(n));    	non-compiled	[CE]  ';'  expected	89	None	replace
539	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  rawValueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  scope,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
540	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(VarUtil.getVar(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(VarUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(VarUtil.getVar(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	2	None	replace
541	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValue);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValue);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValue);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
542	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
543	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  scope),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
544	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLongValue(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
545	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNumberValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNumberValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNumberValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
546	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getIntValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getIntValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getIntValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
547	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBooleanValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBooleanValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getBooleanValue(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	15	None	replace
548	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getReferenceName()  +  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getReferenceName()  +  1;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getReferenceName()  +  1;	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
549	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getLeastSupertype(n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getLeastSupertype(n);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getLeastSupertype(n);	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
550	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVarValue(n));    	non-compiled	[CE]  ';'  expected	108	None	replace
551	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getInt(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getInt(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getInt(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
552	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBoolean(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBoolean(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getBoolean(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
553	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumber(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumber(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNumber(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
554	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  false);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
555	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  true);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerVar(n));    	non-compiled	[CE]  ';'  expected	26	None	replace
556	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  value);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  value);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
557	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n)+  1);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
558	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getVar(n),  false);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
559	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  qKeyName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  qKeyName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n),  qKeyName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    value);    	non-compiled	[CE]  ';'  expected	82	None	replace
560	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  hasLendsName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
561	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n,  scope));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n,  scope));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
562	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  rawValueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
563	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  valueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
564	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  type);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    objectType);    	non-compiled	[CE]  ';'  expected	58	None	replace
565	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Node  n  =  n.getLastChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	43	None	replace
566	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
567	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n),  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
568	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getNativeValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
569	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
570	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
571	[BUG]  [BUGGY]  n  =  n.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getJSType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getJSType();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
572	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getVar(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	33	None	replace
573	[BUG]  [BUGGY]  boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  true);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
574	[BUG]  [BUGGY]  boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
575	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  4);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  4);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  4);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
576	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  3);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+  3);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n)+    1);    	non-compiled	[CE]  ';'  expected	66	None	replace
577	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  hasLendsName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  hasLendsName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
578	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  value);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
579	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
580	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
581	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n)+  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n)+  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
582	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n),  value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
583	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  value);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n),  value);	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	48	None	replace
584	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n).toString(),  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n).toString(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n).toString(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
585	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)+  1,  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
586	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getStringQualifiedName(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getStringQualifiedName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getStringQualifiedName(n,  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
587	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope)+  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope)+  1;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope)+  1;	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
588	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  false);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)||  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
589	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString(),  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n).toString(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
590	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)+  1,  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
591	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getFirstVar(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getFirstVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getFirstVar(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	8	None	replace
592	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  rawValueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  false,  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
593	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)||  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)||  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)||  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
594	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+ ",  false);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+ ",  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n)+ ",  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  	56	None	replace
595	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  valueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  valueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
596	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  rawValueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  rawValueType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),  rawValueType);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVar(n),    objectType);    	non-compiled	[CE]  ';'  expected	50	None	replace
597	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLlueName(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLlueName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLlueName(n,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
598	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLalueName(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLalueName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLalueName(n,  scope);	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
599	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getLargerValue(n));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getLargerValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getLargerValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	88	None	replace
600	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastVariant(n));    	non-compiled	[CE]  ';'  expected	23	None	replace
601	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
602	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getStringValue(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    false);    	non-compiled	[CE]  ';'  expected	56	None	replace
603	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getArrayType(UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	11	None	replace
604	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLeastSupertype(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLeastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLeastSupertype(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	86	None	replace
605	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isAllowMember();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isAllowMember();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isAllowMember();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
606	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSyntheticBlock();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSyntheticBlock();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getJSType()!=  null  &&  n.getJSType().isSyntheticBlock();	  boolean    hasLendsName    =    n.getJSType()!=    null    &&    n.getJSType().hasReferenceName();    	non-compiled	[CE]  ';'  expected	81	None	replace
607	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n.getString());	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
608	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(VarUtil.getVar(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(VarUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(VarUtil.getVar(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	94	None	replace
609	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope),  hasLendsName;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  scope),  hasLendsName;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  scope),  hasLendsName;	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
610	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLongValueName(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLongValueName(n,  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLongValueName(n,  scope);	  String    qObjName    =    NodeUtil.getBestValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	100	None	replace
611	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	boolean  hasLendsName  =  n.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	78	None	replace
612	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getPosition(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getPosition(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getPosition(n));	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	18	None	replace
613	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)-  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)-  1);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVar(n)-  1);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
614	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  objectType);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  objectType);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
615	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getLlue(n),  scope);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	21	None	replace
616	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n,  scope));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getVarValue(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
617	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  this.scope));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  this.scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,  this.scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLargerValue(n,    scope));    	non-compiled	[CE]  ';'  expected	47	None	replace
618	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlain(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlain(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlain(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLong(n));    	non-compiled	[CE]  ';'  expected	74	None	replace
619	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerName(n));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLargerName(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	6	None	replace
620	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getQualifiedName());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getQualifiedName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n.getQualifiedName());	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getQualifiedName(n));    	non-compiled	[CE]  ';'  expected	17	None	replace
621	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getString(),  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getString(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getString(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
622	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  true);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getString(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getVar(n),    false);    	non-compiled	[CE]  ';'  expected	5	None	replace
623	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n,  scope));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n,  scope));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n,  scope));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLocalFileName(n));    	non-compiled	[CE]  ';'  expected	75	None	replace
624	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastSupertype(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastSupertype(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastSupertype(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastSupertype(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
625	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectValue(n));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getNativeObjectValue(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	13	None	replace
626	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getFirstChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getFirstChild());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getFirstChild());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	13	None	replace
627	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope),  hasLendsName;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n,  scope),  hasLendsName;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n,  scope),  hasLendsName;	  String    qObjName    =    NodeUtil.getBestLValueName(n,    scope);    	non-compiled	[CE]  ';'  expected	97	None	replace
628	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
629	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toString();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toString();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  scope).toString();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
630	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  scope).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    scope);    	non-compiled	[CE]  ';'  expected	84	None	replace
631	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  this.value);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  this.value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  this.value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    value);    	non-compiled	[CE]  ';'  expected	87	None	replace
632	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVariable(n));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVariable(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getBestVariable(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestLValue(n));    	non-compiled	[CE]  ';'  expected	32	None	replace
633	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(JSDocInfo.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(JSDocInfo.UNKNOWN_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(NodeUtil.getStringValue(JSDocInfo.UNKNOWN_TYPE));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
634	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getRValueType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getRValueType();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getRValueType();	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
635	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getLendsName();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getLendsName();	  JSType    rawValueType    =    objectType.getReferenceName();    	non-compiled	[CE]  ';'  expected	39	None	replace
636	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(),  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    true);    	non-compiled	[CE]  ';'  expected	62	None	replace
637	[BUG]  [BUGGY]  Boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  Boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	Boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	80	None	replace
638	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeftVar(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeftVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeftVar(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getTopLevelVar(n));    	non-compiled	[CE]  ';'  expected	71	None	replace
639	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getPosition(n));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getPosition(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getPosition(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getLeastVar(n));    	non-compiled	[CE]  ';'  expected	35	None	replace
640	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlainValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlainValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPlainValue(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLongValue(n));    	non-compiled	[CE]  ';'  expected	30	None	replace
641	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n),  scope);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLlue(n),  scope);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestLlue(n));    	non-compiled	[CE]  ';'  expected	104	None	replace
642	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(n.getString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(n.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(n.getString());	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
643	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getVar(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getVar(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
644	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getPosition(n));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getPosition(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(NodeUtil.getPosition(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
645	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(ObjectType.getBestValue(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLabelName(ObjectType.getBestValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLabelName(ObjectType.getBestValue(n));	  String    qObjName    =    NodeUtil.getBestLabelName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	31	None	replace
646	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getStringValue(n));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getStringValue(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	9	None	replace
647	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasKeyName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasKeyName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),  hasKeyName);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	55	None	replace
648	[BUG]  [BUGGY]  n  =  n.getChildCount();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getChildCount();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getChildCount();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
649	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n  =  n.getParent();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n  =  n.getParent();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	103	None	replace
650	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getJSDocInfo());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	93	None	replace
651	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  true);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
652	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  false);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getStringValue(n).toLowerCase(),  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getStringValue(n),    true);    	non-compiled	[CE]  ';'  expected	57	None	replace
653	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getReferenceName(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getReferenceName(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getReferenceName(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getReferenceName(n));    	non-compiled	[CE]  ';'  expected	7	None	replace
654	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getJSDocInfo());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
655	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getString());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n.getString());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeObjectType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	37	None	replace
656	[BUG]  [BUGGY]  n.setJSType(objectType.getLendsName());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getLendsName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getLendsName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
657	[BUG]  [BUGGY]  n.setJSType(objectType.getVarName());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getVarName());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	n.setJSType(objectType.getVarName());	  n.setJSType(objectType.getReferenceName());    	non-compiled	[CE]  ';'  expected	40	None	replace
658	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  objectType).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
659	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  type);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
660	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n,  objectType).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n,    objectType);    	non-compiled	[CE]  ';'  expected	106	None	replace
661	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
662	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  hasLendsName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n,  hasLendsName);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n,  hasLendsName);	  String    qObjName    =    NodeUtil.getBestQualifiedName(n);    	non-compiled	[CE]  ';'  expected	107	None	replace
663	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  true);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n),  true);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLeastValue(n));    	non-compiled	[CE]  ';'  expected	29	None	replace
664	[BUG]  [BUGGY]  JSType  rawValueType  =  objectType.getLastChild();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  objectType.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  objectType.getLastChild();	  JSType    rawValueType    =    objectType.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
665	[BUG]  [BUGGY]  JSType  rawValueType  =  n.getLastChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  n.getLastChild();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  n.getLastChild();	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
666	[BUG]  [BUGGY]  JSType  rawValueType  =  ObjectType.cast(n.getJSType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  JSType  rawValueType  =  ObjectType.cast(n.getJSType());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	JSType  rawValueType  =  ObjectType.cast(n.getJSType());	  JSType    rawValueType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
667	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(name));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(name));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(n.getQualifiedName(name));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(name));    	non-compiled	[CE]  ';'  expected	60	None	replace
668	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType).restrictByNotNullOrUndefined();  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  objectType).restrictByNotNullOrUndefined();	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
669	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType),  hasLendsName;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  objectType),  hasLendsName;  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  objectType),  hasLendsName;	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
670	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(n,  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(n,  type);	  String    qObjName    =    NodeUtil.getBestValueName(n,    objectType);    	non-compiled	[CE]  ';'  expected	99	None	replace
671	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(n.getType());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(n.getType());	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	10	None	replace
672	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)/  2,  false);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)/  2,  false);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n)/  2,  false);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
673	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getString());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getString());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getString());	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
674	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getShortValue(n));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getShortValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(NodeUtil.getShortValue(n));	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
675	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getFirstChild());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getFirstChild());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getLeastQualifiedName(n.getFirstChild());	  String    qObjName    =    NodeUtil.getLeastQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	16	None	replace
676	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getStringValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getStringValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getStringValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
677	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getStringValue());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(n.getStringValue());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(n.getStringValue());	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getStringValue(n));    	non-compiled	[CE]  ';'  expected	34	None	replace
678	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerVar(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(NodeUtil.getLargerVar(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestVar(n));    	non-compiled	[CE]  ';'  expected	25	None	replace
679	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  this.value);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  this.value);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  this.value);	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    value);    	non-compiled	[CE]  ';'  expected	69	None	replace
680	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  n.getJSDocInfo());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  n.getJSDocInfo());  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),  hasLendsName,  n.getJSDocInfo());	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getQualifiedName(n),    hasLendsName);    	non-compiled	[CE]  ';'  expected	68	None	replace
681	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.UNKNOWN_TYPE);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.UNKNOWN_TYPE);	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	36	None	replace
682	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  type);  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestValueName(NodeUtil.getStringValue(n),  type);	  String    qObjName    =    NodeUtil.getBestValueName(NodeUtil.getStringValue(n),    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
683	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getVar(n));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getVar(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(objectType.getVar(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getVar(n));    	non-compiled	[CE]  ';'  expected	33	None	replace
684	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild(n));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getLastChild(n));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getLastVar(n));    	non-compiled	[CE]  ';'  expected	52	None	replace
685	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getBestValue(n));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getBestValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestQualifiedName(ObjectType.getBestValue(n));	  String    qObjName    =    NodeUtil.getBestQualifiedName(NodeUtil.getBestValue(n));    	non-compiled	[CE]  ';'  expected	28	None	replace
686	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n  +  1));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getPosition(n  +  1));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getPosition(n));    	non-compiled	[CE]  ';'  expected	95	None	replace
687	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLargerValue(n));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLargerValue(n));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getQualifiedName(ObjectType.getLargerValue(n));	  String    qObjName    =    NodeUtil.getQualifiedName(NodeUtil.getLargerValue(n));    	non-compiled	[CE]  ';'  expected	48	None	replace
688	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(ARRAY_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(ARRAY_TYPE));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
689	[BUG]  [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NO_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }      [BUGGY]  String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NO_TYPE));  [BUGGY]      NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  String  memberName  =  NodeUtil.getObjectLitKeyName(name);  if  (memberName  !=  null)  {  JSType  rawValueType  =name.getFirstChild().getJSType();  JSType  valueType  =  NodeUtil.getObjectLitKeyTypeFromValueType(  name,  rawValueType);  if  (valueType  ==  null)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	673	674	1	replace	String  qObjName  =  NodeUtil.getBestLValueName(NodeUtil.getNativeType(NO_TYPE));	  String    qObjName    =    NodeUtil.getBestLValueName(NodeUtil.getNativeValue(n));    	non-compiled	[CE]  ';'  expected	83	None	replace
