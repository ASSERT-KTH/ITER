bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  constructorType  =  context.toMainFunctionType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toMainFunctionType();	  constructorType    =    context.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	14	None	replace
2	[BUG]  [BUGGY]  constructorType  =  context.getFunctionType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getFunctionType();	  constructorType    =    context.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	14	None	replace
3	[BUG]  [BUGGY]  constructorType  =  context.toMaybeFunctionType(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toMaybeFunctionType(),  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toMaybeFunctionType(),  scope);	  constructorType    =    context.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	14	None	replace
4	[BUG]  [BUGGY]  Node  constructorType  =  n.getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  n.getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  n.getNext();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
5	[BUG]  [BUGGY]  Node  constructorType  =  n.getParent();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  n.getParent();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  n.getParent();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
6	[BUG]  [BUGGY]  constructorType  =  ct.toUnknown();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toUnknown();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toUnknown();	  constructorType    =    ct.toUndefined();    	non-compiled	[CE]  ';'  expected	21	None	replace
7	[BUG]  [BUGGY]  constructorType  =  ct.toJavaType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toJavaType();	  constructorType    =    ct.toUndefined();    	non-compiled	[CE]  ';'  expected	21	None	replace
8	[BUG]  [BUGGY]  constructorType  =  n.getLastChild();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getLastChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getLastChild();	  constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
9	[BUG]  [BUGGY]  constructorType  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getFirstChild();	  constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
10	[BUG]  [BUGGY]  constructorType  =  n.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getNext();	  constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
11	[BUG]  [BUGGY]  constructorType  =  constructor.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getLastChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getLastChild();	  constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
12	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  type);	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(UNKNOWN_TYPE)+  1;	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(NO_TYPE);	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
15	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(CONSTRUCTOR_TYPE);	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
17	[BUG]  [BUGGY]  constructorType  =  n.toLocalFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toLocalFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toLocalFunctionType();	  constructorType    =    constructor.toLocalFunctionType();    	non-compiled	[CE]  ';'  expected	42	None	replace
18	[BUG]  [BUGGY]  constructorType  =  type.toLocalFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toLocalFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toLocalFunctionType();	  constructorType    =    constructor.toLocalFunctionType();    	non-compiled	[CE]  ';'  expected	42	None	replace
19	[BUG]  [BUGGY]  constructorType  =  scope.toLocalFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toLocalFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toLocalFunctionType();	  constructorType    =    constructor.toLocalFunctionType();    	non-compiled	[CE]  ';'  expected	42	None	replace
20	[BUG]  [BUGGY]  constructorType  =  context.toLocalFunctionType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toLocalFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toLocalFunctionType();	  constructorType    =    constructor.toLocalFunctionType();    	non-compiled	[CE]  ';'  expected	42	None	replace
21	[BUG]  [BUGGY]  constructorType  =  type.toLowerCase();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toLowerCase();	  constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	1	None	replace
22	[BUG]  [BUGGY]  constructorType  =  type.toMainFunctionType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toMainFunctionType();	  constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	1	None	replace
23	[BUG]  [BUGGY]  constructorType  =  type.toFunctionType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toFunctionType();	  constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	1	None	replace
24	[BUG]  [BUGGY]  constructorType  =  type.toJavaType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toJavaType();	  constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	1	None	replace
25	[BUG]  [BUGGY]  constructorType  =  type.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.getNativeType(UNKNOWN_TYPE)+  1;	  constructorType    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE  +  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(UNKNOWN_TYPE  +  1);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
27	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE  /  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE  /  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE  /  1);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
28	[BUG]  [BUGGY]  constructorType  =  constructor.toBigDecimal();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toBigDecimal();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toBigDecimal();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
29	[BUG]  [BUGGY]  constructorType  =  n.toBigInteger();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toBigInteger();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toBigInteger();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
30	[BUG]  [BUGGY]  constructorType  =  n.toBigDecimal();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toBigDecimal();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toBigDecimal();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
31	[BUG]  [BUGGY]  constructorType  =  scope.toBigInteger();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toBigInteger();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toBigInteger();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
32	[BUG]  [BUGGY]  constructorType  =  constructor.toLongInteger();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toLongInteger();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toLongInteger();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
33	[BUG]  [BUGGY]  constructorType  =  scope.toBigDecimal();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toBigDecimal();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toBigDecimal();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
34	[BUG]  [BUGGY]  Type  constructorType  =  constructor.getType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.getType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.getType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
35	[BUG]  [BUGGY]  Type  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  n.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  n.getJSType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
36	[BUG]  [BUGGY]  Type  constructorType  =  type.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  type.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  type.getJSType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
37	[BUG]  [BUGGY]  Type  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE);	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
38	[BUG]  [BUGGY]  Type  constructorType  =  scope.getJSType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  scope.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  scope.getJSType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
39	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(UNKNOWN_TYPE)+  1;	  constructorType    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	4	None	replace
40	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  type);	  constructorType    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(NO_TYPE);	  constructorType    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(UNKNOWN_TYPE,  n);	  constructorType    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	4	None	replace
43	[BUG]  [BUGGY]  constructorType  =  n.toUnknownType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toUnknownType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toUnknownType();	  constructorType    =    constructor.toUnknownType();    	non-compiled	[CE]  ';'  expected	38	None	replace
44	[BUG]  [BUGGY]  constructorType  =  type.toUnknownType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toUnknownType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toUnknownType();	  constructorType    =    constructor.toUnknownType();    	non-compiled	[CE]  ';'  expected	38	None	replace
45	[BUG]  [BUGGY]  constructorType  =  scope.toUnknownType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toUnknownType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toUnknownType();	  constructorType    =    constructor.toUnknownType();    	non-compiled	[CE]  ';'  expected	38	None	replace
46	[BUG]  [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
47	[BUG]  [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
48	[BUG]  [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
49	[BUG]  [BUGGY]  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
50	[BUG]  [BUGGY]  constructorType  =  n.toLowerCase();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toLowerCase();	  constructorType    =    constructorType.toLowerCase();    	non-compiled	[CE]  ';'  expected	47	None	replace
51	[BUG]  [BUGGY]  constructorType  =  scope.toLowerCase();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toLowerCase();	  constructorType    =    constructorType.toLowerCase();    	non-compiled	[CE]  ';'  expected	47	None	replace
52	[BUG]  [BUGGY]  constructorType  =  context.toLowerCase();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toLowerCase();	  constructorType    =    constructorType.toLowerCase();    	non-compiled	[CE]  ';'  expected	47	None	replace
53	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(NULL_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(NULL_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(NULL_TYPE);	  constructorType    =    context.getNativeType(NULL_TYPE);    	non-compiled	[CE]  ';'  expected	49	None	replace
54	[BUG]  [BUGGY]  constructorType  =  type.getNativeType(NULL_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.getNativeType(NULL_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.getNativeType(NULL_TYPE);	  constructorType    =    context.getNativeType(NULL_TYPE);    	non-compiled	[CE]  ';'  expected	49	None	replace
55	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(NO_TYPE);	  constructorType    =    context.getNativeType(NULL_TYPE);    	non-compiled	[CE]  ';'  expected	49	None	replace
56	[BUG]  [BUGGY]  constructorType  =  n.toFunctionType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toFunctionType();	  constructorType    =    constructor.toFunctionType();    	non-compiled	[CE]  ';'  expected	48	None	replace
57	[BUG]  [BUGGY]  constructorType  =  scope.toFunctionType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toFunctionType();	  constructorType    =    constructor.toFunctionType();    	non-compiled	[CE]  ';'  expected	48	None	replace
58	[BUG]  [BUGGY]  constructorType  =  context.toFunctionType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toFunctionType();	  constructorType    =    constructor.toFunctionType();    	non-compiled	[CE]  ';'  expected	48	None	replace
59	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().getJSType();	  constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	15	None	replace
60	[BUG]  [BUGGY]  type  =  registry.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  registry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  registry.getNativeType(UNKNOWN_TYPE);	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
61	[BUG]  [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  compiler.getNativeType(UNKNOWN_TYPE)+  1;	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
62	[BUG]  [BUGGY]  type  =  compiler.getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  compiler.getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  compiler.getNativeType(NO_TYPE);	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
63	[BUG]  [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  compiler.getNativeType(UNKNOWN_TYPE,  n);	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
64	[BUG]  [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
65	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toMaybeFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
66	[BUG]  [BUGGY]  JSType  constructorType  =  type.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  type.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  type.toMaybeFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
67	[BUG]  [BUGGY]  JSType  constructorType  =  ct.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  ct.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  ct.toMaybeFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
68	[BUG]  [BUGGY]  JSType  constructorType  =  scope.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  scope.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  scope.toMaybeFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
69	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  type);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  constructorType  =  n.restrictByNotNullOrUndefined(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.restrictByNotNullOrUndefined(),  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.restrictByNotNullOrUndefined(),  scope);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
71	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  type);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
72	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n  +  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  n  +  1);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
73	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  getNativeType(UNKNOWN_TYPE);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
74	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
75	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  type);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
76	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  type);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
77	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  context);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  context);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  context);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
78	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  null);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  scope,  null);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
79	[BUG]  [BUGGY]  constructorType  =  ct.toMainFunctionType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toMainFunctionType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
80	[BUG]  [BUGGY]  constructorType  =  ct.toFunctionType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toFunctionType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
81	[BUG]  [BUGGY]  constructorType  =  ct.getConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.getConstructorType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
82	[BUG]  [BUGGY]  constructorType  =  context.toUndefined();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toUndefined();	  constructorType    =    constructor.toUndefined();    	non-compiled	[CE]  ';'  expected	17	None	replace
83	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
84	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
85	[BUG]  [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
86	[BUG]  [BUGGY]  type  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(CONSTRUCTOR_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
87	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  n);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
88	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  scope);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
89	[BUG]  [BUGGY]  Type  constructorType  =  scope.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  scope.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  scope.toMaybeFunctionType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
90	[BUG]  [BUGGY]  Type  constructorType  =  n.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  n.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  n.toMaybeFunctionType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
91	[BUG]  [BUGGY]  Type  constructorType  =  type.toLowerCase();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  type.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  type.toLowerCase();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
92	[BUG]  [BUGGY]  Type  constructorType  =  type.getConstructorType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  type.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  type.getConstructorType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
93	[BUG]  [BUGGY]  constructorType  =  constructor.getNext();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getNext();	  constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
94	[BUG]  [BUGGY]  constructorType  =  constructor.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getConstructor();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getConstructor();	  constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
95	[BUG]  [BUGGY]  constructorType  =  constructor.getRawParent();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getRawParent();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getRawParent();	  constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
96	[BUG]  [BUGGY]  constructorType  =  constructor.getRawClass();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getRawClass();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getRawClass();	  constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
97	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
98	[BUG]  [BUGGY]  constructorType  =  scope.toMainFunctionType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toMainFunctionType();	  constructorType    =    scope.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	6	None	replace
99	[BUG]  [BUGGY]  constructorType  =  scope.toJavaType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toJavaType();	  constructorType    =    scope.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	6	None	replace
100	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS_EXPECTED);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
101	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
102	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  type,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  type,  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  type,  scope);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
103	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_OF_THIS);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
104	[BUG]  [BUGGY]  constructorType  =  scope.getConstructor();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getConstructor();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getConstructor();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
105	[BUG]  [BUGGY]  constructorType  =  scope.getRawParent();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getRawParent();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getRawParent();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
106	[BUG]  [BUGGY]  constructorType  =  scope.getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNext();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
107	[BUG]  [BUGGY]  constructorType  =  scope.getReturnType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getReturnType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getReturnType();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
108	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
109	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
110	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
111	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
112	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(NO_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
113	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
114	[BUG]  [BUGGY]  constructorType  =  type.toUnknown();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toUnknown();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toUnknown();	  constructorType    =    type.toUndefined();    	non-compiled	[CE]  ';'  expected	16	None	replace
115	[BUG]  [BUGGY]  constructorType  =  type.toBigInteger();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.toBigInteger();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.toBigInteger();	  constructorType    =    type.toUndefined();    	non-compiled	[CE]  ';'  expected	16	None	replace
116	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
117	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
118	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
119	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
120	[BUG]  [BUGGY]  constructorType  =  n.toUnknown();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toUnknown();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toUnknown();	  constructorType    =    n.toUndefined();    	non-compiled	[CE]  ';'  expected	18	None	replace
121	[BUG]  [BUGGY]  constructorType  =  type.getQualifiedName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.getQualifiedName();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.getQualifiedName();	  constructorType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	27	None	replace
122	[BUG]  [BUGGY]  constructorType  =  type.getRawClass();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  type.getRawClass();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  type.getRawClass();	  constructorType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	27	None	replace
123	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(UNKNOWN_TYPE,  type);	  constructorType    =    context.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
124	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(UNKNOWN_TYPE)+  1;	  constructorType    =    context.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
125	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(CONSTRUCTOR_TYPE);	  constructorType    =    context.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
126	[BUG]  [BUGGY]  constructorType  =  n.getRestrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getRestrictByNotNullOrUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getRestrictByNotNullOrUndefined();	  constructorType    =    context.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	11	None	replace
127	[BUG]  [BUGGY]  constructorType  =  context.getRestrictByNotNullOrUndefined(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getRestrictByNotNullOrUndefined(),  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getRestrictByNotNullOrUndefined(),  scope);	  constructorType    =    context.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	11	None	replace
128	[BUG]  [BUGGY]  constructorType  =  context.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getConstructor();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getConstructor();	  constructorType    =    context.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	11	None	replace
129	[BUG]  [BUGGY]  constructorType  =  context.getDeclaredType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getDeclaredType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getDeclaredType(UNKNOWN_TYPE);	  constructorType    =    context.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	11	None	replace
130	[BUG]  [BUGGY]  constructorType  =  scope.getImplicitPrototype();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getImplicitPrototype();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getImplicitPrototype();	  constructorType    =    scope.getFunctionType();    	non-compiled	[CE]  ';'  expected	8	None	replace
131	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
132	[BUG]  [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
133	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsInternal();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.throwAsInternal();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.throwAsInternal();	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
134	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnknownType(scope,  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleUnknownType(scope,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleUnknownType(scope,  constructorType);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
135	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnknownType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleUnknownType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleUnknownType();	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
136	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnknownType(scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleUnknownType(scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleUnknownType(scope);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
137	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.throwInternal();	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
138	[BUG]  [BUGGY]  constructorType  =  n.getInstanceType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getInstanceType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getInstanceType();	  constructorType    =    scope.getInstanceType();    	non-compiled	[CE]  ';'  expected	50	None	replace
139	[BUG]  [BUGGY]  constructorType  =  n.getLastChild().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getLastChild().restrictByNotNullOrUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getLastChild().restrictByNotNullOrUndefined();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
140	[BUG]  [BUGGY]  constructorType  =  constructor.getFirstChild().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.getFirstChild().restrictByNotNullOrUndefined();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
141	[BUG]  [BUGGY]  constructorType  =  scope.getFirstChild().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getFirstChild().restrictByNotNullOrUndefined();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
142	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().restrictByNotEmpty();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().restrictByNotEmpty();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().restrictByNotEmpty();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
143	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().getNext();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
144	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
145	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  2;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  2;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  2;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
146	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)/  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)/  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)/  1;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
147	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  0;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  0;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  0;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
148	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  3;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  3;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  3;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
149	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  4;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  4;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  4;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
150	[BUG]  [BUGGY]  Node  constructorType  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  scope.getLastChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  scope.getLastChild();	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
151	[BUG]  [BUGGY]  Node  constructorType  =  scope.getNext();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  scope.getNext();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  scope.getNext();	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
152	[BUG]  [BUGGY]  Node  constructorType  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  type.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  type.getFirstChild();	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
153	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
154	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
155	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
156	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(NO_TYPE);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
157	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
158	[BUG]  [BUGGY]  Type  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
159	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n,  type);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n,  type);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n,  type);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    n);    	non-compiled	[CE]  ';'  expected	45	None	replace
160	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n)+  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n)+  1;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    n);    	non-compiled	[CE]  ';'  expected	45	None	replace
161	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(NO_TYPE,  n);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    n);    	non-compiled	[CE]  ';'  expected	45	None	replace
162	[BUG]  [BUGGY]  Node  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  getNativeType(UNKNOWN_TYPE);	  Node    constructorType    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
163	[BUG]  [BUGGY]  Node  constructorType  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  node.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  node.getFirstChild();	  Node    constructorType    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
164	[BUG]  [BUGGY]  constructorType  =  scope.getDeclaredType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getDeclaredType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getDeclaredType();	  constructorType    =    scope.getRawClass();    	non-compiled	[CE]  ';'  expected	7	None	replace
165	[BUG]  [BUGGY]  constructorType  =  scope.getOwnerClass();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getOwnerClass();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getOwnerClass();	  constructorType    =    scope.getRawClass();    	non-compiled	[CE]  ';'  expected	7	None	replace
166	[BUG]  [BUGGY]  Constructor  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
167	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
168	[BUG]  [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  K,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
169	[BUG]  [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getConstructorType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getConstructorType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  K,  V>  constructorType  =  compiler.getConstructorType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
170	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
171	[BUG]  [BUGGY]  constructorType  =  scope.toUnknown();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toUnknown();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toUnknown();	  constructorType    =    scope.toUndefined();    	non-compiled	[CE]  ';'  expected	20	None	replace
172	[BUG]  [BUGGY]  constructorType  =  n.getConstructorType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getConstructorType();	  constructorType    =    scope.getConstructorType();    	non-compiled	[CE]  ';'  expected	52	None	replace
173	[BUG]  [BUGGY]  constructorType  =  scope.getConstructorType(0);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getConstructorType(0);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getConstructorType(0);	  constructorType    =    scope.getConstructorType();    	non-compiled	[CE]  ';'  expected	52	None	replace
174	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getConstructorType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.getConstructorType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
175	[BUG]  [BUGGY]  JSType  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  n.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  n.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
176	[BUG]  [BUGGY]  JSType  constructorType  =  type.getJSType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  type.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  type.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
177	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  scope.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  scope.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
178	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getParent();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.getParent();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.getParent();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
179	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(UNKNOWN_TYPE,  n);	  constructorType    =    context.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
180	[BUG]  [BUGGY]  constructorType  =  constructorType.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructorType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructorType.getNativeType(UNKNOWN_TYPE);	  constructorType    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	2	None	replace
181	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnknownType(compiler,  constructorType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleUnknownType(compiler,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleUnknownType(compiler,  constructorType);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
182	[BUG]  [BUGGY]  aughtExceptionHandler  =  compiler.getExceptionHandler(compiler);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler  =  compiler.getExceptionHandler(compiler);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler  =  compiler.getExceptionHandler(compiler);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
183	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  constructorType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(n,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleMissingName(n,  constructorType);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
184	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n  +  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n  +  1);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    n);    	non-compiled	[CE]  ';'  expected	45	None	replace
185	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  constructorType);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
186	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  CONSTRUCTOR_TYPE);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    type);    	non-compiled	[CE]  ';'  expected	23	None	replace
187	[BUG]  [BUGGY]  constructorType  =  scope.toSyntacticScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toSyntacticScope();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toSyntacticScope();	  constructorType    =    scope.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	6	None	replace
188	[BUG]  [BUGGY]  constructorType  =  scope.toMaybeFunctionType(constructor);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toMaybeFunctionType(constructor);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toMaybeFunctionType(constructor);	  constructorType    =    scope.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	6	None	replace
189	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(TYPE_NOT_OBJECT_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(TYPE_NOT_OBJECT_TYPE);	  constructorType    =    context.getNativeType(NULL_TYPE);    	non-compiled	[CE]  ';'  expected	49	None	replace
190	[BUG]  [BUGGY]  type  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(NO_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
191	[BUG]  [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(TEMPLATE_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
192	[BUG]  [BUGGY]  constructorType  =  constructor.toUnknown();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toUnknown();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toUnknown();	  constructorType    =    n.toUndefined();    	non-compiled	[CE]  ';'  expected	18	None	replace
193	[BUG]  [BUGGY]  Type  constructorType  =  constructor.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.toMaybeFunctionType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
194	[BUG]  [BUGGY]  Constructor  <  N,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  N,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  N,  V>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
195	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <?>  constructor  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <?>  constructor  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
196	[BUG]  [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  K,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  K,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
197	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE).toMaybeFunctionType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE).toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <?>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE).toMaybeFunctionType();	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
198	[BUG]  [BUGGY]  constructorType  =  scope.getThreshold();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getThreshold();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getThreshold();	  constructorType    =    scope.getRawClass();    	non-compiled	[CE]  ';'  expected	7	None	replace
199	[BUG]  [BUGGY]  constructorType  =  scope.getParameterType(0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getParameterType(0);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getParameterType(0);	  constructorType    =    scope.getRawClass();    	non-compiled	[CE]  ';'  expected	7	None	replace
200	[BUG]  [BUGGY]  constructorType  =  scope.getJavaType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getJavaType();	  constructorType    =    scope.getRawClass();    	non-compiled	[CE]  ';'  expected	7	None	replace
201	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
202	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(TEMPLATE_TYPE);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
203	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
204	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE  +  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(NO_TYPE  +  1);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
205	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE  +  1);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(CONSTRUCTOR_TYPE  +  1);	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
206	[BUG]  [BUGGY]  constructorType  =  scope.getOwnerFunctionType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getOwnerFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getOwnerFunctionType();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
207	[BUG]  [BUGGY]  constructorType  =  scope.getRootNode();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getRootNode();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getRootNode();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
208	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(DO_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(DO_NOT_OBJECT_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(DO_NOT_OBJECT_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
209	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(OPTIONAL_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(OPTIONAL_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(OPTIONAL_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
210	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE)+  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(NO_TYPE)+  1;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(NO_TYPE)+  1;	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
211	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(TEMPLATE_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
212	[BUG]  [BUGGY]  Type  constructorType  =  constructorType.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructorType.toMaybeFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructorType.toMaybeFunctionType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
213	[BUG]  [BUGGY]  constructorType  =  context.toJavaType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toJavaType();	  constructorType    =    context.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	14	None	replace
214	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
215	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(NO_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
216	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  n);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
217	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  constructorType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  constructorType);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
218	[BUG]  [BUGGY]  constructorType  =  ct.toBigInteger();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toBigInteger();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toBigInteger();	  constructorType    =    ct.toUndefined();    	non-compiled	[CE]  ';'  expected	21	None	replace
219	[BUG]  [BUGGY]  constructorType  =  constructor.toLongBoolean();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toLongBoolean();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toLongBoolean();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
220	[BUG]  [BUGGY]  constructorType  =  context.getInstanceType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getInstanceType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getInstanceType();	  constructorType    =    context.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	11	None	replace
221	[BUG]  [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  registry.getNativeType(UNKNOWN_TYPE,  constructorType);	  constructorType    =    registry.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
222	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().restrictByNotNullOrEmpty();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().restrictByNotNullOrEmpty();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().restrictByNotNullOrEmpty();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
223	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().intern();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().intern();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().intern();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
224	[BUG]  [BUGGY]  Node  constructorType  =  n.getfirstChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  n.getfirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  n.getfirstChild();	  Node    constructorType    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
225	[BUG]  [BUGGY]  constructorType  =  scope.getConstructorType(true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getConstructorType(true);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getConstructorType(true);	  constructorType    =    scope.getConstructorType();    	non-compiled	[CE]  ';'  expected	52	None	replace
226	[BUG]  [BUGGY]  constructorType  =  scope.getConstructorType(n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getConstructorType(n);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getConstructorType(n);	  constructorType    =    scope.getConstructorType();    	non-compiled	[CE]  ';'  expected	52	None	replace
227	[BUG]  [BUGGY]  constructorType  =  context.getConstructorType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getConstructorType();	  constructorType    =    scope.getConstructorType();    	non-compiled	[CE]  ';'  expected	52	None	replace
228	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toJavaType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toJavaType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toJavaType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
229	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toMainFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toMainFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
230	[BUG]  [BUGGY]  constructorType  =  constructorType.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructorType.getJSType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructorType.getJSType();	  constructorType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	27	None	replace
231	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
232	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  null);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  null);	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
233	[BUG]  [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.restrictByNotNullOrUndefined(),  getNativeType(UNKNOWN_TYPE));	  constructorType    =    context.restrictByNotNullOrUndefined(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
234	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getParameterType(0);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.getParameterType(0);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.getParameterType(0);	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
235	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_OF_THIS_EXPECTED;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
236	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_NOT_OBJECT_TYPE;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_NOT_OBJECT_TYPE;  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  TEMPLATE_TYPE_NOT_OBJECT_TYPE;	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
237	[BUG]  [BUGGY]  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(NO_TYPE);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
238	[BUG]  [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
239	[BUG]  [BUGGY]  constructorType  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  getNativeType(TEMPLATE_TYPE);	  constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	19	None	replace
240	[BUG]  [BUGGY]  constructorType  =  context.toUnknownType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.toUnknownType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.toUnknownType();	  constructorType    =    constructor.toUnknownType();    	non-compiled	[CE]  ';'  expected	38	None	replace
241	[BUG]  [BUGGY]  constructorType  =  scope.getDeclaredType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getDeclaredType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getDeclaredType(UNKNOWN_TYPE);	  constructorType    =    scope.getRestrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	5	None	replace
242	[BUG]  [BUGGY]  constructorType  =  n.toString();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toString();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toString();	  constructorType    =    n.toUndefined();    	non-compiled	[CE]  ';'  expected	18	None	replace
243	[BUG]  [BUGGY]  constructorType  =  n.toOtherString();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.toOtherString();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.toOtherString();	  constructorType    =    n.toUndefined();    	non-compiled	[CE]  ';'  expected	18	None	replace
244	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n).restrictByNotNullOrUndefined();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE,  n).restrictByNotNullOrUndefined();	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE,    n);    	non-compiled	[CE]  ';'  expected	45	None	replace
245	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(FUNCTION_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(FUNCTION_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(FUNCTION_TYPE);	  constructorType    =    context.getNativeType(NULL_TYPE);    	non-compiled	[CE]  ';'  expected	49	None	replace
246	[BUG]  [BUGGY]  constructorType  =  scope.getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getNativeType(CONSTRUCTOR_TYPE);	  constructorType    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	4	None	replace
247	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	33	None	replace
248	[BUG]  [BUGGY]  constructorType  =  ct.toLowerCase();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toLowerCase();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
249	[BUG]  [BUGGY]  constructorType  =  ct.toOtherFunctionType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toOtherFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toOtherFunctionType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
250	[BUG]  [BUGGY]  constructorType  =  ct.toConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.toConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.toConstructorType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
251	[BUG]  [BUGGY]  constructorType  =  ct.getComponentType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  ct.getComponentType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  ct.getComponentType();	  constructorType    =    ct.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	13	None	replace
252	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().getString();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().getString();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().getString();	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
253	[BUG]  [BUGGY]  constructorType  =  n.getFirstChild().evaluate(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  n.getFirstChild().evaluate(scope);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  n.getFirstChild().evaluate(scope);	  constructorType    =    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	59	None	replace
254	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(TYPE_NOT_OBJECT_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(TYPE_NOT_OBJECT_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
255	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(VOID_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(VOID_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(VOID_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
256	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(DOUBLE_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(DOUBLE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(DOUBLE_TYPE);	  constructorType    =    compiler.getNativeType(NO_TYPE);    	non-compiled	[CE]  ';'  expected	25	None	replace
257	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  FunctionType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	FunctionType  constructorType  =  getNativeType(TEMPLATE_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	31	None	replace
258	[BUG]  [BUGGY]  constructorType  =  scope.toOtherFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toOtherFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toOtherFunctionType();	  constructorType    =    scope.toUndefined();    	non-compiled	[CE]  ';'  expected	20	None	replace
259	[BUG]  [BUGGY]  constructorType  =  constructor.toUpperCase();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toUpperCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toUpperCase();	  constructorType    =    constructor.toLowerCase();    	non-compiled	[CE]  ';'  expected	41	None	replace
260	[BUG]  [BUGGY]  constructorType  =  constructor.toLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toLastChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toLastChild();	  constructorType    =    constructor.toLowerCase();    	non-compiled	[CE]  ';'  expected	41	None	replace
261	[BUG]  [BUGGY]  constructorType  =  constructor.cloneTree();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.cloneTree();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.cloneTree();	  constructorType    =    constructor.toLowerCase();    	non-compiled	[CE]  ';'  expected	41	None	replace
262	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(FUNCTION_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  getNativeType(FUNCTION_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  getNativeType(FUNCTION_TYPE);	  Type    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	32	None	replace
263	[BUG]  [BUGGY]  constructorType  =  constructor.toLong();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toLong();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toLong();	  constructorType    =    constructor.toBigInteger();    	non-compiled	[CE]  ';'  expected	39	None	replace
264	[BUG]  [BUGGY]  type  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);	  type    =    compiler.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
265	[BUG]  [BUGGY]  type  =  constructorType.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  constructorType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  constructorType.getNativeType(UNKNOWN_TYPE);	  constructorType    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	2	None	replace
266	[BUG]  [BUGGY]  Node  constructorType  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  n.removeFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  n.removeFirstChild();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
267	[BUG]  [BUGGY]  Node  constructorType  =  constructor.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Node  constructorType  =  constructor.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Node  constructorType  =  constructor.getFirstChild();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
268	[BUG]  [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  context.getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  context.getNativeType(UNKNOWN_TYPE,  constructorType);	  constructorType    =    context.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
269	[BUG]  [BUGGY]  Constructor  <  N,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  N,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  N,  V>  constructorType  =  compiler.getInstance().getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    else    {    type    =    getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	55	None	replace
270	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.getFirstChild();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	57	None	replace
271	[BUG]  [BUGGY]  constructorType  =  constructor.toMainFunctionType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  constructor.toMainFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  constructor.toMainFunctionType();	  constructorType    =    n.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
272	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toLowerCase();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toLowerCase();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toLowerCase();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
273	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toFunctionType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
274	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toSingletonType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  JSType  constructorType  =  constructor.toSingletonType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	JSType  constructorType  =  constructor.toSingletonType();	  JSType    constructorType    =    constructorType.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	43	None	replace
275	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	34	None	replace
276	[BUG]  [BUGGY]  Constructor  <  N,  Branch>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Constructor  <  N,  Branch>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Constructor  <  N,  Branch>  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
277	[BUG]  [BUGGY]  parentType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  parentType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	parentType  =  compiler.getNativeType(UNKNOWN_TYPE);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
278	[BUG]  [BUGGY]  aughtExceptionHandler.handleUnknownType(constructorType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  aughtExceptionHandler.handleUnknownType(constructorType);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	aughtExceptionHandler.handleUnknownType(constructorType);	  if(constructorType    ==    null)    {    constructorType    =    compiler.getNativeType(UNKNOWN_TYPE);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
279	[BUG]  [BUGGY]  Type  constructorType  =  constructor.getParameterType(0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.getParameterType(0);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.getParameterType(0);	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
280	[BUG]  [BUGGY]  Type  constructorType  =  constructor.getConstructorType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.getConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.getConstructorType();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
281	[BUG]  [BUGGY]  Type  constructorType  =  constructor.getParent();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  constructor.getParent();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  constructor.getParent();	  Type    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	58	None	replace
282	[BUG]  [BUGGY]  Type  constructorType  =  type.toFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  type.toFunctionType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  type.toFunctionType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
283	[BUG]  [BUGGY]  Type  constructorType  =  type.toConstructorType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  Type  constructorType  =  type.toConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	Type  constructorType  =  type.toConstructorType();	  Type    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	44	None	replace
284	[BUG]  [BUGGY]  constructorType  =  scope.toConstructorType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.toConstructorType();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.toConstructorType();	  constructorType    =    scope.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	6	None	replace
285	[BUG]  [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  n.getFirstChild();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  n.getFirstChild();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  compiler.getNativeType(UNKNOWN_TYPE)+  n.getFirstChild();	  constructorType    =    compiler.getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  ';'  expected	24	None	replace
286	[BUG]  [BUGGY]  constructorType  =  scope.getPrototype();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.getPrototype();  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.getPrototype();	  constructorType    =    scope.getParent();    	non-compiled	[CE]  ';'  expected	51	None	replace
287	[BUG]  [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  null);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {      [BUGGY]  constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  null);  [BUGGY]      if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1042	1042	1	replace	constructorType  =  scope.restrictByNotNullOrUndefined(),  n,  null);	  constructorType    =    scope.restrictByNotNullOrUndefined(),    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
