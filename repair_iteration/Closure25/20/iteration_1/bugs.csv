bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  scope.getJSType();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
2	[BUG]  [BUGGY]  JSType  type  =  n.getFirstChild().getJSType();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n.getFirstChild().getJSType();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getFirstChild().getJSType();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
3	[BUG]  [BUGGY]  JSType  type  =  n.getFirstChild();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n.getFirstChild();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getFirstChild();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
4	[BUG]  [BUGGY]  JSType  type  =  n.getJavaType();  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n.getJavaType();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJavaType();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
5	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]    [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	  	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
6	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  scope.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n!=  null?  scope.getJSType()  :  n.getJSType();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  scope.getJSType()  :  n.getJSType();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
7	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getJSType();  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getJSType();	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
8	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  [BUGGY]  JSType  type  =  n.getJSType(scope);  [BUGGY]  Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope);	JSType  type  =  n.getJSType();  	non-compiled	[CE]  ';'  expected	39	None	replace
