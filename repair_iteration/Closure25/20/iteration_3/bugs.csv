bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSType  type  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getLastChild();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getLastChild();	  JSType    type    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
2	[BUG]  [BUGGY]  JSType  type  =  n  ==  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  scope.getJSType()?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
3	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType()?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
4	[BUG]  [BUGGY]  JSType  type  =  n.getJSType()!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType()!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType()!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
5	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  n.getJSType()  :  scope.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  n.getJSType()  :  scope.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  n.getJSType()  :  scope.getJSType();	  JSType    type    =    scope!=    null?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	22	None	replace
6	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope,  name);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope,  name);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope,  name);	  JSType    type    =    n.getJSType(scope,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
7	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(registry,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(registry,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(registry,  scope);	  JSType    type    =    n.getJSType(scope,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
8	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope,  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope,  objectType);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope,  objectType);	  JSType    type    =    n.getJSType(scope,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
9	[BUG]  [BUGGY]  JSType  type  =  scope.getNodeType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNodeType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNodeType();	  JSType    type    =    n.getNodeType();    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  JSType  type  =  n.getReturnType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getReturnType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getReturnType();	  JSType    type    =    n.getNodeType();    	non-compiled	[CE]  ';'  expected	15	None	replace
11	[BUG]  [BUGGY]  JSType  type  =  n.getElementType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getElementType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getElementType();	  JSType    type    =    n.getNodeType();    	non-compiled	[CE]  ';'  expected	15	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  scope);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  JSType  type  =  n.getLastChild().getJSType(scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getLastChild().getJSType(scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getLastChild().getJSType(scope);	  JSType    type    =    n.getFirstChild().getJSType(scope);    	non-compiled	[CE]  ';'  expected	31	None	replace
19	[BUG]  [BUGGY]  JSType  type  =  n.getFirstChild().getJSType(scope,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getFirstChild().getJSType(scope,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getFirstChild().getJSType(scope,  scope);	  JSType    type    =    n.getFirstChild().getJSType(scope);    	non-compiled	[CE]  ';'  expected	31	None	replace
20	[BUG]  [BUGGY]  JSType  type  =  scope.getFirstChild().getJSType(n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getFirstChild().getJSType(n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getFirstChild().getJSType(n);	  JSType    type    =    n.getFirstChild().getJSType(scope);    	non-compiled	[CE]  ';'  expected	31	None	replace
21	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  n.getJSType()  :  scope.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  null?  n.getJSType()  :  scope.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  n.getJSType()  :  scope.getJSType();	  JSType    type    =    scope    ==    null?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	26	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(UNKNOWN_TYPE,  scope);	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
27	[BUG]  [BUGGY]  JSType  type  =  getNativeType(NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(NO_OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(NO_OBJECT_TYPE);	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
28	[BUG]  [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getJSType());	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
29	[BUG]  [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getFirstChild());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getFirstChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(UNKNOWN_TYPE,  n.getFirstChild());	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
30	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType(),  n);	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
31	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getModule());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getModule());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType(),  n.getModule());	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
32	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getChildCount());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getChildCount());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType(),  n.getChildCount());	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
33	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getLocalPart());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getLocalPart());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType(),  n.getLocalPart());	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
34	[BUG]  [BUGGY]  JSType  type  =  n.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNativeType(JSTypeNative.OBJECT_TYPE);	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getFirstChild());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getFirstChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getFirstChild());	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
37	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n.getJSType());	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  JSType  type  =  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
40	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getFirstChild());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getFirstChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getFirstChild());	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
41	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getString());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getString());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n.getString());	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  Node  type  =  n.getLastChild().getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getLastChild().getNext();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getLastChild().getNext();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
43	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getType();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
44	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getString();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getString();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getString();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
45	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getParent();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getParent();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getParent();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
46	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getLastChild();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getLastChild();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
47	[BUG]  [BUGGY]  Node  type  =  scope.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  scope.getFirstChild().getNext();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  scope.getFirstChild().getNext();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
48	[BUG]  [BUGGY]  JSType  type  =  scope.getReturnType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getReturnType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getReturnType();	  JSType    type    =    scope.getJavaType();    	non-compiled	[CE]  ';'  expected	14	None	replace
49	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeDesc();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeDesc();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeDesc();	  JSType    type    =    scope.getJavaType();    	non-compiled	[CE]  ';'  expected	14	None	replace
50	[BUG]  [BUGGY]  JSType  type  =  scope.getRawType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getRawType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getRawType();	  JSType    type    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
51	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  scope.getJavaType()  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  scope.getJavaType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  scope.getJavaType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJavaType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
52	[BUG]  [BUGGY]  JSType  type  =  scope.getJavaType()!=  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJavaType()!=  null?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJavaType()!=  null?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJavaType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
53	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope,  scope);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getFirstChild(),  scope);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getNext(),  scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getNext(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getNext(),  scope);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  true);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  true);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope,  true);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
57	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getType(),  scope);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
58	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getLastChild());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getLastChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getLastChild());	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
59	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getNext());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getNext());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getNext());	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
60	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLastChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLastChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLastChild());	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
61	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getFirstChild(),  n);	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
62	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLocalPart());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLocalPart());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getFirstChild(),  n.getLocalPart());	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
63	[BUG]  [BUGGY]  JSType  type  =  n.getParent().getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getParent().getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getParent().getJSType();	  JSType    type    =    n.getNext().getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
64	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  scope.getJSType()  :  n.getChildCount();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  scope.getJSType()  :  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  scope.getJSType()  :  n.getChildCount();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getChildCount();    	non-compiled	[CE]  ';'  expected	36	None	replace
65	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getFirstChild();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getFirstChild();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getChildCount();    	non-compiled	[CE]  ';'  expected	36	None	replace
66	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getString(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getString(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getString(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
67	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getChildCount(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getChildCount(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getChildCount(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.OBJECT_TYPE);	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
70	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeRegistry().getNativeType(UNKNOWN_TYPE);	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  JSType  type  =  scope.getObjectType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getObjectType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getObjectType();	  JSType    type    =    n.getObjectType();    	non-compiled	[CE]  ';'  expected	17	None	replace
73	[BUG]  [BUGGY]  JSType  type  =  scope.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNext();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNext();	  JSType    type    =    n.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
74	[BUG]  [BUGGY]  JSType  type  =  n.getParent();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getParent();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getParent();	  JSType    type    =    n.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
75	[BUG]  [BUGGY]  JSType  type  =  scope.getLastChild().getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getLastChild().getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getLastChild().getJSType();	  JSType    type    =    n.getLastChild().getJSType();    	non-compiled	[CE]  ';'  expected	12	None	replace
76	[BUG]  [BUGGY]  JSType  type  =  n.getfirstChild().getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getfirstChild().getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getfirstChild().getJSType();	  JSType    type    =    n.getLastChild().getJSType();    	non-compiled	[CE]  ';'  expected	12	None	replace
77	[BUG]  [BUGGY]  JSType  type  =  n.getLastChild().getNext().getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getLastChild().getNext().getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getLastChild().getNext().getJSType();	  JSType    type    =    n.getLastChild().getJSType();    	non-compiled	[CE]  ';'  expected	12	None	replace
78	[BUG]  [BUGGY]  Node  type  =  n.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getLastChild();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getLastChild();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
79	[BUG]  [BUGGY]  Node  type  =  n.getChildCount();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getChildCount();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
80	[BUG]  [BUGGY]  Node  type  =  n.getNext();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getNext();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getNext();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
81	[BUG]  [BUGGY]  Node  type  =  scope.getType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  scope.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  scope.getType();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
82	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getModule());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getModule());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n.getModule());	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
83	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n);	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
84	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString()  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString()  +  1);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString()  +  1);	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
85	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getLocalPart());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getLocalPart());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n.getLocalPart());	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
86	[BUG]  [BUGGY]  JSType  type  =  registry.getJSType(n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  registry.getJSType(n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  registry.getJSType(n);	  JSType    type    =    n.getJSType(registry);    	non-compiled	[CE]  ';'  expected	38	None	replace
87	[BUG]  [BUGGY]  JSType  type  =  register.getJSType(n);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  register.getJSType(n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  register.getJSType(n);	  JSType    type    =    n.getJSType(registry);    	non-compiled	[CE]  ';'  expected	38	None	replace
88	[BUG]  [BUGGY]  JSType  type  =  n.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getNativeType(UNKNOWN_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNativeType(UNKNOWN_TYPE);	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
89	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n);	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
90	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(NO_OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(NO_OBJECT_TYPE);	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
91	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getJSType());	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
92	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(UNKNOWN_TYPE)+  1;	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
93	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getFirstChild());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getFirstChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(UNKNOWN_TYPE,  n.getFirstChild());	  JSType    type    =    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	10	None	replace
94	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n)+  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n)+  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n)+  1;	  JSType    type    =    n.getJSType(scope)+    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
95	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope)+  2;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope)+  2;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope)+  2;	  JSType    type    =    n.getJSType(scope)+    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
96	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope)/  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope)/  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope)/  1;	  JSType    type    =    n.getJSType(scope)+    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
103	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getJSType());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  n.getJSType());	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
104	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getChildCount());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getChildCount());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  n.getChildCount());	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
105	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getFirstChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  n.getFirstChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  n.getFirstChild());	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
106	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  n.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  n.cloneTree());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  n.cloneTree());	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
107	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  false);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  false);	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  scope);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
113	[BUG]  [BUGGY]  Type  type  =  scope.getType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  scope.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  scope.getType();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
114	[BUG]  [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  false;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  false;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  false;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
115	[BUG]  [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  null;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  null;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
116	[BUG]  [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  true;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  true;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()  instanceof  BooleanType?((  BooleanType)n).booleanValue()  :  true;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
117	[BUG]  [BUGGY]  Node  type  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  scope.getFirstChild();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  scope.getFirstChild();	  Node    type    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
118	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getJSType();	  Node    type    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	29	None	replace
119	[BUG]  [BUGGY]  Node  type  =  scope.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  scope.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  scope.getJSType();	  Node    type    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	29	None	replace
120	[BUG]  [BUGGY]  JSType  type  =  n.getType()  }  ';';  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getType()  }  ';';  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getType()  }  ';';	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
121	[BUG]  [BUGGY]  JSType  type  =  n.getValueType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getValueType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getValueType();	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
122	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope,  value);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope,  value);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope,  value);	  JSType    type    =    n.getJSType(scope,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkNotNull(scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkNotNull(scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkNotNull(scope);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkNotNull(n,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkNotNull(n,  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkNotNull(n,  scope);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkNotNull(type);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkNotNull(type);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkNotNull(type);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
126	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE)+  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE)+  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE)+  1;	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!hasLendsName);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!hasLendsName);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
128	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
129	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getJSType());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType(),  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType(),  n.getJSType());	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
130	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType()  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType()  +  1);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType()  +  1);	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
131	[BUG]  [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getChildCount();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getChildCount();	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
132	[BUG]  [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  null;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  null;	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
133	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getfirstChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getfirstChild(),  scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getfirstChild(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.BLOCK);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.OBJECTLIT);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(scope.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
136	[BUG]  [BUGGY]  JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getChildCount();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getChildCount();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getChildCount();    	non-compiled	[CE]  ';'  expected	36	None	replace
137	[BUG]  [BUGGY]  Node  type  =  n.getParent();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getParent();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getParent();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
138	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getNext()  +  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getNext()  +  1;	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
139	[BUG]  [BUGGY]  JSType  type  =  n.getChildCount();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getChildCount();	  JSType    type    =    n.getNext();    	non-compiled	[CE]  ';'  expected	25	None	replace
140	[BUG]  [BUGGY]  JSType  type  =  n.getNext().getJSType(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getNext().getJSType(scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNext().getJSType(scope);	  JSType    type    =    n.getNext().getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
141	[BUG]  [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(scope.getType()  ==  Token.NAME);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(scope.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
143	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  n.getJSType()  :  n.getJSType();	  JSType    type    =    scope!=    null?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	22	None	replace
144	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  scope.getType()  :  n.getType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  scope.getType()  :  n.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  scope.getType()  :  n.getType();	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
145	[BUG]  [BUGGY]  JSType  type  =  n!=  null?  scope.toObjectType()  :  n.getType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  null?  scope.toObjectType()  :  n.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  null?  scope.toObjectType()  :  n.getType();	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
146	[BUG]  [BUGGY]  Node  type  =  n.getJSType(scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getJSType(scope);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getJSType(scope);	  Node    type    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	29	None	replace
147	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  null?  n.getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  n.getJSType()  :  n.getJSType();	  JSType    type    =    scope    ==    null?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	26	None	replace
148	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  value);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope,  value);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope,  value);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
149	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope  +  1);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope  +  1);	  Scope    scope    =    traverse(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
150	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n  +  1);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n  +  1);	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
151	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n,  valueType);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n,  valueType);	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
152	[BUG]  [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(UNKNOWN_TYPE,  n);	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
153	[BUG]  [BUGGY]  JSType  type  =  getNativeType(NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(NOT_OBJECT_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(NOT_OBJECT_TYPE);	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
154	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getObjectType()  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  null?  scope.getObjectType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getObjectType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJavaType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
155	[BUG]  [BUGGY]  Type  type  =  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getJSType();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
156	[BUG]  [BUGGY]  Type  type  =  n!=  null?  scope.getType()  :  n.getType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n!=  null?  scope.getType()  :  n.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n!=  null?  scope.getType()  :  n.getType();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
157	[BUG]  [BUGGY]  Type  type  =  n  ==  null?  scope.getType()  :  n.getType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n  ==  null?  scope.getType()  :  n.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n  ==  null?  scope.getType()  :  n.getType();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
158	[BUG]  [BUGGY]  Type  type  =  n!=  null?  scope.toObjectType()  :  n.getType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n!=  null?  scope.toObjectType()  :  n.getType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n!=  null?  scope.toObjectType()  :  n.getType();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
159	[BUG]  [BUGGY]  Type  type  =  n.getChildCount();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getChildCount();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getChildCount();	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
160	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope)+  3;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getJSType(scope)+  3;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope)+  3;	  JSType    type    =    n.getJSType(scope)+    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
161	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().cloneTree();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getFirstChild().cloneTree();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().cloneTree();	  Node    type    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	30	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	4	None	replace
163	[BUG]  [BUGGY]  JSType  type  =  getNativeType(ARRAY_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  getNativeType(ARRAY_TYPE);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(ARRAY_TYPE);	  JSType    type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	35	None	replace
164	[BUG]  [BUGGY]  JSType  type  =  n.getParentNode();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getParentNode();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getParentNode();	  JSType    type    =    n.getNodeType();    	non-compiled	[CE]  ';'  expected	15	None	replace
165	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType()).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType()).restrictByNotNullOrUndefined();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType()).restrictByNotNullOrUndefined();	  JSType    type    =    scope.getJSType(n.getJSType());    	non-compiled	[CE]  ';'  expected	27	None	replace
166	[BUG]  [BUGGY]  JSType  type  =  n.getType()!=  null?  n.getType()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getType()!=  null?  n.getType()  :  null;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getType()!=  null?  n.getType()  :  null;	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
167	[BUG]  [BUGGY]  JSType  type  =  n.getType()!=  null?  n.getType()  :  objectType;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n.getType()!=  null?  n.getType()  :  objectType;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getType()!=  null?  n.getType()  :  objectType;	  JSType    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	16	None	replace
168	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getChildCount());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getChildCount());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getChildCount());	  JSType    type    =    scope.getJSType(n.getFirstChild());    	non-compiled	[CE]  ';'  expected	32	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	3	None	replace
171	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getType()  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n  ==  null?  scope.getType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJavaType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
172	[BUG]  [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getFirstChild().getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getFirstChild().getJSType()  :  n.getJSType();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  scope.getJSType()?  n.getFirstChild().getJSType()  :  n.getJSType();	  JSType    type    =    n!=    scope.getJSType()?    n.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	37	None	replace
173	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;	  JSType    type    =    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	11	None	replace
174	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.cloneTree());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.cloneTree());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.cloneTree());	  JSType    type    =    scope.getJSType(n);    	non-compiled	[CE]  ';'  expected	18	None	replace
175	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  objectType);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  objectType);	  JSType    type    =    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	9	None	replace
176	[BUG]  [BUGGY]  JSType  type  =  scope.getType()!=  null?  scope.getType()  :  n;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getType()!=  null?  scope.getType()  :  n;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getType()!=  null?  scope.getType()  :  n;	  JSType    type    =    scope.getType();    	non-compiled	[CE]  ';'  expected	8	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
178	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getJSType());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getJSType());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n.getJSType());	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
179	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getLastChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getLastChild());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n.getLastChild());	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
180	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getChildCount());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  JSType  type  =  scope.getJSType(n.getString(),  n.getChildCount());  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString(),  n.getChildCount());	  JSType    type    =    scope.getJSType(n.getString());    	non-compiled	[CE]  ';'  expected	33	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getString().equals( "object "));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getString().equals( "object "));  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getString().equals( "object "));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	34	None	replace
184	[BUG]  [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  null;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()!=  null?  n.getType()  :  null;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
185	[BUG]  [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_OBJECT_TYPE;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_OBJECT_TYPE;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_OBJECT_TYPE;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
186	[BUG]  [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  objectType;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  objectType;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()!=  null?  n.getType()  :  objectType;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
187	[BUG]  [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_TYPE;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_TYPE;  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType()!=  null?  n.getType()  :  DEFAULT_TYPE;	  Type    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	28	None	replace
188	[BUG]  [BUGGY]  Node  type  =  n.getString();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {      [BUGGY]  Node  type  =  n.getString();  [BUGGY]      Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getString();	  Node    type    =    n.getType();    	non-compiled	[CE]  ';'  expected	2	None	replace
