bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  Node  type  =  n.getType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Node  type  =  n.getType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getType();	      	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);	      	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Node  type  =  n.getFirstChild();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkNotNull(n);	      	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope);	      	non-compiled	[CE]  ';'  expected	5	None	replace
8	[BUG]  [BUGGY]  JSType  type  =  scope.getType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getType();	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.OBJECT_TYPE);	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(UNKNOWN_TYPE);	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
11	[BUG]  [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
12	[BUG]  [BUGGY]  JSType  type  =  n.getLastChild().getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getLastChild().getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getLastChild().getJSType();	  JSType    type    =    n.getFirstChild().getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
13	[BUG]  [BUGGY]  JSType  type  =  n.getNext().getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getNext().getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNext().getJSType();	  JSType    type    =    n.getFirstChild().getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  JSType  type  =  scope.getJavaType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getJavaType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJavaType();	  JSType    type    =    n.getJavaType();    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  JSType  type  =  n.getNodeType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getNodeType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNodeType();	  JSType    type    =    n.getJavaType();    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  JSType  type  =  n.getType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getType();	  JSType    type    =    n.getJavaType();    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  JSType  type  =  n.getObjectType();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getObjectType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getObjectType();	  JSType    type    =    n.getJavaType();    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getJSType(n);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n);	  JSType    type    =    n.getJSType(scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getJSType(scope,  scope);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope,  scope);	  JSType    type    =    n.getJSType(scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(scope)+  1;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getJSType(scope)+  1;  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(scope)+  1;	  JSType    type    =    n.getJSType(scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getJavaType()  :  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n  ==  null?  scope.getJavaType()  :  n.getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getJavaType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  JSType  type  =  scope!=  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope!=  null?  n.getJSType()  :  n.getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope!=  null?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n!=    null?    scope.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	6	None	replace
23	[BUG]  [BUGGY]  JSType  type  =  n.getLastChild();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getLastChild();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getLastChild();	  JSType    type    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	3	None	replace
24	[BUG]  [BUGGY]  JSType  type  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getFirstChild();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getFirstChild();	  JSType    type    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	3	None	replace
25	[BUG]  [BUGGY]  JSType  type  =  n.getNext();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getNext();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getNext();	  JSType    type    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	3	None	replace
26	[BUG]  [BUGGY]  JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope  ==  null?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	7	None	replace
27	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getJSType(n.getJSType());  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getJSType());	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
28	[BUG]  [BUGGY]  Type  type  =  n.getType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Type  type  =  n.getType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Type  type  =  n.getType();	      	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  Node  type  =  n.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Node  type  =  n.getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getJSType();	      	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  Node  type  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Node  type  =  n.getFirstChild().getNext();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Node  type  =  n.getFirstChild().getNext();	      	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  JSType  type  =  n.getFirstChild().getJSType(scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getFirstChild().getJSType(scope);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getFirstChild().getJSType(scope);	  JSType    type    =    n.getFirstChild().getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
32	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getJSType(n.getFirstChild());  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getFirstChild());	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
33	[BUG]  [BUGGY]  JSType  type  =  scope.getJSType(n.getString());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  scope.getJSType(n.getString());  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  scope.getJSType(n.getString());	  JSType    type    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  getNativeType(UNKNOWN_TYPE);	      	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getChildCount();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getChildCount();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n  ==  null?  scope.getJSType()  :  n.getChildCount();	  JSType    type    =    n    ==    null?    scope.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	7	None	replace
37	[BUG]  [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n!=  scope.getJSType()?  n.getJSType()  :  n.getJSType();	  JSType    type    =    n!=    null?    scope.getJSType()    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	6	None	replace
38	[BUG]  [BUGGY]  JSType  type  =  n.getJSType(registry);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {    [BUGGY]  JSType  type  =  n.getJSType(registry);  [BUGGY]    Preconditions.checkNotNull(type);  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }      [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	649	649	1	replace	JSType  type  =  n.getJSType(registry);	  JSType    type    =    n.getJSType(scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
