bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
2	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	      	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
8	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
9	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;	      	non-compiled	[CE]  ';'  expected	8	None	replace
12	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
15	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);	  return    scope.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	11	None	replace
17	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	11	None	replace
18	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	11	None	replace
19	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  return    scope.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
21	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
22	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
23	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
24	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    {    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    {    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    {    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
27	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  return  n.getJSType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType();	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
29	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
30	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
31	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  n;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.cloneTree();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.cloneTree();	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
33	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.FUNCTION;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	12	None	replace
36	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	12	None	replace
37	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	2	None	replace
38	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
40	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  n,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(NO_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.setJSType(getNativeType(NO_TYPE));  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(NO_TYPE));	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
48	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getFirstChild();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild();	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
49	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()!=  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()!=  Token.FUNCTION;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
50	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    {    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	9	None	replace
52	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
53	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
54	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	12	None	replace
59	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	2	None	replace
61	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	9	None	replace
65	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
66	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
67	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
68	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	5	None	replace
69	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	13	None	replace
70	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
71	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.restrictByNotNullOrUndefined();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined();	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
72	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
73	[BUG]  [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.OBJECTLIT;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
74	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	1	None	replace
75	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
76	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
77	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
78	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
79	[BUG]  [BUGGY]  n.setJSType(valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }    [BUGGY]  n.setJSType(valueType);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(valueType);	      	non-compiled	[CE]  ';'  expected	8	None	replace
