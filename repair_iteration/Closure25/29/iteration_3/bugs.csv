bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	65	None	replace
2	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	65	None	replace
3	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qObjName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qObjName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	13	None	replace
5	[BUG]  [BUGGY]  if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
6	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
7	[BUG]  [BUGGY]  cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
8	[BUG]  [BUGGY]  cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
9	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    n.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
10	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
11	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  if(valueType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
14	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
15	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
16	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
17	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
18	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
19	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
20	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
21	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	68	None	replace
22	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	68	None	replace
23	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	68	None	replace
24	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    n,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	50	None	replace
25	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
26	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
27	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	40	None	replace
30	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	40	None	replace
31	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	6	None	replace
33	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	6	None	replace
34	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	59	None	replace
35	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	59	None	replace
36	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	21	None	replace
37	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	21	None	replace
38	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	21	None	replace
39	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	21	None	replace
40	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);	  return    n.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
42	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
43	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	58	None	replace
44	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getLastChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
47	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
48	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.OBJECTLIT)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
49	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  return  n.getFirstChild();  }  else  {  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
50	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	18	None	replace
51	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	18	None	replace
52	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	18	None	replace
53	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
54	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
55	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
56	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
57	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(type);	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
58	[BUG]  [BUGGY]  n.setJSType(objectType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(objectType);	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
59	[BUG]  [BUGGY]  n.setJSType(rawValueType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(rawValueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(rawValueType);	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
60	[BUG]  [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(NO_TYPE));	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
61	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	37	None	replace
62	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	22	None	replace
63	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
64	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    	non-compiled	[CE]  ';'  expected	19	None	replace
65	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	36	None	replace
66	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(memberName,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(memberName,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(memberName,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	36	None	replace
67	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	38	None	replace
68	[BUG]  [BUGGY]  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
69	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
70	[BUG]  [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
71	[BUG]  [BUGGY]  if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
72	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()!=  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()!=  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()!=  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
73	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
74	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
75	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
76	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
77	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
78	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qNameName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qNameName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qNameName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	35	None	replace
79	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qNameName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qNameName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qNameName);	  return    scope.inferQualifiedSlot(name,    qNameName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	35	None	replace
80	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qNameName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qNameName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	35	None	replace
81	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qObjName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
82	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qObjName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
83	[BUG]  [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
84	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
85	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
86	[BUG]  [BUGGY]  String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getLastChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
87	[BUG]  [BUGGY]  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
88	[BUG]  [BUGGY]  return  n.getType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
89	[BUG]  [BUGGY]  return  n.getJSType().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType().restrictByNotNullOrUndefined();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
90	[BUG]  [BUGGY]  return  n.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getNativeType(UNKNOWN_TYPE);	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
91	[BUG]  [BUGGY]  return  n.getJSType().toString();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType().toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType().toString();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
92	[BUG]  [BUGGY]  return  n.getFirstChild().getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getFirstChild().getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild().getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
93	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
94	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
95	[BUG]  [BUGGY]  return  valueType.setJSType(getNativeType(UNKNOWN_TYPE),  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType.setJSType(getNativeType(UNKNOWN_TYPE),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType.setJSType(getNativeType(UNKNOWN_TYPE),  n);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
96	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
97	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
98	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
99	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
100	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  qKeyName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  qKeyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
101	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
102	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
103	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
104	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
105	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
106	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getJSType()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()!=  Token.NAME?  n.getJSType()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
107	[BUG]  [BUGGY]  return  n.getJSType()  ==  Token.NAME?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  Token.NAME?  n.getJSType()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  Token.NAME?  n.getJSType()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
108	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_STRING;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_STRING;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_STRING;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
109	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_LIST;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_LIST;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  Collections.EMPTY_LIST;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
110	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT_TYPE;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT_TYPE;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT_TYPE;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
111	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qNameName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
112	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
113	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	66	None	replace
114	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldValueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	69	None	replace
115	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  scope);	  return    scope.inferQualifiedSlot(name,    oldValueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	69	None	replace
116	[BUG]  [BUGGY]  return  n.getJSType()  ==  Token.VAR;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
117	[BUG]  [BUGGY]  return  n.getJSType()!=  Token.VAR;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
118	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
119	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  null;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
120	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
121	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getJSType()  ==  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getJSType()  ==  null;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
122	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  return    scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	26	None	replace
123	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	26	None	replace
124	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
125	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  n,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
126	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
127	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
128	[BUG]  [BUGGY]  return  scope.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
129	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
130	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
131	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined());	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
132	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
133	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined()  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNotNullOrUndefined()  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined()  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
134	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);	  return    scope.inferQualifiedSlot(name,    qObjName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	23	None	replace
135	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  objectType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
136	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType,  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
137	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
138	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  valueType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
139	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
140	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    n,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	60	None	replace
141	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);	  return    scope.inferQualifiedSlot(name,    n,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	60	None	replace
142	[BUG]  [BUGGY]  return  n.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
143	[BUG]  [BUGGY]  return  n.getJSType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
144	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
145	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  null;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
146	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getJSType()!=  getNativeType(UNKNOWN_TYPE);	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
147	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(ARRAY_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(ARRAY_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
148	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
149	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(OBJECT_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
150	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
151	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
152	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName!=  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
153	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
154	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
155	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
156	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  name;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  name;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  name;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
157	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  oldType;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  oldType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  oldType;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
158	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  valueType;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  valueType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  valueType;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
159	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  item;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  item;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  item;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
160	[BUG]  [BUGGY]  if(hasLendsName)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
161	[BUG]  [BUGGY]  if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
162	[BUG]  [BUGGY]  if(valueType  ==  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
163	[BUG]  [BUGGY]  if(hasLendsName)  {  if(n  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  if(n  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  if(n  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
164	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
165	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  keyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
166	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
167	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  name  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  name  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  name  :  n;	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
168	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  n.getJSType();	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
169	[BUG]  [BUGGY]  return  value.getType()  ==  Token.NAME?  n  :  n;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  value.getType()  ==  Token.NAME?  n  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  value.getType()  ==  Token.NAME?  n  :  n;	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
170	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  null;	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
171	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.cloneTree();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  n.cloneTree();	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
172	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  type  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	25	None	replace
173	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  return    scope.inferQualifiedSlot(name,    qObjName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	24	None	replace
174	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
175	[BUG]  [BUGGY]  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
176	[BUG]  [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
177	[BUG]  [BUGGY]  if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasType())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
178	[BUG]  [BUGGY]  if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
179	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	15	None	replace
180	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	15	None	replace
181	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qObjName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
182	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
183	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
184	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    qObjName,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	27	None	replace
185	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
186	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qObjName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	43	None	replace
187	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	44	None	replace
188	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	44	None	replace
189	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
190	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
191	[BUG]  [BUGGY]  return  n.getJSType()  ==  Token.OBJECTLIT;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  Token.OBJECTLIT;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  Token.OBJECTLIT;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
192	[BUG]  [BUGGY]  return  n.getJSType()!=  Token.OBJECTLIT;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  Token.OBJECTLIT;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  Token.OBJECTLIT;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
193	[BUG]  [BUGGY]  return  n.getType()!=  Token.OBJECTLIT;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()!=  Token.OBJECTLIT;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()!=  Token.OBJECTLIT;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
194	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
195	[BUG]  [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()!=  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()!=  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()!=  null;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
196	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name,    valueType);    	non-compiled	[CE]  ';'  expected	62	None	replace
197	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name,  valueType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name,    valueType);    	non-compiled	[CE]  ';'  expected	62	None	replace
198	[BUG]  [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
199	[BUG]  [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  null?  null  :  n.getType()  >=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
200	[BUG]  [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  [Delete]  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()!=  null?  null  :  n.getType()  [Delete]  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()!=  null?  null  :  n.getType()  [Delete]  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
201	[BUG]  [BUGGY]  cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cast(scope,  name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
202	[BUG]  [BUGGY]  cast(scope,  name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cast(scope,  name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cast(scope,  name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
203	[BUG]  [BUGGY]  cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cast(scope,  name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
204	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
205	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
206	[BUG]  [BUGGY]  safeName.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  safeName.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	safeName.setJSType(getNativeType(UNKNOWN_TYPE));	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
207	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
208	[BUG]  [BUGGY]  return  valueType.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
209	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE,  valueType));	  return    n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
210	[BUG]  [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasChildren())  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
211	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.getType()  ==  Token.NAME)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
213	[BUG]  [BUGGY]  String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getLastChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
214	[BUG]  [BUGGY]  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
215	[BUG]  [BUGGY]  if(hasLendsName)  {  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(valueType!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
216	[BUG]  [BUGGY]  if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(valueType!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
217	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(valueType!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
218	[BUG]  [BUGGY]  return  n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
219	[BUG]  [BUGGY]  return  scope.cloneTree();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
220	[BUG]  [BUGGY]  return  n.cloneBoolean();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.cloneBoolean();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.cloneBoolean();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
221	[BUG]  [BUGGY]  return  n.cloneType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.cloneType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.cloneType();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
222	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qObjName);	  return    scope.inferQualifiedSlot(name,    qObjName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	20	None	replace
223	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	18	None	replace
224	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	18	None	replace
225	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);	  return    scope.inferQualifiedSlot(name,    valueName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	58	None	replace
226	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueName);	  return    scope.inferQualifiedSlot(name,    valueName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	58	None	replace
227	[BUG]  [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
228	[BUG]  [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
229	[BUG]  [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
230	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  name.getJSType()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  name.getJSType()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  name.getJSType()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
231	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  name);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name,    valueType);    	non-compiled	[CE]  ';'  expected	62	None	replace
232	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    name,    valueType);    	non-compiled	[CE]  ';'  expected	62	None	replace
233	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  rawValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	68	None	replace
234	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  ||  n.setJSType(getNativeType(OBJECT_TYPE));	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
235	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
236	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
237	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNotNullOrUndefined(valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined(valueType);	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
238	[BUG]  [BUGGY]  return  n.restrictByNonNullOrUndefined();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNonNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNonNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
239	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(name);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNotNullOrUndefined(name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined(name);	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
240	[BUG]  [BUGGY]  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
241	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNotNullOrUndefined(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined(scope);	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
242	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  keyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
243	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  keyName);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
244	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  keyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  keyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    keyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	51	None	replace
245	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  rawValueType);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
246	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);	  return    n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	30	None	replace
247	[BUG]  [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	38	None	replace
248	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
249	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(OBJECT_TYPE));	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
250	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
251	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName!=  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
252	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  name);	  return    scope.inferQualifiedSlot(name,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    name);    	non-compiled	[CE]  ';'  expected	42	None	replace
253	[BUG]  [BUGGY]  return  n!=  null?  null  :  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n!=  null?  null  :  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n!=  null?  null  :  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
254	[BUG]  [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
255	[BUG]  [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
256	[BUG]  [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(!hasLendsName)  {  String  memberName  =  n.getFirstChild().getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getFirstChild().getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
257	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  name;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  name;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  name;	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
258	[BUG]  [BUGGY]  return  n.getJSType()  ==  Token.NAME?  value  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  Token.NAME?  value  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  Token.NAME?  value  :  n;	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
259	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  memberName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
260	[BUG]  [BUGGY]  return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
261	[BUG]  [BUGGY]  if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
262	[BUG]  [BUGGY]  cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
263	[BUG]  [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
264	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
265	[BUG]  [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(memberName,    valueType,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	36	None	replace
266	[BUG]  [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()  ==  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()  ==  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.OBJECTLIT  ||  n.getJSType()  ==  null;	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
267	[BUG]  [BUGGY]  return  n.getNext();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getNext();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getNext();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
268	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild().getNext();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
269	[BUG]  [BUGGY]  return  n.getFirstChild().cloneTree();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getFirstChild().cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild().cloneTree();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
270	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
271	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	46	None	replace
272	[BUG]  [BUGGY]  if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
273	[BUG]  [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
274	[BUG]  [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
275	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
276	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  name,  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
277	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qObjName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  qKeyName);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    memberName,    valueType);    	non-compiled	[CE]  ';'  expected	16	None	replace
278	[BUG]  [BUGGY]  return  n!=  null?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n!=  null?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n!=  null?  null  :  n.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
279	[BUG]  [BUGGY]  return  n.getJSType(valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType(valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType(valueType);	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
280	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  memberName);	  scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
281	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  qName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    memberName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
282	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);	  return    n.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	43	None	replace
283	[BUG]  [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
284	[BUG]  [BUGGY]  cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	cope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
285	[BUG]  [BUGGY]  return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
286	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
287	[BUG]  [BUGGY]  if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n!=  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
288	[BUG]  [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
289	[BUG]  [BUGGY]  if(n  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n  ==  null)  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
290	[BUG]  [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName  ==  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName    ==    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
291	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  oldType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    valueType);    	non-compiled	[CE]  ';'  expected	54	None	replace
292	[BUG]  [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	37	None	replace
293	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.cloneChildren();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.cloneChildren();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
294	[BUG]  [BUGGY]  return  valueType.setJSType(getNativeType(NO_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  valueType.setJSType(getNativeType(NO_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  valueType.setJSType(getNativeType(NO_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
295	[BUG]  [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
296	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  return  scope;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  return  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  valueType);  return  scope;	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
297	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  return  scope;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  return  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));  return  scope;	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
298	[BUG]  [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  return  scope;  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(getNativeType(NO_TYPE));  return  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(getNativeType(NO_TYPE));  return  scope;	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
299	[BUG]  [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(!hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
300	[BUG]  [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
301	[BUG]  [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(n.hasChildren())  {  String  memberName  =  n.getString();  if(memberName!=  null  ||  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
302	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  name.getJSType()  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  name.getJSType()  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  name.getJSType()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
303	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  n,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    n,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	39	None	replace
304	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	66	None	replace
305	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  keyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  keyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  keyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	59	None	replace
306	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  valueType);	  return    scope.inferQualifiedSlot(name,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	12	None	replace
307	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	15	None	replace
308	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	40	None	replace
309	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  n);	  return    n.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	40	None	replace
310	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
311	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  valueType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
312	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName,  valueType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  qKeyName,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	7	None	replace
313	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
314	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
315	[BUG]  [BUGGY]  return  n.getJSType()  ==  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  ==  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  ==  null;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	34	None	replace
316	[BUG]  [BUGGY]  return  n.getJSType()  >>  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  >>  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
317	[BUG]  [BUGGY]  return  n.getJSType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getJSType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getJSType()  >=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
318	[BUG]  [BUGGY]  return  n.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  >=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
319	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldValueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldValueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldValueType);	  return    scope.inferQualifiedSlot(name,    oldValueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
320	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
321	[BUG]  [BUGGY]  Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
322	[BUG]  [BUGGY]  if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  else  {  scope.inferNull();  }	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    else    {    scope.inferNull();    }    	non-compiled	[CE]  ';'  expected	55	None	replace
323	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
324	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	10	None	replace
325	[BUG]  [BUGGY]  return  n.getFirstChild()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getFirstChild()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getFirstChild()!=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
326	[BUG]  [BUGGY]  return  n.getString()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getString()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getString()!=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
327	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()!=  Token.NAME;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	49	None	replace
328	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	41	None	replace
329	[BUG]  [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  return  scope;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(getNativeType(UNKNOWN_TYPE));    return    scope;    	non-compiled	[CE]  ';'  expected	11	None	replace
330	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldValueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	6	None	replace
331	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qObjName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	13	None	replace
332	[BUG]  [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.OBJECTLIT  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.OBJECTLIT  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.getType()    ==    Token.OBJECTLIT;    	non-compiled	[CE]  ';'  expected	73	None	replace
333	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    value    :    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
334	[BUG]  [BUGGY]  return  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.setJSType(getNativeType(NOT_OBJECT_TYPE));	  return    n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	47	None	replace
335	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
336	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  scope.inferQualifiedSlot(name,    qKeyName,    valueType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	9	None	replace
337	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value.getJSType()  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value.getJSType()  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value.getJSType()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
338	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  NON_OBJECT;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    n;    	non-compiled	[CE]  ';'  expected	31	None	replace
339	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
340	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    n.inferQualifiedSlot(name,    valueType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType,    qKeyName);    	non-compiled	[CE]  ';'  expected	61	None	replace
341	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.GETPROP;	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	32	None	replace
342	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  valueName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  return    scope.inferQualifiedSlot(name,    valueName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	58	None	replace
343	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  value.getJSType()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  value.getJSType()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  value.getJSType()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
344	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  oldKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    qKeyName,    oldType!=    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
345	[BUG]  [BUGGY]  Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	Scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
346	[BUG]  [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    objectType);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
347	[BUG]  [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType!=  null)  {  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  }	  if(valueType!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
348	[BUG]  [BUGGY]  n.setJSType(var.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  n.setJSType(var.getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	n.setJSType(var.getNativeType(UNKNOWN_TYPE));	  n.setJSType(valueType);    	non-compiled	[CE]  ';'  expected	79	None	replace
349	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  memberName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  memberName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	  return    scope.inferQualifiedSlot(name,    memberName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType);    	non-compiled	[CE]  ';'  expected	15	None	replace
350	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
351	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
352	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
353	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
354	[BUG]  [BUGGY]  Scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  Scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	Scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	  if(n!=    null)    {    scope.inferQualifiedSlot(name,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
355	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.VAR  &&  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  ';'  expected	72	None	replace
356	[BUG]  [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  &&  memberName.length()  ==  0)  {  return  scope;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  &&  memberName.length()  ==  0)  {  return  scope;  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(hasLendsName)  {  String  memberName  =  n.getString();  if(memberName!=  null  &&  memberName.length()  ==  0)  {  return  scope;  }	  if(hasLendsName)    {    String    memberName    =    n.getString();    if(memberName!=    null    ||    memberName.length()    ==    0)    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
357	[BUG]  [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	if(valueType  ==  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
358	[BUG]  [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  objectType);	  return    n.inferQualifiedSlot(memberName,    qKeyName,    oldType    ==    null?    getNativeType(UNKNOWN_TYPE):    oldType,    valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
359	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  scope.intValue()  :  n.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
360	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  name  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  name  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.getType()  ==  Token.NAME?  name  :  n.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
361	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  n.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
362	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined()  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  n.restrictByNotNullOrUndefined()  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n.restrictByNotNullOrUndefined()  ||  n.setJSType(getNativeType(UNKNOWN_TYPE));	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
363	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  UNKNOWN_TYPE  :  n.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }      [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  UNKNOWN_TYPE  :  n.restrictByNotNullOrUndefined());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  UNKNOWN_TYPE  :  n.restrictByNotNullOrUndefined());	  return    n.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	71	None	replace
