bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n;  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  n;  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  n;	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
2	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
3	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
4	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
5	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
6	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
7	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
8	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	  	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
9	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
10	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  {  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  {  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  valueType  {  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
11	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(memberName,  qKeyName,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
12	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(memberName,  valueType,  oldType  ==  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
13	[BUG]  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  }  scope.inferQualifiedSlot(name,  qKeyName,  oldType  ==  null  ?  getNativeType(UNKNOWN_TYPE)  :  oldType,  valueType);  }  }  else  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  }  [BUGGY]  return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	706	706	1	replace	return  scope.inferQualifiedSlot(name,  qKeyName,  oldType!=  null?  getNativeType(UNKNOWN_TYPE):  oldType,  valueType);	return  scope;  	non-compiled	[CE]  ';'  expected	57	None	replace
