bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);	  	compilable	  [FE]  NullPointerException  	4	2	add
2	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);	  	compilable	  [FE]  NullPointerException  	4	2	add
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
4	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
6	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
8	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
9	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);	  	compilable	  [FE]  NullPointerException  	4	2	add
10	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);	  	compilable	  [FE]  NullPointerException  	4	2	add
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
12	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
13	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
14	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
15	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope);  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope);	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope));	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
17	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope());  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope());	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
18	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope());  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  new  FlowScope());	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
19	[BUG]  [BUGGY]  scope  =  traverse(arg,  newScope());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  newScope());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  newScope());	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
20	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope());  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  new  FlowScope());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope());	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
21	[BUG]  [BUGGY]      scope  =  n.getJSType();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =  n.getJSType();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =  n.getJSType();	  	non-compiled	[CE]  incompatible  types	9	None	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	        n.setJSType(type);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
23	[BUG]  [BUGGY]      n.setJSType(type);  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(type);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
24	[BUG]  [BUGGY]      scope  =  n.getLastChild();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =  n.getLastChild();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =  n.getLastChild();	  	non-compiled	[CE]  incompatible  types	9	None	add
25	[BUG]  [BUGGY]      scope  =(Node)arg.next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =(Node)arg.next();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =(Node)arg.next();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
26	[BUG]  [BUGGY]      scope  =(Node)arg.getNext();  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =(Node)arg.getNext();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =(Node)arg.getNext();	  	non-compiled	[CE]  incompatible  types	9	None	add
27	[BUG]  [BUGGY]      scope  =  n.getType();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =  n.getType();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =  n.getType();	  	non-compiled	[CE]  incompatible  types	9	None	add
28	[BUG]  [BUGGY]      scope  =(Node)arg.getJSType();  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =(Node)arg.getJSType();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =(Node)arg.getJSType();	  	non-compiled	[CE]  inconvertible  types	9	None	add
29	[BUG]  [BUGGY]      n.setJSType(arg.getInstanceType());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(arg.getInstanceType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(arg.getInstanceType());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
30	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);	  	compilable	  [FE]  IllegalStateException  	11	2	add
31	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);	  	compilable	  [FE]  IllegalStateException  	11	2	add
32	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    JSType  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	11	None	add
33	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    Scope  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	11	None	add
34	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(arg,  functionScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    FunctionType  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	11	None	add
35	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  assign  a  value  to  final  variable  functionScope  [FE]            IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  functionScope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  functionScope	11	None	add
36	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  scope);  [CE]  incompatible  types  [FE]              IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    Scope  functionScope  =  traverse(arg,  scope);	  	non-compiled	[CE]  incompatible  types	11	None	add
37	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  scope);  [CE]  incompatible  types  [FE]                IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    JSType  functionScope  =  traverse(arg,  scope);	  	non-compiled	[CE]  incompatible  types	11	None	add
38	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseNode(n,  scope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(n,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  scope);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  syntacticScope);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.getJSType());	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  context);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  context);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  context);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol  context	15	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  type);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
45	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructor);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  arg,  constructor);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructor);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
46	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  constructor);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  constructor);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  constructor);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
47	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
48	[BUG]  [BUGGY]  scope  =  traverse(n,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
49	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
50	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  constructorType);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType);	  scope    =    traverse(arg,    ct);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	8	None	replace
51	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  scope,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope,  arg);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
52	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
53	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
54	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope  =  traverse(n,  scope);	  scope    =    traverse(arg,    scope,    n);    	compilable	  [FE]  StackOverflowError  	7	3	replace
55	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  [FE]  StackOverflowError  [FE]                        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope);	  scope    =    traverse(arg,    scope,    n);    	compilable	  [FE]  StackOverflowError  	7	3	replace
56	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n.getJSType());	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
57	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  n,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
58	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.next());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg.next());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.next());	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
59	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
60	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
61	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(registry,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
62	[BUG]  [BUGGY]  scope  =  traverse(ct,  arg,  type);  [CE]  cannot  find  symbol  ct  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(ct,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(ct,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  cannot  find  symbol  ct	6	None	replace
63	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  type);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	12	None	replace
64	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  n);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	12	None	replace
65	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	12	None	replace
66	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
67	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  type);	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
68	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
69	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
70	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n.getJSType(),  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n.getJSType(),  arg);	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
71	[BUG]  [BUGGY]  scope  =  traverse(g,  n.getJSType());  [CE]  cannot  find  symbol  g  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(g,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol  g	3	None	replace
72	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructor);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructor);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  constructor);	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
73	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	1	None	replace
74	[BUG]  [BUGGY]  scope  =  traverse(scope,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	1	None	replace
75	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  context);  [CE]  cannot  find  symbol  context  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  context);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  context);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  cannot  find  symbol  context	1	None	replace
76	[BUG]  [BUGGY]  scope  =  traverse(scope,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
77	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
78	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(functionScope,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
79	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  syntacticScope,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  type);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
80	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  n);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
81	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(syntacticScope,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
82	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  type);	  scope    =    traverse(arg,    null);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
83	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n);	  scope    =    traverse(arg,    null);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
84	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n.getJSType());	  scope    =    traverse(arg,    null);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
85	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  ct);  [CE]  cannot  find  symbol  ct  [FE]          NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null,  ct);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  ct);	  scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol  ct	5	None	replace
86	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  constructorType,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
87	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  type,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  n);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
88	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  constructor);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  constructor);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  constructor);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
89	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverseNode(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  functionScope);	  scope    =    traverseNode(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
90	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  constructor.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
91	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  type,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
92	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
93	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  functionScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  functionScope);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	1	None	replace
94	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  constructor,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor,  n);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
95	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  constructor,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor,  type);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
96	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  constructor);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  type,  constructor);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  constructor);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	13	None	replace
97	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
98	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
99	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    n.setJSType(type);	  	compilable	  [FE]  NullPointerException  	4	2	add
100	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    n.setJSType(type);	  	compilable	  [FE]  NullPointerException  	4	2	add
101	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
102	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
103	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
104	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	compilable	  [FE]  NullPointerException  	4	2	add
105	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    FunctionScope  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
106	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  scope);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    FunctionScope  functionScope  =  traverse(arg,  scope);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
107	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [CE]  incompatible  types  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    FunctionType  functionScope  =  n.getJSType();	  	non-compiled	[CE]  incompatible  types	11	None	add
108	[BUG]  [BUGGY]  scope  =  traverse(arg,  context,  n);  [CE]  cannot  find  symbol  context  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  context,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  context,  n);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  cannot  find  symbol  context	7	None	replace
109	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  null);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope,  null);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  null);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	12	None	replace
110	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  output);  [CE]  cannot  find  symbol  output  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope,  output);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  output);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol  output	12	None	replace
111	[BUG]  [BUGGY]  scope  =  traverse(arg,  output);  [CE]  cannot  find  symbol  output  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  output);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  output);	  scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol  output	12	None	replace
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	        n.setJSType(getNativeType(UNKNOWN_TYPE));	  	compilable	  [FE]  ComparisonFailure  	9	1	add
113	[BUG]  [BUGGY]      n.setJSType(getNativeType(UNKNOWN_TYPE));  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(getNativeType(UNKNOWN_TYPE));	  	compilable	  [FE]  ComparisonFailure  	9	1	add
114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	        n.setJSType(arg.getJSType());	  	compilable	  [FE]  ComparisonFailure  	9	1	add
115	[BUG]  [BUGGY]      n.setJSType(arg.getJSType());  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(arg.getJSType());	  	compilable	  [FE]  ComparisonFailure  	9	1	add
116	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(constructorType);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	        n.setJSType(constructorType);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
117	[BUG]  [BUGGY]      n.setJSType(constructorType);  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(constructorType);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(constructorType);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
118	[BUG]  [BUGGY]      scope  =(Node)arg.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]          AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      scope  =(Node)arg.clone();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        scope  =(Node)arg.clone();	  	non-compiled	[CE]  clone()  has  protected  access  in  Object	9	None	add
119	[BUG]  [BUGGY]      n.setJSType(getNativeType(NO_TYPE));  [CE]  cannot  find  symbol  NO_TYPE  [FE]            AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(getNativeType(NO_TYPE));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(getNativeType(NO_TYPE));	  	non-compiled	[CE]  cannot  find  symbol  NO_TYPE	9	None	add
120	[BUG]  [BUGGY]  scope  =  traverse(arg,  this);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  this);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  this);	  scope    =    traverse(arg,    null);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	5	None	replace
121	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope));	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
122	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(false));	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
123	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope);  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope);	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
124	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(functionScope,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
125	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  functionScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  syntacticScope,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  functionScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
126	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
127	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg,  syntacticScope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(functionScope,  arg,  syntacticScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	2	None	replace
128	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  n.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  arg,  n.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
129	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
130	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  arg.getJSType());  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  n,  arg.getJSType());  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n,  arg.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	3	None	replace
131	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType()));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType()));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(n.getJSType()));	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
132	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type));  [CE]  FlowScope  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(type));	  scope    =    traverse(arg,    new    FlowScope());    	non-compiled	[CE]  FlowScope  is  abstract;  cannot  be  instantiated	14	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  n.removeChild(arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	n.removeChild(arg);	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
134	[BUG]  [BUGGY]  n.removeChild(arg);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  n.removeChild(arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);	      	compilable	  [FE]  AssertionFailedError  	10	2	replace
135	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  n);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructor,  arg,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  n);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	1	None	replace
136	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  n);  [CE]  cannot  find  symbol  structor  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(structor,  arg,  n);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  n);	  scope    =    traverse(arg,    n);    	non-compiled	[CE]  cannot  find  symbol  structor	1	None	replace
137	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  scope);	  scope    =    traverse(arg,    scope,    n);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	7	None	replace
138	[BUG]  [BUGGY]      n.setJSType(getNativeType(FUNCTION_TYPE));  [CE]  cannot  find  symbol  FUNCTION_TYPE  [FE]    AssertionFailedError    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]      n.setJSType(getNativeType(FUNCTION_TYPE));  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	        n.setJSType(getNativeType(FUNCTION_TYPE));	  	non-compiled	[CE]  cannot  find  symbol  FUNCTION_TYPE	9	None	add
139	[BUG]  [BUGGY]  scope  =  traverse(config,  arg,  type);  [CE]  cannot  find  symbol  config  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(config,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  cannot  find  symbol  config	6	None	replace
140	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  type);  [CE]  cannot  find  symbol  structor  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(structor,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  cannot  find  symbol  structor	6	None	replace
141	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  type);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(scope,  arg,  type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  type);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
142	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  arg);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(constructorType,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  arg);	  scope    =    traverse(arg,    type);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	6	None	replace
143	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg);  [CE]  cannot  find  symbol  structor  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(structor,  arg);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg);	  scope    =    traverse(arg,    constructor);    	non-compiled	[CE]  cannot  find  symbol  structor	13	None	replace
144	[BUG]  [BUGGY]  scope  =  traverse(arg,  compiler);  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  compiler);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  compiler);	  scope    =    traverse(arg,    context);    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	16	None	replace
145	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }	  	compilable	  [FE]  IllegalStateException  	11	2	add
146	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }	  	compilable	  [FE]  IllegalStateException  	11	2	add
147	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	compilable	  [FE]  IllegalStateException  	11	2	add
148	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	compilable	  [FE]  IllegalStateException  	11	2	add
149	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    functionScope);    n.setJSType(type);	  	compilable	  [FE]  IllegalStateException  	11	2	add
150	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    n.setJSType(type);	  	compilable	  [FE]  IllegalStateException  	11	2	add
151	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	11	2	add
152	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();	  	compilable	  [FE]  IllegalStateException  	11	2	add
153	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	4	3	add
154	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    NullPointerException    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {    [BUGGY]  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	4	3	add
